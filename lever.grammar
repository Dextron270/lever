# This file describes & implements the syntax for the lever language.

file =>
    empty_list:
    statements

block => pass(statements): indent statements dedent

statements =>
    first:           block_statement
    append(lhs rhs): lhs=statements newline rhs=block_statement

block_statement =>
    pass: statement
    return(statement):
        kw_return:"return" statement
    if(statement block otherwise):
        kw_if:"if" statement block otherwise
    while(statement block):
        kw_while:"while" statement block
    local_assign(symbol block_statement):
        symbol assign_op:"=" block_statement
    upvalue_assign(symbol block_statement):
        symbol upvalue_assign_op:":=" block_statement
    setitem(expr idx block_statement):
        expr lb:"[" idx=expr rb:"]" assign_op:"=" block_statement
    setattr(expr symbol block_statement):
        expr dot:"." symbol assign_op:"=" block_statement
    for(symbol statement block):
        kw_for:"for" symbol kw_in:"in" statement block


otherwise =>
    done:
    elif(statement block otherwise):
        newline kw_elif:"elif" statement block otherwise
    else(block):
        newline kw_else:"else" block

statement =>
    pass: expr

expr =>
    expr100
    binary: expr100 lt:"<" expr100
    binary: expr100 gt:">" expr100
    binary: expr100 eq:"==" expr100
    binary: expr100 ne:"!=" expr100
    binary: expr100 le:"<=" expr100
    binary: expr100 ge:">=" expr100

expr100 =>
    expr200
    binary: expr100 plus:"+" expr200
    binary: expr100 minus:"-" expr200

expr200 =>
    prefix
    binary: expr star:"*" prefix
    binary: expr slash:"/" prefix
    binary: expr percent:"%" prefix

prefix =>
    postfix
    prefix: plus:"+" postfix
    prefix: minus:"-" postfix

postfix =>
    term
    call(postfix arguments):
        postfix lp:"(" arguments rp:")"
    getitem(postfix expr):
        postfix lb:"[" expr rb:"]"
    getattr(postfix symbol):
        postfix dot:"." symbol

arguments =>
    empty_list:
    arguments1
    pass(arguments1): arguments1 comma:","

arguments1 =>
    first: expr
    append(lst expr): lst=arguments1 comma:"," expr

term =>
    lookup:          symbol
    int:             int
    float:           float
    string:          string
    pass(expr):      lp:"(" expr rp:")"
    list(arguments): lb:"[" arguments rb:"]"
    function(bindings block):
        lp:"(" bindings rp:")" colon:":" block

bindings =>
    empty_list:
    bindings1
    pass(bindings1): bindings1 comma:","

bindings1 =>
    first: symbol
    append(lst symbol): lst=bindings1 comma:"," symbol
