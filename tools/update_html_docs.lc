import doctools, texopic, html, fs

main = (args):
    src = path(args[1])
    dst = path(args[2])
    print("html doc generator", args)
    print(src)
    print(dst)
    print(path("www/stylesheet.css").relpath(dst))

    docs = []
    for name in fs.scandir(src)
        if name.type == "file" and name.path.endswith(".text")
            res = texopic.read_file(src ++ name.path, doctools.macros)
            docs.append(object();
                body=res
                name=name.path[.:name.path.length-5])

    object_index = html.Node('ul', [], {"class":"list"})

    index_page = null

    for page in docs
        if page.name == "index"
            index_page = page
            page.summary = null
            continue

        page.link = dst ++ (page.name ++ ".html")
        page.index = object_index

        root = page_root()
        root.head.append(
            html.Node("title", ["Lever manual: " ++ page.name]))
        root.body.append(html.Node("h1", [
            "Manual: " ++ page.name], {"class":"embed-header"}))
        page.summary = html.Node("p", ["not documented"])

        for node in page.body
            html_gen(node, root, root.body, page)

        page_finalize(root, src ++ page.name ++ ".text")

        print(page.link)
        markup = html.stringify(root)
        fd = fs.WriteStream(fs.open(page.link, fs.CREAT | fs.WRONLY | fs.TRUNC))
        fd.write(markup.utf8)
        fd.close()

    index_link = dst ++ "index.html"
    root = page_root()
    root.head.append(
        html.Node("title", [
            "Lever documentation index"
        ]))
    root.head.append(html.Node("script", [], {src="../../list.min.js"}))

    root.body.append(html.Node("h1", [
        "Documentation index"], {"class":"embed-header"}))

    module_index = html.Node('table', [])

    for page in docs
        if not page.summary
            continue
        module_index.append(html.Node('tr', [
            html.Node('td', [ html.Node('a', [page.name],
                {
                    href = page.name ++ ".html"
                #href=page.link.relpath(index_link).to_string()
                })]),
            html.Node('td', [page.summary])
            ]))

    intro = []
    for node in index_page.body
        html_gen(node, root, intro, page)

    root.body.append(html.Node('div', [
        html.Raw('
            <input id="tab-module" type="radio" name="tab-group" checked="checked"/>
            <label for="tab-module">Manual</label>
            <input id="tab-search" type="radio" name="tab-group"/>
            <label for="tab-search">Reference</label>
        '),
        html.Node("div", intro ++ [
            html.Node('h2', ["Modules"]),
            module_index,
            html.Node('img', null, {src="lever-see-saw.png", style="margin: 0 auto; display: block"}),
        ], {id="module-tab-content"}),
        html.Node('div', [ 
            html.Node('input', null, {"class":"search", "placeholder":"Search"}),
            object_index,
            ], {id="search-tab-content"}),
        html.Raw("<script>new List('search-tab-content', {valueNames: ['name']});</script>")
    ], {id="tabbed-content"}))

    page_finalize(root, src)

    markup = html.stringify(root)
    fd = fs.WriteStream(fs.open(index_link, fs.CREAT | fs.WRONLY | fs.TRUNC))
    fd.write(markup.utf8)
    fd.close()

html_gen = texopic.Env()

html_gen.text = (text, root, out, page):
    out.append(text)

html_gen.segments[null] = (segment, root, out, page):
    data = []
    for node in segment.data
        html_gen(node, root, data, page)
    if data.length > 0
        out.append(html.Node('p', data))
    if segment.pre
        out.append(html.Node('pre', [segment.pre.text]))

html_gen.macros["i/1"] = (macro, root, out, page):
    data = []
    for node in macro.args[0]
        html_gen(node, root, data, page)
    out.append(html.Node('i', data))

html_gen.segments["document/1"] = (seg, root, out, page):
    if seg.data.length > 0
        page.summary = inline = to_html(seg.data)
        root.body.append(html.Node("p", inline))

html_gen.groups["interface/1"] = (group, root, out, page):
    name = texopic.verbatim(group.head.args[0])
    page.index.append(html.Node("li", [
        html.Node("a",
            [page.name ++ "." ++ name],
            {"class": "name", "href":page.name ++ ".html#" ++ name}),
        get_summary(group)
    ]))
    out.append(html.Node("pre",
        [texopic.stringify([group])],
        {"id": name}))

html_gen.groups["function/1"] = (group, root, out, page):
    name = texopic.verbatim(group.head.args[0])
    page.index.append(html.Node("li", [
        html.Node("a", [
            page.name ++ "." ++ name
        ], {"class": "name", "href":page.name ++ ".html#" ++ name}),
        get_summary(group)
    ]))
    out.append(html.Node("pre",
        [texopic.stringify([group])],
        {"id": name}))

html_gen.groups["multimethod/1"] = (group, root, out, page):
    name = texopic.verbatim(group.head.args[0])
    page.index.append(html.Node("li", [
        html.Node("a", [
            page.name ++ "." ++ name
        ], {"class": "name", "href":page.name ++ ".html#" ++ name}),
        get_summary(group)
    ]))
    out.append(html.Node("pre",
        [texopic.stringify([group])],
        {"id": name}))

html_gen.groups["object/1"] = (group, root, out, page):
    name = texopic.verbatim(group.head.args[0])
    value     = null
    interface = null
    summary   = null
    status    = null
    content = []
    for cell in group.data
        if cell.head
            if cell.head.name == "value"
                value = html.Node("span", to_html(force_horizontal(cell.data)))
            elif cell.head.name == "interface"
                interface = to_html(force_horizontal(cell.data))
            elif cell.head.name == "summary"
                summary = to_summary(cell.data)
            elif cell.head.name == "description"
                content.extend(vertical_html(cell.data))
            elif cell.head.name == "status"
                status = html.Node("div", to_html(force_horizontal(cell.data)), {"class":"status"})
                content.append(status)
                status = cell.data
    out.append(html.Node("div", content, {"id": name, "class": "reference-box"}))

    ref = [
        html.Node("a", [page.name ++ "." ++ name],
            {"class": "name reference", "href":page.name ++ ".html#" ++ name})]
    if value
        ref.extend([" = ", value])
    elif interface
        ref.extend([" : "] ++ interface)
    if summary
        ref.append(summary)
    else
        ref.append(to_summary(null))
    page.index.append(html.Node("li", ref))

    content.insert(0, html.Node("div", ref))



get_summary = (group):
    for cell in group.data
        if cell.head and cell.head.name == "summary"
            return to_summary(cell.data)
    return to_summary(null)

to_summary = (summary):
    if not summary
        data = [html.Node("p", ["not documented"])]
    elif summary.length == 1 and texopic.verbatim(summary[0].data) == "TODO"
        data = [html.Node("p", ["not documented"])]
    else
        data = vertical_html(summary)
    return html.Node("div", data, {"class": "summary"})    

force_horizontal = (group_data):
    result = []
    for segment in group_data
        if segment.head
            result.append(segment.head)
        result.extend(segment.data)
    return result

vertical_html = (data):
    out = []
    for seg in data
        assert seg.head == null
        out.append(html.Node("p", to_html(seg.data)))
    return out

to_html = (data):
    out = []
    for item in data
        if isinstance(item, str)
            out.append(item)
        elif item.name == "ref" and item.args.length == 1
            name = texopic.verbatim(item.args[0])
            out.append(html.Node("i", [name]))
        elif item.name == "ref" and item.args.length == 2
            page = texopic.verbatim(item.args[0])
            name = texopic.verbatim(item.args[1])

            out.append(html.Node("a", [name], {"href":link_to(page, name), "class":"reference"}))
        else
            out.append(texopic.verbatim(item))
    return out

link_to = (page, name):
    if page.startswith("doc:/")
        return page[5 .:] ++ ".html#" ++ name
    else
        return page ++ ".html#" ++ name

page_root = ():
    head = html.Node("head", [
        html.Node("meta", null, {charset="UTF-8"}, {slash=false}),
        html.Node("meta", null, {
            content="width=device-width, initial-scale=1"
            name="viewport"}),
    ])
    body = html.Node("body", [
    ])
    root = html.Node("html", [head, body], {lang="en"})

    body.append(html.Node("ul", [
        # TODO: resolve these paths with relpath.
        html.Node("li", [html.Node("a", [
            html.Node("img", null,
                {src="../../logo.png", alt="LEVER"}, {slash=false})
        ], {href="../../"})]),
        html.Node("li", [html.Node("a", [
            "repository"
        ], {"href":"https://github.com/cheery/lever/", "class":"nav_button"})]),
        html.Node("li", [html.Node("a", [
            "download"
        ], {"href":"../../index.html#download", "class":"nav_button"})]),
        html.Node("li", [html.Node("a", [
            "documentation index"
        ], {"href":"./", "class":"nav_button"})])
    ], {"class":"nav"}))

    root.head = head
    root.body = body
    return root

page_finalize = (root, src):
    root.head.append(
        html.Node("link", null, {
            rel="stylesheet"
            href="../../stylesheet.css" # TODO: fix this one.
            #href=path("www/stylesheet.css").relpath(dst).to_string()
        }, {slash=false}))
    root.head.append(
        html.Raw("<!-- Generated from '" ++ src.to_string() ++
            "' in github.com/cheery/lever -->"))

    # If you ask me what these are, I answer they are colors.
    spans = []
    for color in colors
        spans.append(html.Node("span", [], {
            style = "background-color: " ++ color ++ "; width: 1em; height: 1em; display: inline-block"
        }))

    root.body.append(html.Node("div", spans,
        {style="text-align: center"}))

    root.body.append(html.Raw("
    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-12626354-9', 'auto');
      ga('send', 'pageview');
    </script>"))

colors = [
    "#85818e",
    "#df7120",
    "#a7341c",
    "#5c231c",
    "#a39ea4",

    "#312334",
    "#44588e",
    "#4679b8",
    "#79bbe8",
    "#d7d2d7",

    "#785d9a",
    "#949e85",
    "#2e170e",
    "#7b3c16",
    "#c86f31"]
