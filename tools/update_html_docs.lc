import doctools, texopic, html, fs, json

main = (args):
    src = path(args[1])
    dst = path(args[2])
    print("html doc generator", args)
    print(src)
    print(dst)
    print(path("www/stylesheet.css").relpath(dst))

    docs = []
    for name in fs.scandir(src)
        if name.type == "file" and name.path.endswith(".text")
            res = texopic.read_file(src ++ name.path, doctools.macros)
            docs.append(object();
                body=res
                name=name.path[.:name.path.length-5])

    object_index = html.Node('ul', [], {"class":"list"})

    index_page = null

    for page in docs
        if page.name == "index"
            index_page = page
            page.summary = null
            continue

        page.link = dst ++ (page.name ++ ".html")
        page.index = object_index

        root = page_root()
        root.head.append(
            html.Node("title", ["Lever manual: " ++ page.name]))
        root.body.append(html.Node("h1", [
            "Manual: " ++ page.name], {"class":"embed-header"}))
        page.summary = html.Node("p", ["not documented"])

        context = object();
            name = page.name
            type = "module"
            prefix = ""

        for node in page.body
            html_gen(node, root, root.body, page, context)

        page_finalize(root, src ++ page.name ++ ".text")

        print(page.link)
        markup = html.stringify(root)
        fd = fs.WriteStream(fs.open(page.link, fs.CREAT | fs.WRONLY | fs.TRUNC))
        fd.write(markup.utf8)
        fd.close()

    index_link = dst ++ "index.html"
    root = page_root()
    root.head.append(
        html.Node("title", [
            "Lever documentation index"
        ]))
    root.head.append(html.Node("script", [], {src="../../list.min.js"}))

    root.body.append(html.Node("h1", [
        "Documentation index"], {"class":"embed-header"}))

    module_index = html.Node('table', [])

    for page in docs
        if not page.summary
            continue
        module_index.append(html.Node('tr', [
            html.Node('td', [ html.Node('a', [page.name],
                {
                    href = page.name ++ ".html"
                #href=page.link.relpath(index_link).to_string()
                })]),
            html.Node('td', [page.summary])
            ]))

    intro = []
    for node in index_page.body
        html_gen(node, root, intro, page)

    root.body.append(html.Node('div', [
        html.Raw('
            <input id="tab-module" type="radio" name="tab-group" checked="checked"/>
            <label for="tab-module">Manual</label>
            <input id="tab-search" type="radio" name="tab-group"/>
            <label for="tab-search">Reference</label>
        '),
        html.Node("div", intro ++ [
            html.Node('h2', ["Modules"]),
            module_index,
            html.Node('img', null, {src="lever-see-saw.png", style="margin: 0 auto; display: block"}),
        ], {id="module-tab-content"}),
        html.Node('div', [ 
            html.Node('input', null, {"class":"search", "placeholder":"Search"}),
            object_index,
            ], {id="search-tab-content"}),
        html.Raw("<script>new List('search-tab-content', {valueNames: ['name']});</script>")
    ], {id="tabbed-content"}))

    page_finalize(root, src)

    markup = html.stringify(root)
    fd = fs.WriteStream(fs.open(index_link, fs.CREAT | fs.WRONLY | fs.TRUNC))
    fd.write(markup.utf8)
    fd.close()

html_gen = texopic.Env()

html_gen.text = (text, root, out, page):
    out.append(text)

html_gen.segments[null] = (segment, root, out, page):
    data = []
    for node in segment.data
        html_gen(node, root, data, page)
    if data.length > 0
        out.append(html.Node('p', data))
    if segment.pre
        out.append(html.Node('pre', [segment.pre.text]))

html_gen.macros["i/1"] = (macro, root, out, page):
    data = []
    for node in macro.args[0]
        html_gen(node, root, data, page)
    out.append(html.Node('i', data))

html_gen.segments["document/1"] = (seg, root, out, page):
    if seg.data.length > 0
        page.summary = inline = []
        for node in seg.data
            html_gen(node, root, inline, page)
        root.body.append(html.Node("p", inline))

html_gen.groups["interface/1"] = (group, root, out, page, context):
    name = texopic.verbatim(group.head.args[0])
    context = object();
        heading = html.Node("div", [
            "class ",
            html.Node("a", [name], {
                "href": "#" ++ context.prefix ++ name,
                "class": "name reference"})
        ])
        name = context.prefix ++ name
        type = "interface"
        prefix = name ++ "."
    data = [context.heading]
    index = html.Node("li", [])
    page.index.append(index)
    summary = []

    for cell in group.data
        signature = texopic.signature(cell.head)
        if signature == "extends/0"
            context.heading.append(" extends ")
            for node in force_horizontal(cell.data)
                html_gen(node, root, context.heading, page, context)
        elif signature == "summary/0"
            summary = []
            for node in cell.data
                html_gen(node, root, summary, page, context)
            data.extend(summary)
        elif signature == "description/0"
            for node in cell.data
                html_gen(node, root, data, page, context)
        elif signature == "members/0"
            for node in cell.data
                html_gen(node, root, data, page, context)
        elif signature == "status/0"
            status = html.Node("div", [], {"class":"status"})
            for node in force_horizontal(cell.data)
                html_gen(node, root, status, page, context)
            data.append(status)
        
    out.append(html.Node("div", data, {
        "id": context.name,
        "class": "reference-box"})) #TODO: name it a reference-card ?

    index.extend([
        html.Node("a", [context.name], {
            "class": "name reference",
            "href":page.name ++ ".html#" ++ name}),
        " ", html.Node("sub", ["class"]),
        html.Node("div", summary, {"class": "summary"})    
    ])

html_gen.groups["function/1"] = (group, root, out, page, context):
    in_multimethod = context.type == "multimethod"

    if in_multimethod
        name = []
        for node in group.head.args[0]
            html_gen(node, root, name, page, context)
        context = object();
            arglist = html.Node("span", [])
            heading = html.Node("summary", [
                "[",
                html.Node("span", name),
                "] = (", arglist, ")"
            ])
            arg_ref = html.Node("table", [], {"class": "arg-ref"})
            type = "function"
    else
        name = texopic.verbatim(group.head.args[0])
        context = object();
            arglist = html.Node("span", [])
            heading = html.Node("div", [
                html.Node("a", [name], {
                    "href": "#" ++ context.prefix ++ name,
                    "class": "name reference"}),
                "(", arglist, ")"
            ])
            arg_ref = html.Node("table", [], {"class": "arg-ref"})
            name = context.prefix ++ name
            type = "function"
            prefix = name ++ "."
    data = [context.heading, context.arg_ref]
    index = html.Node("li", [])
    if not in_multimethod
        page.index.append(index)
    summary = []

    for cell in group.data
        signature = texopic.signature(cell.head)
        if not signature
            for node in cell.data
                html_gen(node, root, data, page, context)
        elif signature == "summary/0"
            summary = []
            for node in cell.data
                html_gen(node, root, summary, page, context)
            data.extend(summary)
        elif signature == "description/0"
            for node in cell.data
                html_gen(node, root, data, page, context)
        elif signature == "arg/1" or signature == "optional/2"
            argname = texopic.verbatim(cell.head.args[0])
            if context.arglist.data.length > 0
                context.arglist.append(", ")
            context.arglist.extend([argname])
            if signature == "optional/2"
                argval = [" = "]
                for node in cell.head.args[1]
                    html_gen(node, root, argval, page, context)
                context.arglist.extend(argval)
            block = []
            for node in cell.data
                html_gen(node, root, block, page, context)
            context.arg_ref.append(html.Node("tr", [
                    html.Node("td", [argname, " "]),
                    html.Node("td", block)
            ]))
        elif signature == "arg/2" or signature == "optional/3"
            argname = texopic.verbatim(cell.head.args[0])
            typename = []
            for node in cell.head.args[1]
                html_gen(node, root, typename, page, context)
            if context.arglist.data.length > 0
                context.arglist.append(", ")
            context.arglist.extend([argname, " : "] ++ typename)
            if signature == "optional/3"
                argval = [" = "]
                for node in cell.head.args[2]
                    html_gen(node, root, argval, page, context)
                context.arglist.extend(argval)
            block = []
            for node in cell.data
                html_gen(node, root, block, page, context)
            context.arg_ref.append(html.Node("tr", [
                    html.Node("td", [argname, " "]),
                    html.Node("td", block)
            ]))
        elif signature == "is_variadic/0"
            context.arglist.append("...")
        elif signature == "returns/0"
            block = []
            for node in cell.data
                html_gen(node, root, block, page, context)
            context.arg_ref.append(html.Node("tr", [
                    html.Node("td", ["returns "]),
                    html.Node("td", block)
            ]))
        elif signature == "status/0"
            status = html.Node("div", [], {"class":"status"})
            for node in force_horizontal(cell.data)
                html_gen(node, root, status, page, context)
            data.append(status)
        else
            assert false, signature
    if in_multimethod
        out.append(html.Node("details", data))
    else
        out.append(html.Node("div", data, {
            "id": context.name,
            "class": "reference-box"})) #TODO: name it a reference-card ?
        index.extend([
            html.Node("a", [context.name], {
                "class": "name reference",
                "href":page.name ++ ".html#" ++ context.name}),
            "(", context.arglist, ")",
            html.Node("div", summary, {"class": "summary"})    
        ])
        #index.append(html.Node("div", summary, {"class": "summary"}))

html_gen.segments["source/0"] = (seg, root, out, page, context):
    loc = json.read_string(seg.pre.text)
    first_line = loc["start"]["lno"]
    src = [loc["source"], ":", first_line.to_string()]

    if loc["source"].startswith("builtin:/")
        src_link = "https://github.com/cheery/lever/blob/master/runtime/"
            ++ loc["source"][9 .:] ++ "#L" ++ first_line.to_string()
    elif loc["source"].startswith("../") # TODO: fix this elsewhere.
        src_link = "https://github.com/cheery/lever/blob/master/lib/"
            ++ loc["source"][3 .:] ++ "#L" ++ first_line.to_string()
        src = [loc["source"][3 .:], ":", first_line.to_string()]
    else
        src_link = "https://github.com/cheery/lever/blob/master/lib/"
            ++ loc["source"] ++ "#L" ++ first_line.to_string()

    context.heading.insert(0,
        html.Node("div", [
            html.Node("a", src, {"href": src_link})
        ], {"class": "source-link"}))

html_gen.groups["multimethod/1"] = (group, root, out, page, context):
    name = texopic.verbatim(group.head.args[0])
    context = object();
        heading = html.Node("div", [
            html.Node("a", [name], {
                "href": "#" ++ context.prefix ++ name,
                "class": "name reference"})
        ])
        name = context.prefix ++ name
        type = "multimethod"
        prefix = name ++ " "
    data = [context.heading]
    summary = []

    for cell in group.data
        signature = texopic.signature(cell.head)
        if signature == null
            for node in cell.data
                html_gen(node, root, data, page, context)
        elif signature == "summary/0"
            summary = []
            for node in cell.data
                html_gen(node, root, summary, page, context)
            data.extend(summary)
        elif signature == "description/0"
            for node in cell.data
                html_gen(node, root, data, page, context)
        elif signature == "status/0"
            status = html.Node("div", [], {"class":"status"})
            for node in force_horizontal(cell.data)
                html_gen(node, root, status, page, context)
            data.append(status)
        else
            null#assert false, signature

    out.append(html.Node("div", data, {
        "id": context.name,
        "class": "reference-box"})) #TODO: name it a reference-card ?

    page.index.append(html.Node("li", [
        html.Node("a", [
            page.name ++ "." ++ name
        ], {"class": "name", "href":page.name ++ ".html#" ++ name}),
        " ", html.Node("sub", ["multimethod"]),
        html.Node("div", summary, {"class": "summary"})    
    ]))
    #out.append(html.Node("pre",
    #    [texopic.stringify([group])],
    #    {"id": name}))

html_gen.groups["object/1"] = (group, root, out, page, context):
    name = texopic.verbatim(group.head.args[0])
    context = object();
        extra = html.Node('span', [])
        heading = html.Node("div", [
            html.Node("a", [name], {
                "href": "#" ++ context.prefix ++ name,
                "class": "name reference"}),
            extra
        ])
        name = context.prefix ++ name
        type = "object"
        prefix = name ++ "."
    status    = null
    data = [context.heading]
    summary = []
    for cell in group.data
        signature = texopic.signature(cell.head)
        if signature == "value/0"
            context.extra.append(" = ")
            for node in force_horizontal(cell.data)
                html_gen(node, root, context.extra, page, context)
        elif signature == "interface/0"
            context.extra.append(" : ")
            for node in force_horizontal(cell.data)
                html_gen(node, root, context.extra, page, context)
        elif signature == "summary/0"
            summary = []
            for node in cell.data
                html_gen(node, root, summary, page, context)
            data.extend(summary)
        elif signature == "description/0"
            for node in cell.data
                html_gen(node, root, data, page, context)
        elif signature == "status/0"
            status = html.Node("div", [], {"class":"status"})
            for node in force_horizontal(cell.data)
                html_gen(node, root, status, page, context)
            data.append(status)
    out.append(html.Node("div", data, {"id": name, "class": "reference-box"}))

    page.index.append(html.Node("li", [
        html.Node("a", [
            page.name ++ "." ++ name
        ], {"class": "name", "href":page.name ++ ".html#" ++ name}),
        context.extra,
        html.Node("div", summary, {"class": "summary"})    
    ]))


html_gen.macros["ref/1"] = (macro, root, out, page):
    name = texopic.verbatim(macro.args[0])
    out.append(html.Node("i", [name]))

html_gen.macros["ref/2"] = (macro, root, out, page):
    page = texopic.verbatim(macro.args[0])
    name = texopic.verbatim(macro.args[1])
    out.append(html.Node("a", [name],
        {"href":link_to(page, name), "class":"reference"}))

html_gen.macros["TODO/0"] = (macro, root, out, page):
    out.append("not documented")

force_horizontal = (group_data):
    result = []
    for segment in group_data
        if segment.head
            result.append(segment.head)
        result.extend(segment.data)
    return result

link_to = (page, name):
    if page.startswith("doc:/")
        return page[5 .:] ++ ".html#" ++ name
    else
        return page ++ ".html#" ++ name

page_root = ():
    head = html.Node("head", [
        html.Node("meta", null, {charset="UTF-8"}, {slash=false}),
        html.Node("meta", null, {
            content="width=device-width, initial-scale=1"
            name="viewport"}),
    ])
    body = html.Node("body", [
    ])
    root = html.Node("html", [head, body], {lang="en"})

    body.append(html.Node("ul", [
        # TODO: resolve these paths with relpath.
        html.Node("li", [html.Node("a", [
            html.Node("img", null,
                {src="../../logo.png", alt="LEVER"}, {slash=false})
        ], {href="../../"})]),
        html.Node("li", [html.Node("a", [
            "repository"
        ], {"href":"https://github.com/cheery/lever/", "class":"nav_button"})]),
        html.Node("li", [html.Node("a", [
            "download"
        ], {"href":"../../index.html#download", "class":"nav_button"})]),
        html.Node("li", [html.Node("a", [
            "documentation index"
        ], {"href":"./", "class":"nav_button"})])
    ], {"class":"nav"}))

    root.head = head
    root.body = body
    return root

page_finalize = (root, src):
    root.head.append(
        html.Node("link", null, {
            rel="stylesheet"
            href="../../stylesheet.css" # TODO: fix this one.
            #href=path("www/stylesheet.css").relpath(dst).to_string()
        }, {slash=false}))
    root.head.append(
        html.Raw("<!-- Generated from '" ++ src.to_string() ++
            "' in github.com/cheery/lever -->"))

    # If you ask me what these are, I answer they are colors.
    spans = []
    for color in colors
        spans.append(html.Node("span", [" "], {
            style = "background-color: " ++ color ++ "; width: 1em; height: 1em; display: inline-block"
        }))

    root.body.append(html.Node("div", spans,
        {style="text-align: center"}))

    root.body.append(html.Raw("
    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-12626354-9', 'auto');
      ga('send', 'pageview');
    </script>"))

colors = [
    "#85818e",
    "#df7120",
    "#a7341c",
    "#5c231c",
    "#a39ea4",

    "#312334",
    "#44588e",
    "#4679b8",
    "#79bbe8",
    "#d7d2d7",

    "#785d9a",
    "#949e85",
    "#2e170e",
    "#7b3c16",
    "#c86f31"]
