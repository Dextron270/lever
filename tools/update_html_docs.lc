import doctools, texopic, html, fs, json

main = (args):
    src = path(args[1])
    dst = path(args[2])

    indice = null
    pages = []
    for name in fs.scandir(src)
        if name.type == "file" and name.path.endswith(".text")
            page = object();
                path = src ++ name.path
                link = dst ++ (name.path[.:name.path.length-5] ++ ".html")
                dir = dst
            if name.path == "index.text"
                indice = page
            else
                pages.append(page)

    index = object();
        objects = [] # We want to sort these by reference names before
                     # producing the index.
        modules = [] # Also, the layout of it all is better resolved
                     # in post-order.

    # We use this to provide an inconsistency checking that
    # allows the updater to warn about changed documentation early on
    # and mark it accordingly.
    source_index = json.read_file(src ++ "source_index.json")

    for page in pages
        page.plain = texopic.read_file(page.path, doctools.macros)

        page.root = page_root(page)
        page.summary = ["not documented"]

        context = object();
            toc = Toc()
            html_toc = html.Node("fieldset", [html.Node("legend", ["Table of contents"])], {"class":"toc", "id":"-toc"})
            page = page
            index = index
            card = null # reference card.
            article = html.Node('article', [])
            page.root.body.append(article)
            push = (object_card, index=true):
                if index
                    context.index.objects.append(object();
                        page = page
                        module = card
                        card   = object_card)
                return object();         
                    toc     = toc
                    html_toc = html_toc
                    page    = page
                    index   = index
                    card    = object_card
                    article = article
                    push    = push

        context.article.extend(vertical_html(page.plain, context))
        # vertical html adds the 'out'

        page_finalize(page)

    if indice
        page = indice
        page.plain = texopic.read_file(page.path, doctools.macros)

        page.root = page_root(page)
        head = page.root.head
        body = page.root.body
        head.append(html.Node("title", ["Lever documentation index"]))
        head.append(html.Node("script", [], {
            src=path("www/list.min.js").relpath(page.dir).to_string()
        }))
        body.append(html.Node("h1", ["Documentation index"],
            {"class":"embed-header"}))

        modules = html.Node('table', [], {"class": "module-index"})
        index.modules.sort((a, b):
            return a.name < b.name)
        for manual in index.modules
            modules.append(html.Node('tr', [
                html.Node('td', [html.Node('a', [manual.name],
                {
                    href=manual.link.relpath(page.dir).to_string()
                })]),
                html.Node('td', manual.summary)
            ]))

        objects = html.Node("ul", [], {"class": "list"})
        index.objects.sort((a, b):
            return (a.page.name ++ "." ++ a.card.anchor) <
                   (b.page.name ++ "." ++ b.card.anchor))
        for obj in index.objects
            li = html.Node("li", [])
            if obj.card.prefix
                li.append(obj.card.prefix)
            li.append(html.Node("a", [obj.page.name ++ "." ++ obj.card.anchor], {
                "class": "name reference",
                "href": obj.page.link.relpath(page.dir).to_string() ++
                    "#" ++ obj.card.anchor
            }))
            if obj.card.postfix
                li.append(obj.card.postfix)
            if obj.card.summary
                li.append(html.Node("div", obj.card.summary, {"class": "summary"}))
            objects.append(li)

        context = object();
            toc = Toc()
            html_toc = html.Node("fieldset", [html.Node("legend", ["Table of contents"])], {"class":"toc", "id":"-toc"})
            page = page
            index = index
            module_card = null
            card = null # reference card.

        body.append(html.Node('div', [
            html.Raw('
                <input id="tab-module" type="radio" name="tab-group" checked="checked"/>
                <label for="tab-module">Manual</label>
                <input id="tab-search" type="radio" name="tab-group"/>
                <label for="tab-search">Reference</label>
            '),
            html.Node("div", vertical_html(page.plain, context) ++
            [
                html.Node('h2', ["Modules"]),
                modules,
                html.Node('img', null, {src="lever-see-saw.png", style="margin: 0 auto; display: block"}),
            ], {id="module-tab-content"}),
            html.Node('div', [ 
                html.Node('input', null, {"class":"search", "placeholder":"Search"}),
                objects,
            ], {id="search-tab-content"}),

            html.Raw("<script>new List('search-tab-content', {valueNames: ['name']});</script>")
        ], {id="tabbed-content"}))

        page_finalize(page)

vertical_html = (data, context):
    out = []
    for node in data
        try
            html_env(node, context, out)
        except KeyError as ke
            out.append(html.Node("pre", [texopic.stringify([node])]))
    return out

horizontal_html = (data, context):
    out = []
    for node in data
        try
            html_env(node, context, out)
        except KeyError as ke
            out.extend(texopic.verbatim([node]))
    return out

html_env = texopic.Env()

html_env.text = (text, context, out):
    out.append(text)

html_env.segments["module/1"] = (segment, context, out):
    context.page.name = texopic.verbatim(segment.head.args[0])
    if segment.data.length > 0
        context.page.summary = horizontal_html(segment.data, context)
        out.append(html.Node("p", context.page.summary))
    context.card = object();
        type = "module"
        name = context.page.name
        sub = ""
    context.index.modules.append(context.page)
    # 
    context.page.root.head.append(
        html.Node("title", ["Lever manual: ", context.page.name]))
    context.article.insert(0,
        html.Node("h1", ["Manual: ", context.page.name], {"class": "embed-header"})) 


html_env.segments[null] = (segment, context, out):
    out.append(html.Node('p',
        horizontal_html(segment.data, context)))
    if segment.pre
        out.append(html.Node('pre', [segment.pre.text]))
 
html_env.macros["i/1"] = (macro, context, out):
    out.append(html.Node('i',
        horizontal_html(macro.args[0], context)))

html_env.macros["b/1"] = (macro, context, out):
    out.append(html.Node('b',
        horizontal_html(macro.args[0], context)))

html_env.groups["object/1"] = (group, context, out):
    name = texopic.verbatim(group.head.args[0])
    context = context.push(object();
        type = "object"
        name = name
        sub = context.card.sub ++ name ++ "."
        anchor = context.card.sub ++ name
        prefix = null
        postfix = html.Node("span", [])
        heading = html.Node("div", [
            html.Node("a", [name], {
                "href": "#" ++ anchor,
                "class": "name reference"
            }),
            postfix
        ])
        summary = null
    )
    create_ref_card(group, context, out)

html_env.groups["interface/1"] = (group, context, out):
    name = texopic.verbatim(group.head.args[0])
    context = context.push(object();
        type = "interface"
        name = name
        sub = context.card.sub ++ name ++ "."
        anchor = context.card.sub ++ name
        prefix = html.Node("span", ["class "])
        postfix = html.Node("span", [])
        heading = html.Node("div", [
            prefix,
            html.Node("a", [name], {
                "href": "#" ++ anchor
                "class": "name reference"}),
            postfix
        ])
        summary = null
    )
    create_ref_card(group, context, out)

html_env.groups["function/1"] = (group, context, out):
    name = texopic.verbatim(group.head.args[0])
    context = context.push(object();
        type = "function"
        name = name
        sub = context.card.sub ++ name ++ "."
        anchor = context.card.sub ++ name
        prefix = null
        arglist = html.Node("span", [])
        argref  = html.Node("table", [], {"class": "arg-ref"})
        postfix = html.Node("span", ["(", arglist, ")"])
        heading = html.Node("div", [
            html.Node("a", [name], {
                "href": "#" ++ anchor
                "class": "name reference"}),
            postfix,
            argref
        ])
        summary = null
    )
    create_ref_card(group, context, out)

html_env.groups["multimethod/2"] = (group, context, out):
    name = texopic.verbatim(group.head.args[0])
    arity = texopic.verbatim(group.head.args[1])
    context = context.push(object();
        type = "multimethod"
        name = name
        sub = context.card.sub ++ name ++ " "
        anchor = context.card.sub ++ name
        prefix = null
        postfix = html.Node("span", [" = multimethod(", arity, ")"])
        heading = html.Node("div", [
            html.Node("a", [name], {
                "href": "#" ++ anchor
                "class": "name reference"}),
        ])
        summary = null
    )
    create_ref_card(group, context, out)

html_env.groups["method/0"] = (group, context, out):
    context = context.push(object();
        type = "function"
        name = context.card.name
        sub = context.card.sub
        anchor = context.card.anchor
        prefix = null
        arglist = html.Node("span", [])
        argref  = html.Node("table", [], {"class": "arg-ref"})
        postfix = html.Node("span", ["(", arglist, ")"])
        heading = html.Node("details", [
            html.Node("summary", [postfix]),
            argref
        ])
        summary = null, false)
    fill_card(group, context, context.card.heading.data)
    out.append(context.card.heading)

html_env.groups["default/0"] = (group, context, out):
    context = context.push(object();
        type = "function"
        name = context.card.name
        sub = context.card.sub
        anchor = context.card.anchor
        prefix = null
        arglist = html.Node("span", [])
        argref  = html.Node("table", [], {"class": "arg-ref"})
        postfix = html.Node("span", ["(", arglist, ")"])
        heading = html.Node("details", [
            html.Node("summary", [
                "default", postfix]),
            argref
        ])
        summary = null, false)
    fill_card(group, context, context.card.heading.data)
    out.append(context.card.heading)

html_env.segments["ignore/1"] = (group, context, out):
    null # TODO: ignore a missing variable.

create_ref_card = (group, context, out):
    ref_card = html.Node("div", [context.card.heading], {
        "id": context.card.anchor,
        "class": "reference-box"}) # TODO: rename to reference-card.
    fill_card(group, context, ref_card.data)
    out.append(ref_card)

fill_card = (group, context, out):
    for cell in group.data
        try
            object_env(cell.head, cell.data, context, out)
        except KeyError as ke
            pre = html.Node('pre', [])
            out.append(pre)
            if cell.head
                pre.append(texopic.verbatim([cell.head]))
                pre.append(" ")
            pre.append(texopic.stringify(cell.data))

object_env = texopic.Scope()

object_env[null] = (head, data, context, out):
    out.extend(vertical_html(data, context))

html_env.segments["interface/0"] = (segment, context, out):
    context.card.postfix.append(" : ")
    context.card.postfix.extend(
        horizontal_html(segment.data, context))

html_env.segments["value/0"] = (segment, context, out):
    context.card.postfix.append(" = ")
    context.card.postfix.extend(
        horizontal_html(segment.data, context))

html_env.segments["extends/0"] = (segment, context, out):
    context.card.postfix.append(" extends ")
    context.card.postfix.extend(
        horizontal_html(segment.data, context))

html_env.segments["summary/0"] = (segment, context, out):
    context.card.summary = horizontal_html(segment.data, context)
    out.extend(context.card.summary)

html_env.segments["status/0"] = (segment, context, out):
    status = html.Node("div", [], {"class": "status"})
    status.extend(horizontal_html(segment.data, context))
    out.append(status)

html_env.segments["source/0"] = (segment, context, out):
    loc = json.read_string(segment.pre.text)
    first_line = loc["start"]["lno"]
    src = [loc["source"], ":", first_line.to_string()]
 
    src_link = path("https://github.com/cheery/lever/blob/master/runtime/") ++
        path(loc["source"]).relpath("builtin:/", "../lib/")

    context.card.heading.insert(0,
        html.Node("div", [
            html.Node("a", src, {
                "href": src_link.to_string() ++ "#L" ++ first_line.to_string()
            })
        ], {"class": "source-link"}))

html_env.segments["optional/2"] =
html_env.segments["arg/1"] = (segment, context, out):
    head = segment.head
    argname = texopic.verbatim(head.args[0])
    card = context.card
    if card.arglist.data.length > 0
        card.arglist.append(", ")
    card.arglist.extend([argname])
    if head.args.length == 2
        argval = [" = "]
        argval.extend(horizontal_html(head.args[1], context))
        card.arglist.extend(argval)
    if segment.data.length > 0
        card.argref.append(html.Node("tr", [
            html.Node("td", [argname, " "]),
            html.Node("td", horizontal_html(segment.data, context))
        ]))

html_env.segments["arg/2"] =
html_env.segments["optional/3"] = (segment, context, out):
    head = segment.head
    argname = texopic.verbatim(head.args[0])
    card = context.card
    if card.arglist.data.length > 0
        card.arglist.append(", ")
    card.arglist.extend([argname])
    if head.args.length == 2
        typename = [" : "]
        typename.extend(horizontal_html(head.args[1], context))
        card.arglist.extend(typename)
    if head.args.length == 3
        argval = [" = "]
        argval.extend(horizontal_html(head.args[2], context))
        card.arglist.extend(argval)
    if segment.data.length > 0
        card.argref.append(html.Node("tr", [
            html.Node("td", [argname, " "]),
            html.Node("td", horizontal_html(segment.data, context))
        ]))

html_env.segments["is_variadic/0"] = (segment, context, out):
    context.card.arglist.append("...")

html_env.segments["returns/0"] = (segment, context, out):
    context.card.argref.append(html.Node("tr", [
            html.Node("td", ["returns "]),
            html.Node("td", horizontal_html(segment.data, context))
    ]))

html_env.macros["ref/1"] = (macro, context, out):
    name = texopic.verbatim(macro.args[0])
    out.append(html.Node("i", [name]))

html_env.macros["ref/2"] = (macro, context, out):
    page = texopic.verbatim(macro.args[0])
    name = texopic.verbatim(macro.args[1])
    out.append(html.Node("a", [name],
        {"href":link_to(page, name), "class":"reference"}))

html_env.macros["url/1"] = (macro, context, out):
    link = texopic.verbatim(macro.args[0])
    out.append(html.Node("a", [link], {"href": link}))

html_env.macros["href/2"] = (macro, context, out):
    link = texopic.verbatim(macro.args[0])
    desc = horizontal_html(macro.args[1], context)
    out.append(html.Node("a", desc, {"href": link}))

html_env.segments["image/1"] = (segment, context, out):
    link = texopic.verbatim(segment.head.args[0])
    alt = texopic.verbatim(segment.data)
    out.append(html.Node("img", null,
        {alt=alt, src=link}, {slash:false}))

html_env.segments["toc/0"] = (segment, context, out):
    out.append(html.Node("a", ["Table of contents ", chr(0x2191)], {id="toc-link", href="#-toc"}))
    out.append(context.html_toc)
    out.append(html.Node("script", [], {
        src=path("www/toc-helper.js").relpath(context.page.dir).to_string()
    }))

html_env.segments["section/0"] = (segment, context, out):
    text = horizontal_html(segment.data, context)
    entry = context.toc.entry(0, text)
    data = [entry.label, ". "]
    context.html_toc.append(html.Node("div", data ++ [
        html.Node("a", entry.text, {href="#" ++ entry.link})]))
    out.append(html.Node("h2", data ++ entry.text, {id=entry.link}))

html_env.segments["section/1"] = (segment, context, out):
    link = texopic.verbatim(segment.head.args[0])
    text = horizontal_html(segment.data, context)
    entry = context.toc.entry(0, text, link)
    data = [entry.label, ". "]
    context.html_toc.append(html.Node("div", data ++ [
        html.Node("a", entry.text, {href="#" ++ entry.link})]))
    out.append(html.Node("h2", data ++ entry.text, {id=entry.link}))

html_env.segments["subsection/0"] = (segment, context, out):
    text = horizontal_html(segment.data, context)
    entry = context.toc.entry(1, text)
    data = [entry.label, ". "]
    context.html_toc.append(html.Node("div", data ++ [
        html.Node("a", entry.text, {href="#" ++ entry.link})]))
    out.append(html.Node("h3", data ++ entry.text, {id=entry.link}))

html_env.segments["subsection/1"] = (segment, context, out):
    link = texopic.verbatim(segment.head.args[0])
    text = horizontal_html(segment.data, context)
    entry = context.toc.entry(1, text, link)
    data = [entry.label, ". "]
    context.html_toc.append(html.Node("div", data ++ [
        html.Node("a", entry.text, {href="#" ++ entry.link})]))
    out.append(html.Node("h3", data ++ entry.text, {id=entry.link}))



html_env.macros["TODO/0"] = (macro, context, out):
    out.append("not documented")
 
link_to = (page, name):
    if page.startswith("doc:/")
        return page[5 .:] ++ ".html#" ++ name
    else
        return page ++ ".html#" ++ name

flatten = (group_data):
    result = []
    for segment in group_data
        if segment.head
            result.append(segment.head)
        result.extend(segment.data)
    return result

page_root = (page):
    doctype = html.Raw("<!DOCTYPE html>")
    content = html.Node("html", [], {lang="en"})
    head = html.Node("head", [
        html.Node("meta", null, {charset="UTF-8"}, {slash=false}),
        html.Node("meta", null, {
            content="width=device-width, initial-scale=1"
            name="viewport"}),
    ])
    body = html.Node("body", [])
    nav = html.Node("ul", [], {"class":"nav"})
    nav.extend([
        html.Node("li", [
            html.Node("a", [
                html.Node("img", null, 
                    {
                        src=path("www/logo.png").relpath(page.dir).to_string(),
                        alt="LEVER"
                    },
                    {slash=false})
            ], {href=path("www/").relpath(page.dir).to_string()})
        ]),
        html.Node("li", [html.Node("a", [
            "repository"
        ], {"href":"https://github.com/cheery/lever/", "class":"nav_button"})]),
        html.Node("li", [html.Node("a", [
            "download"
        ], {
            "href":path("www/index.html#download").relpath(page.dir).to_string(),
            "class":"nav_button"
        })]),
        html.Node("li", [html.Node("a", [
            "documentation index"
        ], {"href":"./", "class":"nav_button"})])
    ])
    body.append(nav)
    content.extend([head, body])

    root = html.Block([doctype, content])
    root.head = head
    root.body = body
    return root

page_finalize = (page):
    head = page.root.head
    body = page.root.body
    head.append(
        html.Node("link", null, {
            rel="stylesheet"
            href=path("www/stylesheet.css").relpath(page.dir).to_string()
        }, {slash=false}))
    head.append(
        html.Raw("<!-- Generated from '" ++ page.path.to_string() ++
            "' in github.com/cheery/lever -->"))

    # If you ask me what these are, I answer they are colors.
    spans = []
    for color in colors
        spans.append(html.Node("span", [" "], {
            style = "background-color: " ++ color ++ "; width: 1em; height: 1em; display: inline-block"
        }))

    body.append(html.Node("div", spans,
        {style="text-align: center"}))

    body.append(html.Raw("
    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-12626354-9', 'auto');
      ga('send', 'pageview');
    </script>"))

    print("writing", page.link)
    markup = html.stringify(page.root)
    fd = fs.WriteStream(fs.open(page.link, fs.CREAT | fs.WRONLY | fs.TRUNC))
    fd.write(markup.utf8)
    fd.close()

colors = [
    "#85818e",
    "#df7120",
    "#a7341c",
    "#5c231c",
    "#a39ea4",

    "#312334",
    "#44588e",
    "#4679b8",
    "#79bbe8",
    "#d7d2d7",

    "#785d9a",
    "#949e85",
    "#2e170e",
    "#7b3c16",
    "#c86f31"]

# Helper to generate table of contents
class Toc
    +init = (self, separator='.', labeling=default_labeling):
        self.separator = separator
        self.labeling = labeling
        self.prefix = []
        self.stack  = []
        self.data = []

    entry = (self, depth, text, link=null):
        while depth > len(self.stack)
            labelgen = self.labeling(depth)
            self.stack.append(labelgen)
            self.prefix.append(labelgen.next())
        if depth == len(self.stack)
            labelgen = self.labeling(depth)
            self.stack.append(labelgen)
            self.prefix.append(labelgen.next())
        else
            while depth + 1 < len(self.stack)
                self.stack.pop()
                self.prefix.pop()
            self.prefix[self.prefix.length-1] = self.stack[self.stack.length-1].next()
        label = self.separator.join(self.prefix)
        if not link
            link = label
        entry = object();
            label = label
            link = link
            text = text
        self.data.append(entry)
        return entry

default_labeling = (depth):
    index = 1
    while true
        if depth == 0
            yield index.to_string().rjust(2, '0')
        else
            yield index.to_string()
        index += 1
