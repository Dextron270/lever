# This file describes & implements the syntax for the
# lever 0.10.0, the syntax of this file is not simple
# but it is documented in the
# https://leverlanguage.com/doc/latest/grammar.html

file: (=^block_statement)*

block: (=^block_statement)+

block_statement:
    statement

    statement >'if' statement            / if(., [1])
    statement >'while' statement         / while(., [1])
    statement >'for' symbol >'in' subexpr / for(.., [1])

    'if' subexpr >block =otherwise / if

    'while' statement >block        / while
    'for' symbol >'in' subexpr >block / for
    'for' '[' sep(symbol, ',') ']' >'in' subexpr >block    / for_unpack
    'for' symbol ',' sep(symbol, ',') >'in' subexpr >block / for_unpack([.] concat ., ..)

    'import' join(symbol, ',')               / import
    'from' symbol >'import' join(symbol, ',') / from_import
    'from' symbol >'import' '*'               / from_import_all

    'try' >block (=except)*         / try
    'try' >block (=except)* finally / try

    'class' !class_header >block / class
    'class' !class_header        / class

    'assert' statement >',' statement / assert
    'assert' statement >block         / assert
    'assert' statement                / assert

class_header:
    symbol                          / class_header
    symbol 'extends' expr           / class_header

local_symbol:
    symbol     / str_join
    "+" symbol / str_join(1, 2)
    "%" string / str_join

slot:
    symbol            / lookup_slot
    expr '.' symbol   / attr_slot
    expr '[' expr ']' / item_slot

otherwise:
    / done
    'elif' statement >block ^=otherwise / elif
    'else' >block                       / else

except:
    'except' expr 'as' symbol >block / except

finally:
    'finally' >block / finally

statement:
    expr
    inline_block
    'return' >statement? / return
    'yield' >statement / yield
    'raise' >statement / raise
    'break'           / break
    'continue'        / continue

    local_symbol         '=' statement / local_assign
    symbol              ':=' statement / upvalue_assign
    slot op              '=' statement / op_assign
    expr '[' subexpr ']' '=' statement / setitem
    expr '.' symbol      '=' statement / setattr
    expr '.' symbol     '?=' statement / setattr_default
    '[' sep(symbol, ',') ']'    '=' statement / unpack_assign
    symbol ',' sep(symbol, ',') '=' statement / unpack_assign([.] concat ., ..)

# Expression trailing with a block must grab commas.
# we have subexpr_n for when a subexpr is followed by a comma.
subexpr:
    inline_block
    slice

subexpr_n:
    slice

slice:
    expr
    expr? ".:" expr?            / slice_incr
    expr? ".:" expr? "::" expr  / slice_incr
    expr? ":." expr?            / slice_decr
    expr? ":." expr? "::" expr  / slice_decr

inline_block:
    "(" bindings ")" ":" >block / function
    ":" >block                  / function(blank_bindings(), .)
    expr !";" >block / scopegrabber # It occured to me that scope grab
                                    # is an useful concept for passing values around.
                                    # so we need some syntax for it.
    ":" !expr >block / scopegrabber # DEPRECATED: remove soon.
                                    # The notation to use ':' on the
                                    # left side of expression could be
                                    # argued to be confusing.

expr:
    expr3
    expr3 >'or' expr / or

expr3:
    expr5
    expr5 >'and' expr3 / and

expr5:
    expr8
    'not' >expr8 / not

expr8:
    expr10
    expr10 >"in" expr10         / in
    expr10 >"not" !"in" expr10  / not_in
    expr10 >["<"] expr10        / binary
    expr10 >[">"] expr10        / binary
    expr10 >["=="] expr10       / binary
    expr10 >["!="] expr10       / binary
    expr10 >["<="] expr10       / binary
    expr10 >[">="] expr10       / binary

expr10:
    expr20
    expr10 >["|"] expr20 / binary

expr20:
    expr30
    # There is plenty of evidence that the ^ as XOR
    # operation confuses beginners because they think it is an exponentiation.
    #
    # I did a temporary measure to disable the ^, the idea is that
    # eventually this symbol will take the place of ** and we'll
    # figure out an another place for the xor.
    #expr20 >["^"] expr30 / binary
    #
    # The temporary disable ensures that we will get to
    # purge the xor '^' out of the code before switching.

expr30:
    expr50
    expr30 >["&"] expr50 / binary

expr50:
    expr100
    expr50 >["<<"] expr100 / binary
    expr50 >[">>"] expr100 / binary

expr100:
    expr200
    expr100 >["++"] expr200 / binary
    expr100 >["+"] expr200 / binary
    expr100 >["-"] expr200 / binary

expr200:
    prefix
    expr200 >["*"] prefix / binary
    expr200 >["/"] prefix / binary
    expr200 >["//"] prefix / binary
    expr200 >["%"] prefix / binary

prefix:
    exponent_postfix
    ["+"] exponent_postfix / prefix
    ["-"] exponent_postfix / prefix

op:
    "|"
    "^"
    "&"
    "<<"
    ">>"
    "++"
    "+"
    "-"
    "%"
    "/"
    "*"

exponent_postfix:
    postfix
    postfix "**" exponent_postfix                               / exponent

postfix:
    term
    postfix >"(" arguments ")"        / call
    postfix >"(" grouped(subexpr_n, subexpr) "..." ")" / callv
    postfix >"[" subexpr "]"         / getitem
    postfix >"." symbol              / getattr
    postfix >".?" symbol             / getattr_or_null
                                     
term:
    symbol / lookup
    int    / int
    hex    / hex
    float  / float
    string / string
    "(" subexpr ")"
    "(" sep(symbol "=" subexpr, ',') ")" / record
    "[" list_items "]" / list
    "{" pairs "}"    / dict
    "{" escaped_keyword "}" / lookup
    "%" string              / lookup

terminal int, hex, float, string, symbol

bindings:
    / blank_bindings
    optionals
    optionals ','
    optionals ',' symbol '...' / with_variadic
    symbol '...'               / only_variadic

optionals:
    optional / first_optional
    optionals ',' optional / append_optional
    mandatorys

optional: symbol '=' expr / optional

mandatorys:
    symbol / mandatory
    mandatorys ',' symbol / append_mandatory

# The syntax for inlined records is a little bit
# experimental. It may be desirable to handle this a bit
# differently.
arguments: 
    / []
    grouped(subexpr_n, subexpr)
    grouped_n(subexpr_n, subexpr) "," inline_record / (. append .)
    inline_record / [.]

inline_record: grouped(symbol "=" subexpr_n, symbol "=" subexpr) / record

list_items:
    / []
    grouped(subexpr_n, subexpr)
    grouped_n(subexpr_n, subexpr) ',' # TODO: drop for consistency.

pairs:
    / []
    grouped(pair_n, pair)
    grouped_n(pair_n, pair) ',' # TODO: drop for consistency.

pair:
    expr ":" subexpr
    [symbol / string] "=" subexpr

pair_n:
    expr ":" subexpr_n
    [symbol / string] "=" subexpr_n

escaped_keyword: ['import', 'and', 'or', 'not']


grouped(n, e):
    e                     / [.]
    ^grouped(n, e)    ^=e / (. append .)
    grouped_n(n, e) "," e / (. append .)

grouped_n(n, e):
    n                     / [.]
    ^grouped(n, e)    ^=n / (. append .)
    grouped_n(n, e) "," n / (. append .)

