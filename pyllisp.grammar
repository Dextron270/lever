statements =>
    pass:      flow_statement
    pass(rhs): statements newline rhs=flow_statement

flow_statement =>
    pass: statement
    return(statement):
        return:"return" statement
    if(statement subblock):
        if:"if" statement subblock
    while(statement subblock):
        while:"while" statement subblock
    for: for_bind block

for_bind => for_bind(symbol iter_statement):
    for:"for" symbol in:"in" iter_statement

iter_statement => iter_statement: statement

subblock => subblock: block

statement =>
    pass: expr
    call: expr arguments_1
    assign(lhs statement):
        lhs=symbol eq:"=" statement

expr =>
    expr20
    binary: expr binary_spacing(plus:"+") expr20
    binary: expr binary_spacing(minus:"-") expr20

expr20 =>
    prefix
    binary: expr binary_spacing(star:"*") prefix
    binary: expr binary_spacing(slash:"/") prefix
    binary: expr binary_spacing(percent:"%") prefix

prefix =>
    postfix
    prefix: prefix_spacing(plus:"+") postfix
    prefix: prefix_spacing(minus:"-") postfix

postfix =>
    term
    call(postfix arguments):
        postfix tight(lp:"(") arguments rp:")"
    getattr(postfix symbol):
        postfix dot:"." symbol
    getitem(postfix expr):
        postfix tight(lb:"[") expr rb:"]"

arguments =>
    empty_list:
    append:     arguments expr

arguments_1 =>
    append:     arguments expr

term =>
    lookup:     symbol
    int:        int
    float:      float
    string:     string
    pass(expr): loose(lp:"(") expr rp:")"
    list(arguments): loose(lb:"[") arguments rb:"]"
    function(bindings):
        lp:"(" bindings rp:")" colon:":" block

bindings =>
    empty_list:
    append:     bindings binding

binding => binding: symbol

block => pass(statements): indent statements dedent
