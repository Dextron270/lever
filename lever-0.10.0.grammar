file: (=statement)+

statement:
    slot operator "=" >expr      / inplace_assign(., symbol(.), .)
    slot "(" pform ")" "=" >expr / inplace_assign
    slot "=" >expr / assign
    "if" expr "then" >(=statement)+
             ["else" >(=statement)+]? / cond
    "return" expr? / return
    "yield" expr   / yield
    "break"        / break
    "continue"     / continue
    "datatype" datatype_head >"=" >join(datatype_row, "|")
        =(=datatype_declaration)* / datatype
    "case" expr "of" =(=case)+
        =("else" >(=statement)+)? / case
    expr


datatype_head:
    slot                           / [., []]
    slot "(" join(symbol, ",") ")" / [.,  .]

datatype_row:
    slot                            / [., []]
    slot "(" join(expr_or, ",") ")" / [.,  .]

datatype_declaration:
    "method" term "=" expr / method

case:
    term                              "then" >(=statement)+ / constant_case
    term "(" join(slot_item, ",") ")" "then" >(=statement)+ / pattern_case


slot:
    slot_item
    slot_item ["," slot_item]+ / tuple([.] concat .)

slot_item:
    symbol               / symbol
    postfix "[" form "]" / item
    postfix "." symbol   / attr

expr:
    [loop_head]* "repeat" >(=statement)+  / repeat
    "generator" >(=statement)+         / generator
    "(" arglist ")" ":" >(=statement)+ / closure
    expr_or ["," expr_or]+ / make_tuple([.] concat .)
    expr_or

loop_head:
    "while" expr         / while_loop
    "for" slot "in" expr / for_loop
    "if" expr            / if_loop

arglist: sep([slot_item, "(" slot ")"] / argument, ",")

expr_or:
    expr_and "or" expr_or / or
    expr_and

expr_and:
    expr_not "and" expr_and / and
    expr_not

expr_not:
    "not" expr_cmp / not
    expr_cmp

expr_cmp:
    expr_bitor
    expr_bitor "in" expr_bitor          / in
    expr_bitor "not" "in" expr_bitor    / not_in
    [expr_bitor comparison]+ expr_bitor / cmp

expr_bitor:
    expr_bitand
    expr_bitor ["|"] expr_bitand / binary

expr_bitand:
    expr_sh
    expr_bitand ["&"] expr_sh / binary

expr_sh:
    expr_add
    expr_sh ["<<"] expr_add / binary
    expr_sh [">>"] expr_add / binary
expr_add:
    expr_mul
    expr_add ["++"] expr_mul / binary
    expr_add ["+"] expr_mul / binary
    expr_add ["-"] expr_mul / binary

expr_mul:
    prefix
    expr_mul ["*"] prefix  / binary
    expr_mul ["/"] prefix  / binary
    expr_mul ["//"] prefix / binary
    expr_mul ["%"] prefix  / binary

prefix:
    exponent_postfix
    ["+"] exponent_postfix / prefix
    ["-"] exponent_postfix / prefix
    ["~"] exponent_postfix / prefix

exponent_postfix:
    postfix
    postfix ["^"] exponent_postfix / binary

postfix:
    postfix "(" sep(expr_or, ',') ")" / call
    postfix "[" form "]"           / item
    postfix "." symbol             / attr
    term

term:
    "(" pform ")"
    symbol  / symbol
    string  / string
    int / integer

pform:
    form
    operator "Â¤" / prefix_symbol
    operator / symbol
    keyword  / symbol

form:
    expr

operator: ["+", "-", "*",
    "/", "//", "%", "~", "<<", ">>", "&", "|",
    "++", "^",
    comparison]
keyword: ["import", "yield", "and", "or", "not", "in"]
comparison: ["<", ">", "==", "!=", "<=", ">="]

terminal symbol, string, int
