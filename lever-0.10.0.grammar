file: (=statement)+

statement:
    "import" symbol                                  / import
    "from" symbol "import" join(symbol / [1,1], ",") / import_bind
    # "bind" sep(coeffect_field, ",") "as" slot_item   / bind_coeffect
    slot operator "=" >expr      / inplace_assign(., symbol(.), .)
    slot "(" pform ")" "=" >expr / inplace_assign
    slot "=" >expr / assign
    "if" condexpr "then" >(=statement)+
             ["else" >(=statement)+]? / cond
    "return" >expr? / return
    "yield" expr        / yield
    "yield" "from" expr / yield_from
    ["break"]* "break"    / break
    ["break"]* "continue" / continue
    # "datatype" datatype_head >"=" >join(datatype_row, "|")
    #     =(=datatype_declaration)* / datatype
    "case" expr "of" =(=case)+
        =("else" >(=statement)+)? / case
    "try" >(=statement)+ =(^="except" expr ("as" slot)? "then"
        >(=statement)+)+ / except
    statement =(^="except" expr ("as" slot)? "then"
        >(=statement)+)+ / inline_except
    "assert" expr "as" expr / assert
    "raise" expr / raise
    # "operator" slot_item expr =(operator_row)* / operator
    postfix "(" sep(expr_or, ',') ";" join(slot, ',') ")" / relcall

    expr

coeffect_field:
    symbol     / field
    "!" symbol / mutable_field

datatype_head:
    slot                           / [., []]
    slot "(" join(symbol, ",") ")" / [.,  .]

datatype_row:
    slot                                                    / [., []]
    slot "(" join(expr_or            / no_label, ",") ")"   / [.,  .]
    slot "(" join(symbol ":" expr_or / with_label, ",") ")" / [.,  .]

datatype_declaration:
    "method" term "=" expr               / method_declaration
    "method" join(term, ",") ":" expr    / derived_declaration
    "attribute" symbol "=" expr          / attribute_declaration
    "attribute" "!" symbol "=" expr      / attribute_set_declaration
    "attribute" "method" symbol "=" expr / attribute_method_declaration

operator_row:
    "method" expr "=" expr / method_declaration
    "method" "*" "=" expr / default_method_declaration

case:
    term                              "then" >(=statement)+ / constant_case
    term "(" join(slot_item, ",") ")" "then" >(=statement)+ / pattern_case


slot:
    slot_item
    slot_item ["," slot_item]+ / tuple([.] concat .)

slot_item:
    expr "(" join(slot_item, "") ")" / pattern
    symbol               / symbol
    postfix "[" form "]" / item
    postfix "." symbol   / attr
    "*" term / deref
    "{" sep(record_pair, ",") "}"      / record
    "{" sep(record_shorthand, ",") "}" / record

condexpr:
    expr "@" expr "(" join(slot_item, "") ")" / match
    expr_or

expr:
    [loop_head]* "repeat" >(=statement)+  / repeat
    "generator" >(=statement)+         / generator
    "(" arglist (";" join(symbol, ","))? ")" ":" >(=statement)+ / closure
    expr_or ["," expr_or]+ / tuple([.] concat .)
    expr_or

loop_head:
    "while" expr                                  / while_loop
    "for" slot ("&" slot)? "in" expr ("if" expr)? / for_loop

arglist: sep([slot_item, "(" slot ")"] / argument, ",")

expr_or:
    expr_and "or" expr_or / or
    expr_and

expr_and:
    expr_not "and" expr_and / and
    expr_not

expr_not:
    "not" expr_cmp / not
    expr_cmp

expr_cmp:
    expr_bitor
    expr_bitor "in" expr_bitor          / in
    expr_bitor "not" "in" expr_bitor    / not_in
    [expr_bitor comparison]+ expr_bitor / cmp

expr_bitor:
    expr_bitand
    expr_bitor ["|"] expr_bitand / binary

expr_bitand:
    expr_sh
    expr_bitand ["&"] expr_sh / binary

expr_sh:
    expr_add
    expr_sh ["<<"] expr_add / binary
    expr_sh [">>"] expr_add / binary
expr_add:
    expr_mul
    expr_add ["++"] expr_mul / binary
    expr_add ["+"] expr_mul / binary
    expr_add ["-"] expr_mul / binary

expr_mul:
    prefix
    expr_mul ["*"] prefix  / binary
    expr_mul ["/"] prefix  / binary
    expr_mul ["//"] prefix / binary
    expr_mul ["%"] prefix  / binary

prefix:
    exponent_postfix
    ["+"] exponent_postfix / prefix
    ["-"] exponent_postfix / prefix
    ["~"] exponent_postfix / prefix

exponent_postfix:
    postfix
    postfix ["^"] exponent_postfix / binary

postfix:
    postfix "(" sep(expr_or, ',') ")" / call
    postfix "[" form "]"              / item
    postfix "." symbol                / attr
    postfix "." keyword               / attr
    term

term:
    "(" pform ")"
    "{" sep(record_pair, ",") "}"      / record
    "{" sep(record_shorthand, ",") "}" / record
    "[" sep(expr_or, ",") "]" / list
    symbol  / symbol
    string  / string
    int      / integer
    "*" term / deref

pform:
    form
    operator "Â¤" / prefix_symbol
    operator / symbol
    keyword  / symbol

form:
    expr

record_shorthand: symbol / [1, symbol(1)]
record_pair:      record_label ":" expr_or

record_label:
    symbol
    "!" symbol / stringconcat

operator: ["+", "-", "*",
    "/", "//", "%", "~", "<<", ">>", "&", "|",
    "++", "^",
    comparison]
keyword: ["import", "yield", "and", "or", "not",
    "in", "repeat", "if", "then", "else"]
comparison: ["<", ">", "==", "!=", "<=", ">="]

terminal symbol, string, int
