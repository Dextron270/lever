#manual{_}{500}{technical overview}
Explains the project structure. Describes how the runtime ticks.

Here we explain what is in the github repository. It is also
explained what is in the runtime when it loads up a program.

#toc

#section Project hierarchy

##
    app
    benchmarks
    compiler
    doc
    documentation_considerations.tex
    headers
    internal_documentation.txt
    lever
    lever-0.9.0.grammar
    lever.py
    lib
    LICENSE.md
    local
    marketing
    native_considerations.txt
    performance.text
    README.md
    runtime
    sample.lc
    samples
    semantics_documentation.txt
    setup.py
    test.py
    tests
    tool_ideas.text
    tools
    VERSION
    website_considerations.txt
    win32_extras
    www

#subsection app -directory

Contains the application script that is run when the lever
executable is run without arguments.

#subsection benchmarks -directory

Some programs that have been used to optimize the runtime.

#subsection compiler -directory

Contains the bootstrapping compiler to bootstrap the another
one in the lib/compiler.lc

#subsection doc -directory

Contains nearly all the documentation for the project. The
documentation is intended to be readable by the runtime so
it's been written in a weird language.

#subsection documentation_considerations.tex

Some old discussion about solving the documentation
problems in the project. They are still not entirely solved,
but the ideas in this file drove them further. Should be
merged with the rest of the documentation.

#subsection headers -directory

A slightly old directory that contains C FFI files that are
used by libraries. They could also sit in the lib/
-directory by now, but this directory was there before the
module system had improved to provide a method to load these
json files from the lib.

#subsection internal_documentation.txt

A very early form of documentation about the runtime
-directory. Should be also merged with the main
documentation.

#subsection lever, lever.exe

The executable binary that is generated from the runtime
directory.

#subsection lever-0.9.0.grammar

The machine-readable grammar file. Used by both the
compiler/ and lib/compiler.lc. A form of an attribute
grammar.

#subsection lever.py

A script to run lever runtime interpreted by Python. Barely
ever used these days because it's so slow method to run the
code.

#subsection lib -directory

A comprehensive set of modules written in Lever meant to
become a standard library. It is distributed along the
runtime.

#subsection LICENSE.md

License file for the repository. It's a MIT license.

#subsection local -directory

This directory gets created by the setup.py -script. It
contains third party dependencies that are required along
the binary.

Doing this ensures that we have recent versions about the
libraries that we are using, and makes it easier to compile
the project on Windows.

#subsection marketing -directory

Supposed to contain press kits and such, but right now
contains only an one image.

#subsection native_considerations.txt

Some remarks and notes about compiling for native machine
code. Should be merged into the rest of the documentation.

#subsection performance.text

Stub for accessibility. The contents have been moved into:
#url{https://leverlanguage.com/doc/latest/performance.html}

#subsection README.md

I'm not entirely sure what I should do with this file, but
it also contains some documentation. Maybe it should be
slowly merged with the rest of the documentation.

#subsection runtime -directory

The part of the Lever that has to be translated and then
compiled into a executable file.

#subsection sample.lc

A kind of a scratch buffer for trying out small things.
A semi-temporary file.

#subsection samples -directory

Bundle of old and new sample programs, tests and experiments.

#subsection semantics_documentation.txt

An older file describing semantics of the language in terms of
the grammar declarations. Should be merged into the rest of
the documentation.

#subsection setup.py

Maintenance script for the project. Will be described in
detail in an another section. 

#subsection test.py

An old script for running test script.

#subsection tests -directory

Outdated list of tests that was tried some time back when
everything barely worked.

#subsection tool_ideas.text

Related to the performance.text discussion. Will be
eventually merged in there as well.

#subsection tools -directory

Variety of tools written in Lever and Python. Mostly
concerned with html documentation and machine readable specs.

#subsection VERSION

Version number of the lever release.

#subsection website_considerations.txt

Some old discussion on the website contents.

#subsection win32_extras -directory

A bundle of extra binary files needed to run the produced
executable on a Windows system.

#subsection www -directory

The copy from the website directory. Mostly generated with a
hint of some files that haven't been.

#section Documentation effort

The doc/ -directory is itself an experiment. Overall the
structure looks like it could work, but the format is not
that desirable. Although the documentation is mostly in the
single place that distributes it where it is needed. It is
cleanly and consistently formatted, relatively easy to write.
The format itself has been lacking in providing
machine-assisted tools for updating the documentation.

Eventually when the format is changed, the existing
documentation won't be removed. It will be automatically
translated into the new format. There are plans for a binary
format of one kind. Designed to be easy to edit by an
editor, have dense representation for the information and
allow a good diff algorithm to be implemented on the contents.

#section TODO: Setup script functionality



#section TODO: When Lever starts up...

#section TODO: Runtime structure.

