import api, ffi, fs, vulkan

class GPU extends vulkan.Device
    +init = (self, sidekicks...):
        self.instance = init_instance(sidekicks)
        self.vk = api.funclibrary(vulkan.lib,
            self.instance.getProcAddr)
        for sidekick in sidekicks
            sidekick.setup(self.vk, self.instance)
        config = find_suitable_device(self.vk,
            self.instance, sidekicks)

        getattr(vulkan.Device, '+init')(self, config.dev, {
            enabledExtensionNames = config.enable,
            queueCreateInfos = [{
                queueFamilyIndex = config.queueFamilyIndex
                queuePriorities = [1.0]
            }]
            enabledFeatures = {
                shaderClipDistance = true
                shaderCullDistance = true
            }
        })
        self.config = config
        self.pipeline_cache = vulkan.PipelineCache(self, {})
        queue = self.getQueue(config.queueFamilyIndex, 0)
        queue.pool = vulkan.CommandPool(self, {
            flags = "RESET_COMMAND_BUFFER_BIT" # allow reset on cbuf.
            queueFamilyIndex = config.queueFamilyIndex
        })
        self.queue = queue

    createPipeline = (self, pipeline):
        assert isinstance(pipeline, GraphicsPipeline), "TODO: other pipeline objects"
        pipeline.pipeline = self.createGraphicsPipeline(
            self.pipeline_cache, pipeline.config)
        pipeline.id = pipeline.pipeline.id

    createPipelines = (self, pipelines):
        g_configs = []
        for pipeline in pipelines
            assert isinstance(pipeline, GraphicsPipeline), "TODO: other pipeline objects"
            g_configs.append(pipeline.config)
        g_pipelines = self.createGraphicsPipelines(
            self.pipeline_cache, g_configs)

        for i in range(pipelines.length)
            pipelines[i].pipeline = g_pipelines[i]
            pipelines[i].id = pipelines[i].pipeline.id

    update = (self, changes):
        if not isinstance(changes, list)
            changes = [changes]

        writes = []
        copies = []
        for descset in changes
            proxy = Id(descset)
            writes.extend(proxy.getattr("pending_writes"))
            proxy.setattr("pending_writes", [])

        self.updateDescriptorSets(writes, copies)

    destroy = (self):
        vulkan.Device.destroy(self)
        self.instance.destroy()

init_instance = (sidekicks):
    extensions = vulkan.listInstanceExtensions()
    enable = set()
    for sidekick in sidekicks
        enable.update(sidekick.instance_support(
            vulkan.vk, extensions))
    return vulkan.Instance({
        enabledExtensionNames = list(enable)
    })

find_suitable_device = (vk, instance, sidekicks):
    for dev in instance.listPhysicalDevices()
        extensions = set(dev.listExtensions())
        enable = set()
        not_suitable = false
        for sidekick in sidekicks
            res = sidekick.device_support(vk, dev, extensions)
            if res
                enable.update(res)
            else
                not_suitable = true
        if not_suitable
            continue
        i = -1
        for x in dev.listQueueFamilyProperties()
            i += 1
            suitable = true
            for sidekick in sidekicks
                suitable = suitable and
                    sidekick.queue_support(vk, dev, i, x)
            if not suitable
                continue
            if not x.queueFlags.GRAPHICS_BIT
                continue
            if not x.queueFlags.COMPUTE_BIT
                continue
            return object();
                dev = dev
                queueFamilyIndex = i
                enable = list(enable)
    assert false, "Did not find a suitable GPU"

create_swapchain = (device, wsi):
    surface = wsi.surface
    extent  = wsi.extent
    imageUsage = "COLOR_ATTACHMENT_BIT"
    gpu = device.physicalDevice

    cap = gpu.getSurfaceCapabilities(surface)
    # uint32_t                         minImageCount;
    # uint32_t                         maxImageCount;
    # VkExtent2D                       currentExtent;
    # VkExtent2D                       minImageExtent;
    # VkExtent2D                       maxImageExtent;
    # uint32_t                         maxImageArrayLayers;
    # VkSurfaceTransformFlagsKHR       supportedTransforms;
    # VkSurfaceTransformFlagBitsKHR    currentTransform;
    # VkCompositeAlphaFlagsKHR         supportedCompositeAlpha;
    assert cap.currentTransform.IDENTITY_BIT_KHR
        "Surface transform not desired"
    assert cap.supportedUsageFlags.COLOR_ATTACHMENT_BIT
        "Surface does not support the desired usage"

    imageFormat = null
    colorSpace = null
    for prop in gpu.listSurfaceFormats(surface)
        print(prop)
        imageFormat = prop.format
        colorSpace = prop.colorSpace
        break

    presentMode = "FIFO_KHR"
    for mode in gpu.listSurfacePresentModes(surface)
        continue

    format = "B8G8R8A8_UNORM" # hack, should enumerate the damn surface caps already.
    # Fourth temporary measure, no idea where this works.
    swapchain = vulkan.Swapchain(device, {
        surface = surface
        minImageCount = 2
        imageFormat = imageFormat
        imageColorSpace = colorSpace
        imageExtent = extent
        imageUsage = imageUsage
        preTransform = "IDENTITY_BIT_KHR" # ?
        compositeAlpha = "OPAQUE_BIT_KHR"
        imageArrayLayers = 1
        imageSharingMode = "EXCLUSIVE"
        #queueFamilyIndexCount = 0
        #pQueueFamilyIndices = null
        presentMode = presentMode
        #oldSwapchain = null
        clipped = true
    })

    swapchain.extent = extent
    swapchain.rect   = Rect(0, 0, extent["width"], extent["height"])
    swapchain.config = (format=format, samples="1_BIT")
    # use getImages() instead.
    # you can obtain surface other ways.
    swapchain.subresource_range = {
        aspectMask = "COLOR_BIT"
        baseMipLevel = 0
        levelCount = 1
        baseArrayLayer = 0
        layerCount = 1
    }
    # config.format
    # config.samples

    return swapchain

class Rect
    +init = (self, x, y, width, height, layers=1, minDepth=0.0, maxDepth=1.0):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.layers = layers
        self.minDepth = minDepth
        self.maxDepth = maxDepth

    offset = property();
        get = (self):
            return {x = self.x, y = self.y}

    extent = property();
        get = (self):
            return {
                width = self.width,
                height = self.height}

    area = property();
        get = (self):
            return {
                offset = self.offset,
                extent = self.extent}

    viewport = property();
        get = (self):
            return {
                x = self.x,
                y = self.y,
                width = self.width,
                height = self.height,
                minDepth = self.minDepth,
                maxDepth = self.maxDepth
            }

    viewportState = property();
        get = (self):
            return {
                viewports = [self.viewport]
                scissors = [self.area]
            }


# The gpumalloc is merged with this module.
upload_flags = ["HOST_VISIBLE_BIT"]
readback_flags = ["HOST_VISIBLE_BIT", "HOST_COHERENT_BIT", "HOST_CACHED_BIT"]
device_flags = ["DEVICE_LOCAL_BIT"]


class GPUMemory
    +init = (self, gpu, flags, min_chunk=32*1024*1024):
        self.gpu = gpu
        self.flags = flags
        self.min_chunk = min_chunk
        self.allocators = []
        self.gpu.add_ref(self)

    new_chunk = (self, req_size, typeBits):
        chunk_size = self.min_chunk
        while chunk_size < req_size
            chunk_size <<= 1
            assert chunk_size >= 0, "overflow"

        # TODO: Make this into a loop of sort, trying out memory entries
        #       in order.
        memoryIndex = null
        for memtype in memory_report(self.gpu.physicalDevice).types
            if 1 & (typeBits >> memtype.index) == 0
                continue
            if self.flags <= memtype.flags
                memoryIndex = memtype.index
                break
        assert memoryIndex, "No gpu-visible memory available for this resource"

        chunk = self.gpu.allocateMemory({
            allocationSize = chunk_size
            memoryTypeIndex = memoryIndex
        })
        chunk.index = memoryIndex
        chunk.size = chunk_size # needed for doing the map.
        chunk.addr = null       # reference counting for memory map
        chunk.map_ref = 0
        allocator = Allocator(chunk, chunk_size)
        self.allocators.append(allocator)
        return allocator

    alloc = (self, obj):
        req = obj.getMemoryRequirements()
        block = null
        for heap in self.allocators
            if 1 & (req.memoryTypeBits >> heap.chunk.index) == 0
                continue
            block = heap.alloc(req.alignment, req.size)
            if block
                break
        heap = self.new_chunk(req.size, req.memoryTypeBits)
        block = heap.alloc(req.alignment, req.size)
        obj.bindMemory(heap.chunk, block.offset)
        return MemoryBlock(heap.chunk, block)

    createBuffer = (self, size, usage):
        buffer = vulkan.Buffer(self.gpu, {size = size, usage = usage})
        buffer.mem = self.alloc(buffer)
        return buffer

    destroy = (self):
        self.gpu.discard_ref(self)
        for heap in self.allocators
            heap.chunk.free()
        self.allocators = []

class MemoryBlock
    +init = (self, chunk, block):
        self.chunk = chunk
        self.block = block
        self.mapped = false

    free = (self):
        assert self.block and not self.mapped, [self.block, self.mapped]
        self.block.parent.free(self.block)
        self.block = null

    map = (self, ctype):
        assert not self.mapped
        chunk = self.chunk
        if not chunk.addr
            chunk.addr = chunk.map(ffi.byte, 0, chunk.size)
            assert chunk.map_ref == 0
        chunk.map_ref += 1
        self.mapped = true
        return ffi.cast(chunk.addr[self.block.offset .:], ffi.pointer(ctype))

    unmap = (self):
        assert self.mapped
        self.mapped = false
        self.chunk.map_ref -= 1
        if self.chunk.map_ref == 0
            self.chunk.unmap()
            self.chunk.addr = null

class Allocator
    +init = (self, chunk, size):
        self.chunk = chunk
        self.size = size
        self.free_blocks = [Block(self, 0, size)]

    alloc = (self, alignment, size):
        block = self.pop_fit(alignment, size)
        if not block
            return null
        offset = align_offset(block.offset, alignment)
        if offset != 0
            split = block.split(offset)
            self.free_blocks.append(split.left)
            block = split.right
        if block.size > size
            split = block.split(size)
            block = split.left
            self.free_blocks.append(split.right)
        block.used = true
        return block

    pop_fit = (self, alignment, size):
        for block in self.free_blocks
            if block.fit(alignment, size)
                self.free_blocks.remove(block)
                return block
        return null

    free = (self, block):
        assert block.used, "double free"
        block.used = false
        if block.prev and not block.prev.used
            self.free_blocks.remove(block.prev)
            block = block.prev.merge()
        if block.next and not block.next.used
            self.free_blocks.remove(block.next)
            block = block.merge()
        self.free_blocks.append(block)

class Block
    +init = (self, parent, offset, size, prev=null, next=null):
        self.parent = parent
        self.offset = offset
        self.size = size
        self.prev = prev
        self.next = next
        self.used = false

    fit = (self, alignment, size):
        size += align_offset(self.offset, alignment)
        return size <= self.size

    split = (self, offset):
        left = self
        right = Block(left.parent, left.offset+offset, left.size-offset)
        right.next = left.next
        right.prev = left
        left.next = right
        left.size = offset
        return object({left=left, right=right})

    merge = (self):
        assert self.next
        left = self
        right = self.next
        left.next = right.next
        if right.next
            right.next.prev = left
        right.prev = null
        right.next = null

align_offset = (x, a):
    return (a - x % a) % a

memory_report = (gpu): 
    properties = gpu.getMemoryProperties()
    heaps = []
    for i in range(properties.memoryHeapCount)
        memheap = properties.memoryHeaps[i]
        heaps.append(object();
            index = i
            size = memheap.size
            flags = memheap.flags)
    types = []
    for i in range(properties.memoryTypeCount)
        memtype = properties.memoryTypes[i]
        types.append(object();
            index = i
            flags = memtype.propertyFlags
            heap = heaps[memtype.heapIndex])
    return object();
        heaps = heaps
        types = types

# ded code?
find_properties = (req, properties, report):
    for memtype in report.types
        if req.memoryTypeBits & (1 << memtype.index) == 0
            continue
        for prop in properties # TODO: improve bitmask
            if not getattr(memtype.flags, prop)
                continue
        return memtype.index
    assert false, "No memory available for this resource"

# Descriptor sets
class DescriptorSetLayout extends vulkan.Handle
    +init = (self, device, declaration):
        self.device = device
        self.declaration = declaration
        self.bindings = []
        for name in declaration
            decl = dict(declaration[name])
            # Deliver 'count' here and it is treated as an array.
            # also immutableSamplers can be passed.
            if "count" in decl
                assert false, "not implemented yet"
            else
                decl["descriptorCount"] = 1
            self.bindings.append(decl)
        self.layout = vulkan.DescriptorSetLayout(device,
            {bindings = self.bindings})
        self.id = self.layout.id

    +call = (self):
        pool = vulkan.DescriptorPool(self.device,
            desc_pool_config(self.bindings, 1))
        descset = self.device.allocateDescriptorSets({
            descriptorPool = pool
            setLayouts = [self]
        })[0]
        return DescriptorSet(self, pool, descset)

    destroy = (self):
        self.layout.destroy()
        self.layout = null
        self.id = null

desc_pool_config = (config, maxSets):
    poolSizes = {}
    for desc in config
        type = desc["descriptorType"]
        count = desc["descriptorCount"]
        if type not in poolSizes
            poolSizes[type] = { type = type, descriptorCount = count }
        else
            poolSizes[type]["descriptorCount"] += count
    return {maxSets = maxSets, poolSizes = list(poolSizes.values())}

class DescriptorSet extends vulkan.Handle
    +init = (self, layout, pool, descset):
        self = Id(self)
        self.setattr("id", descset.id)
        self.setattr("descset", descset)
        self.setattr("pool", pool)
        self.setattr("layout", layout)
        self.setattr("pending_writes", [])

    +getattr = (self, name):
        layout = self.getattr("layout")
        if name in layout.declaration
            return DescriptorAttribute(self, name, layout.declaration[name])
        return self.getattr(name)

    +setattr = (self, name, value):
        layout = self.getattr("layout")
        pending_writes = self.getattr("pending_writes")
        if name in layout.declaration
            decl = layout.declaration[name]
            pending_writes.append({
                "dstSet": self.getattr("descset"),
                "dstBinding": decl["binding"],
                "dstArrayElement": 0,
                "descriptorType": decl["descriptorType"],
                write_field[decl["descriptorType"]]: [value]
            })
        else
            self.setattr(name, value)

    destroy = (self):
        self.pool.destroy()
        self.descset = null
        self.pool = null
        self.id = null

# https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#VkDescriptorType
# The descriptorType reveals which Info -field should be used.
write_field = {
    "UNIFORM_BUFFER": "bufferInfo",
    "STORAGE_BUFFER": "bufferInfo",
    "UNIFORM_BUFFER_DYNAMIC": "bufferInfo",
    "STORAGE_BUFFER_DYNAMIC": "bufferInfo",
    "UNIFORM_TEXEL_BUFFER": "texelBufferView",
    "STORAGE_TEXEL_BUFFER": "texelBufferView",
    "SAMPLER": "imageInfo",
    "COMBINED_IMAGE_SAMPLER": "imageInfo",
    "SAMPLED_IMAGE": "imageInfo",
    "STORAGE_IMAGE": "imageInfo",
    "INPUT_ATTACHMENT": "imageInfo",
}

# dstArrayElement & *Info array count matters on arrays.

class DescriptorAttribute
    +init = (self, descset, name, options):
        self.descset = descset
        self.name = name
        self.options = options

# TODO: Implement array descriptors.
# TODO: Implement descriptor copy as well.
#       Very simple and similar model appears to be.
#          srcSet
#          srcBinding
#          srcArrayElement
#          dstSet
#          dstBinding
#          dstArrayElement
#          descriptorCount


# For configuring vertex attributes in pipeline
class VulkanType
    +init = (self, format, shadow):
        self.shadow = shadow
        self.format = format

    load = (self, val):
        return val

    store = (self, val):
        return val

class VertexBinding
    +init = (self, binding, struct, inputRate):
        self.binding = binding
        self.struct = struct
        self.inputRate = inputRate

    +getattr = (self, name):
        struct = self.getattr("struct")
        for item in struct.get_fields()
            if item[0] == name
                return VertexBindingField(self.ref, name)
        return self.getattr(name)

class VertexBindingField
    +init = (self, binding, name):
        self.binding = binding
        self.name = name

class VertexLayout
    +init = (self, topology, attributes):
        self.topology = topology
        self.attributes = attributes

    to_dict = (self):
        visited_bindings = set()
        bindings = []
        attributes = []
        for location, attr in self.attributes.items()
            bd = Id(attr.binding)
            if attr.binding not in visited_bindings
                visited_bindings.add(attr.binding)
                bindings.append({
                    binding = bd.getattr("binding")
                    stride  = ffi.sizeof(bd.getattr("struct"))
                    inputRate = bd.getattr("inputRate")
                })
            attributes.append({
                location = location
                binding = bd.getattr("binding")
                format = bd.getattr("struct").typeof(attr.name).format
                offset = bd.getattr("struct").offsetof(attr.name)
            })

        return {
            vertexInputState = {
                vertexBindingDescriptions = bindings
                vertexAttributeDescriptions = attributes
            }
            inputAssemblyState = {topology = self.topology}
        }

# For loading shaders
class ShaderLoader
    +init = (self, device, local):
        self.device = device
        self.local = local
        self.cache = {}

    fetch = (self, description):
        stages = []
        for item in description.items()
            stage = item[0]
            info = item[1].rsplit(":")
            path = self.local ++ info[0]
            try
                module = self.cache[path]
            except KeyError as e
                data = fs.read_file(path, "b")
                module = vulkan.ShaderModule(self.device, {
                    codeSize = data.length
                    pCode = data
                })
                self.cache[path] = module
            stages.append({
                stage = stage.upper() ++ "_BIT"
                module = module
                name = info[1]
            })
        return stages

    destroy = (self):
        for module in self.cache.values()
            module.destroy()
        self.cache = {}

# For acquiring and displaying images.
# TODO: Could use the libuv threadpools to wait for a fence?
class Portal
    +init = (self, gpu, target):
        self.gpu = gpu
        self.target = target
        self.current_image = 0
        self.framebuffer = null
        self.fence = vulkan.Fence(gpu,
            {flags = "SIGNALED_BIT"})
        self.image_acquired = vulkan.Semaphore(gpu)
        self.rendering_done = vulkan.Semaphore(gpu)

    acquire = (self):
        gpu = self.gpu
        target = self.target
        swapchain = target.swapchain
        current_image = self.current_image
        # This is lazy. It means we can't continue before the previous frame has been submitted.
        # Need to check with performance counter later, whether this is sufficient
        status = gpu.waitForFences([self.fence],
            true, 20000000)
        if status.SUCCESS
            self.current_image = gpu.acquireNextImage(
                swapchain, 0xFFFFFFFFFFFFFFFF, self.image_acquired)
            self.framebuffer = target.framebuffers[self.current_image]
            gpu.resetFences([self.fence])
        return status

    present = (self, cbufs):
        gpu = self.gpu
        gpu.queue.submit([{
            waitSemaphores = [self.image_acquired]
            waitDstStageMask = ["TOP_OF_PIPE_BIT"]
            commandBuffers = cbufs
            signalSemaphores = [self.rendering_done]
        }], self.fence)

        gpu.queue.present({
            waitSemaphores = [self.rendering_done]
            swapchains = [self.target.swapchain]
            imageIndices = [self.current_image]
        })

    destroy = (self):
        self.fence.destroy()
        self.image_acquired.destroy()
        self.rendering_done.destroy()



# The render pass builder is perhaps the ugliest one here.

class RenderPassBuilder
    +init = (self):
        self.attachments = []
        self.subpasses = []
        self.dependencies = []
        self.clearValueCount = 0

    attachment = (self, name, description):
        attachment = AttachmentDescription(
            name, self, self.attachments.length,
            description)
        self.attachments.append(attachment)
        setattr(self, name, attachment)
        return attachment

    subpass = (self, name, pipelineBindPoint, description):
        subpass = SubpassDescription(
            name, self, self.subpasses.length,
            pipelineBindPoint,
            description)
        self.subpasses.append(subpass)
        setattr(self, name, subpass)
        return subpass
        
    dependency = (self, src, dst, dependency):
        descr = {
            srcSubpass = src.subpass
            dstSubpass = dst.subpass
        }
        descr.update(dependency)
        self.dependencies.append(descr)

    # Technically building the pass will not require the screen, and 
    # it can be left out from here.
    # The screen dimensions are attached to the pass because
    # they are easy to drive into the pipeline and framebuffer from here.
    build = (self, device, screen=null, samples=null):
        attachments = []
        for a in self.attachments
            attachments.append(a.form())
            if not samples
                samples = a.description.?samples
        subpasses = []
        for p in self.subpasses
            subpasses.append(p.form())
        pass = vulkan.RenderPass(device, {
            attachments = attachments,
            subpasses = subpasses,
            dependencies = self.dependencies})
        rp = RenderPass(self, pass, screen, samples)
        for subpass in self.subpasses
            setattr(rp, subpass.name,
                SubpassPipelineBuilder(rp, subpass))
        return rp

class AttachmentDescription
    +init = (self, name, builder, attachment, description):
        self.name = name
        self.builder = builder
        self.attachment = attachment
        self.description = description

# To allow precise mapping, you would also need to determine
# clearValueCount for every subpass.
#        self.clearColor = false
#        if "loadOp" in description and description["loadOp"] == "CLEAR"
#            builder.setattr("clearValueCount", attachment + 1)
#            self.clearColor = true
#        self.clearStencil = false
#        if "loadStencilOp" in description and description["loadStencilOp"] == "CLEAR"
#            builder.setattr("clearValueCount", attachment + 1)
#            self.clearStencil = true

    +call = (self, layout):
        return {
            attachment = self.attachment,
            layout = layout}

    form = (self):
        return dict(self.description)

class SubpassDescription
    +init = (self, name, builder, subpass, pipelineBindPoint, description):
        self.name = name
        self.builder = builder
        self.subpass = subpass
        self.pipelineBindPoint = pipelineBindPoint
        self.description = description

    form = (self):
        descr = {pipelineBindPoint=self.pipelineBindPoint}
        descr.update(self.description)
        return descr

    default_blend_attachments = (self):
        attachments = []
        ca = self.description.?colorAttachments
        return attachments if not ca
        for a in ca
            attachments.append({
                blendEnable = false
                colorWriteMask = 0xf
                srcColorBlendFactor = "ZERO"
                dstColorBlendFactor = "ZERO"
                colorBlendOp = "ADD"
                srcAlphaBlendFactor = "ZERO"
                dstAlphaBlendFactor = "ZERO"
                alphaBlendOp = "ADD"
            })
        return attachments

class SubpassPipelineBuilder
    +init = (self, renderPass, config):
        self.renderPass = renderPass
        self.config = config

    +call = (self, stages, pipelineLayout, extra...):
        assert self.config.pipelineBindPoint == "GRAPHICS", "TODO"
        return GraphicsPipeline(self, stages, pipelineLayout, extra)

class GraphicsPipeline extends vulkan.Handle
    +init = (self, builder, stages, layout, extra):
        self.config = config = {
            flags = 0
            stages = stages
            layout = layout
            renderPass = builder.renderPass
            subpass = builder.config.subpass
            dynamicState = null # TODO: some support for dynamicState?
        }
        for a in extra
            if not isinstance(a, dict)
                a = a.to_dict()
            config.update(a)
        # getting viewport state & multisampleState from the rendering target.
        if "viewportState" not in config
            config["viewportState"] = builder.renderPass.screen.viewportState
        if "multisampleState" not in config
            config["multisampleState"] = {
                rasterizationSamples = builder.renderPass.samples
            }
        # if rasterizationState is not in the vertex_layout, it is here.
        if "rasterizationState" not in config
            config["rasterizationState"] = {
                polygonMode = "FILL"
                cullMode = 0
                frontFace = "COUNTER_CLOCKWISE"
                lineWidth = 1.0
            }
        # finally the default color blend state.
        if "colorBlendState" not in config
            config["colorBlendState"] = {
                logicOpEnable = false
                logicOp = "CLEAR"
                attachments = builder.config.default_blend_attachments()
                blendConstants = [0.0, 0.0, 0.0, 0.0]
            }
        # Dynamic state can perhaps use some additional support.
        # include dynamicState    in pipeline

    destroy = (self):
        self.pipeline.destroy()
        self.pipeline = null
        self.id = null

class RenderPass extends vulkan.Handle
    +init = (self, config, renderPass, screen, samples):
        self.config = config
        self.renderPass = renderPass
        self.id = renderPass.id
        self.screen = screen
        self.samples = samples

    destroy = (self):
        self.renderPass.destroy()
        self.renderPass = null
        self.id = null

    # TODO: Consider whether this setting is appropriate.
    Framebuffer = (self, namedAttachments, screen=self.screen):
        namedAttachments = dict(namedAttachments)
        device = self.renderPass.device
        config = {
            renderPass = self
            attachments = map_by_name(
                self.config.attachments,
                namedAttachments)
            width = screen.width
            height = screen.height
            layers = screen.layers
        }
        return vulkan.Framebuffer(device, config)

# The clear value mapping was more clutter than it was worth.
#    map_clear_values = (self, values):
#        if self.config.clearValueCount == 0
#            return []
#        clearValues = []
#        blank = {}
#        for a in self.config.attachments[0 .: self.config.clearValueCount]
#            clearValues.append(values.get(a.name, blank))
#        return clearValues

map_by_name = (fields, mapping):
    out = []
    for field in fields
        out.append(mapping[field.name])
    return out
