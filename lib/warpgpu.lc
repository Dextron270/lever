import fs
import vulkan

class GPU extends vulkan.Handle
    +init = (self, window):
        self.window = window
        self.instance = vulkan.Instance({
            enabledExtensionNames = window.wsi.required_extensions(
                vulkan.listInstanceExtensions())})
        self.screen = Rect(0, 0, window.width, window.height)
        self.surface = window.wsi.create_surface(vulkan, self.instance)
        init_device(self, self.instance, self.surface)
        self.swapchain = get_swapchain(self.device, self.surface, self.screen)
        self.mem = GPUMemory(self.device)
        # needed for pipeline creation
        self.pipeline_cache = vulkan.PipelineCache(self.device, {})

    createPipeline = (self, pipeline):
        assert isinstance(pipeline, GraphicsPipeline), "TODO: other pipeline objects"
        pipeline.pipeline = self.device.createGraphicsPipeline(
            self.pipeline_cache, pipeline.config)
        pipeline.id = pipeline.pipeline.id

    update = (self, changes):
        if not isinstance(changes, list)
            changes = [changes]

        writes = []
        copies = []
        for descset in changes
            proxy = Id(descset)
            writes.extend(proxy.getattr("pending_writes"))
            proxy.setattr("pending_writes", [])

        self.device.updateDescriptorSets(writes, copies)


    destroy = (self):
        self.pipeline_cache.destroy()
        self.queue.pool.destroy()
        self.swapchain.image_acquired.destroy()
        self.swapchain.rendering_done.destroy()
        self.swapchain.destroy()
        self.device.destroy()
        self.surface.destroy()
        self.instance.destroy()
        self.id = null

init_device = (self, instance, surface):
    gpu = null
    queueFamilyIndex = null
    for device in instance.listPhysicalDevices()
        prop = device.getProperties()
        i = 0
        for x in device.listQueueFamilyProperties()
            if not device.getSurfaceSupport(i, surface)
                continue
            if x.queueFlags.GRAPHICS_BIT
                #print("Device name:", prop.deviceName.str)
                #print("            ", prop.deviceType)
                queueFamilyIndex = i
                gpu = device
            i += 1
    assert gpu, "Did not find a suitable GPU"

    self.device = vulkan.Device(gpu, {
        enabledExtensionNames = ["VK_KHR_swapchain"]
        queueCreateInfos = [{
            queueFamilyIndex = queueFamilyIndex
            queuePriorities = [1.0]
        }]
        enabledFeatures = {
            shaderClipDistance = true
            shaderCullDistance = true
        }
    })
    self.id = self.device.id
    queue = self.device.getQueue(queueFamilyIndex, 0)
    queue.index = queueFamilyIndex # allow later command pool allocations.
    queue.pool = vulkan.CommandPool(self.device, {
        flags = "RESET_COMMAND_BUFFER_BIT" # allow reset on cbuf.
        queueFamilyIndex = queue.index
    })
    self.queue = queue
 

get_swapchain = (device, surface, screen):
    imageUsage = "COLOR_ATTACHMENT_BIT"
    gpu = device.physicalDevice

    cap = gpu.getSurfaceCapabilities(surface)
    # uint32_t                         minImageCount;
    # uint32_t                         maxImageCount;
    # VkExtent2D                       currentExtent;
    # VkExtent2D                       minImageExtent;
    # VkExtent2D                       maxImageExtent;
    # uint32_t                         maxImageArrayLayers;
    # VkSurfaceTransformFlagsKHR       supportedTransforms;
    # VkSurfaceTransformFlagBitsKHR    currentTransform;
    # VkCompositeAlphaFlagsKHR         supportedCompositeAlpha;
    if not cap.currentTransform.IDENTITY_BIT_KHR
        print("Surface transform not desired")
        exit(1)
    if not cap.supportedUsageFlags.COLOR_ATTACHMENT_BIT
        print("Surface does not support the desired usage")
        exit(1)

    imageFormat = null
    colorSpace = null
    for prop in gpu.listSurfaceFormats(surface)
        imageFormat = prop.format
        colorSpace = prop.colorSpace
        break

    presentMode = "FIFO_KHR"
    for mode in gpu.listSurfacePresentModes(surface)
        continue

    format = "B8G8R8A8_UNORM" # hack, should enumerate the damn surface caps already.
    # Fourth temporary measure, no idea where this works.
    swapchain = vulkan.Swapchain(device, {
        surface = surface
        minImageCount = 2
        imageFormat = imageFormat
        imageColorSpace = colorSpace
        imageExtent = screen.extent
        imageUsage = imageUsage
        preTransform = "IDENTITY_BIT_KHR" # ?
        compositeAlpha = "OPAQUE_BIT_KHR"
        imageArrayLayers = 1
        imageSharingMode = "EXCLUSIVE"
        #queueFamilyIndexCount = 0
        #pQueueFamilyIndices = null
        presentMode = presentMode
        #oldSwapchain = null
        clipped = true
    })

    return swapchain;
        screen = screen
        config = object({format = format, samples = "1_BIT"})
        images = swapchain.getImages()
        format = format
        surface = surface
        subresource_range = {
            aspectMask = "COLOR_BIT"
            baseMipLevel = 0
            levelCount = 1
            baseArrayLayer = 0
            layerCount = 1
        }
        image_acquired = vulkan.Semaphore(device)
        rendering_done = vulkan.Semaphore(device)
        samples = "1_BIT"

class GPUMemory
    +init = (self, gpu):
        self.gpu = gpu

    createBuffer = (self, size, usage):
        buffer = vulkan.Buffer(self.gpu, {size = size, usage = usage})
        buffer.mem = self.associate(buffer)
        return buffer

    # replace this with proper allocator when it starts to matter.
    associate = (self, obj):
        req = obj.getMemoryRequirements()

        memoryIndex = null
        for memtype in memory_report(self.gpu.physicalDevice).types
            if (memtype.flags.HOST_VISIBLE_BIT and
                1 & (req.memoryTypeBits >> memtype.index) != 0)
                memoryIndex = memtype.index
        assert memoryIndex, "No gpu-visible memory available for this resource"

        #print(req.size, req.alignment, req.memoryTypeBits)
        mem = self.gpu.allocateMemory({
            allocationSize = req.size
            memoryTypeIndex = memoryIndex
        })
        obj.bindMemory(mem, 0)
        obj.offset = 0
        obj.size = req.size
        return mem

memory_report = (gpu): 
    properties = gpu.getMemoryProperties()
    heaps = []
    for i in range(properties.memoryHeapCount)
        memheap = properties.memoryHeaps[i]
        heaps.append(object();
            index = i
            size = memheap.size
            flags = memheap.flags)
    types = []
    for i in range(properties.memoryTypeCount)
        memtype = properties.memoryTypes[i]
        types.append(object();
            index = i
            flags = memtype.propertyFlags
            heap = heaps[memtype.heapIndex])
    return object();
        heaps = heaps
        types = types

class DescriptorSetLayout extends vulkan.Handle
    +init = (self, device, declaration):
        self.device = device
        self.declaration = declaration
        self.bindings = []
        for name in declaration
            decl = dict(declaration[name])
            # Deliver 'count' here and it is treated as an array.
            # also immutableSamplers can be passed.
            if "count" in decl
                assert false, "not implemented yet"
            else
                decl["descriptorCount"] = 1
            self.bindings.append(decl)
        self.layout = vulkan.DescriptorSetLayout(device,
            {bindings = self.bindings})
        self.id = self.layout.id

    +call = (self):
        pool = vulkan.DescriptorPool(self.device,
            desc_pool_config(self.bindings, 1))
        descset = self.device.allocateDescriptorSets({
            descriptorPool = pool
            setLayouts = [self]
        })[0]
        return DescriptorSet(self, pool, descset)

    destroy = (self):
        self.layout.destroy()
        self.layout = null
        self.id = null

desc_pool_config = (config, maxSets):
    poolSizes = {}
    for desc in config
        type = desc["descriptorType"]
        count = desc["descriptorCount"]
        if type not in poolSizes
            poolSizes[type] = { type = type, descriptorCount = count }
        else
            poolSizes[type]["descriptorCount"] += count
    return {maxSets = maxSets, poolSizes = list(poolSizes.values())}

class DescriptorSet extends vulkan.Handle
    +init = (self, layout, pool, descset):
        self = Id(self)
        self.setattr("id", descset.id)
        self.setattr("descset", descset)
        self.setattr("pool", pool)
        self.setattr("layout", layout)
        self.setattr("pending_writes", [])

    +getattr = (self, name):
        layout = self.getattr("layout")
        if name in layout.declaration
            return DescriptorAttribute(self, name, layout.declaration[name])
        return self.getattr(name)

    +setattr = (self, name, value):
        layout = self.getattr("layout")
        pending_writes = self.getattr("pending_writes")
        if name in layout.declaration
            decl = layout.declaration[name]
            pending_writes.append({
                "dstSet": self.getattr("descset"),
                "dstBinding": decl["binding"],
                "dstArrayElement": 0,
                "descriptorType": decl["descriptorType"],
                write_field[decl["descriptorType"]]: [value]
            })
        else
            self.setattr(name, value)

    destroy = (self):
        self.pool.destroy()
        self.descset = null
        self.pool = null
        self.id = null

# https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#VkDescriptorType
# The descriptorType reveals which Info -field should be used.
write_field = {
    "UNIFORM_BUFFER": "bufferInfo",
    "STORAGE_BUFFER": "bufferInfo",
    "UNIFORM_BUFFER_DYNAMIC": "bufferInfo",
    "STORAGE_BUFFER_DYNAMIC": "bufferInfo",
    "UNIFORM_TEXEL_BUFFER": "texelBufferView",
    "STORAGE_TEXEL_BUFFER": "texelBufferView",
    "SAMPLER": "imageInfo",
    "COMBINED_IMAGE_SAMPLER": "imageInfo",
    "SAMPLED_IMAGE": "imageInfo",
    "STORAGE_IMAGE": "imageInfo",
    "INPUT_ATTACHMENT": "imageInfo",
}

# dstArrayElement & *Info array count matters on arrays.

class DescriptorAttribute
    +init = (self, descset, name, options):
        self.descset = descset
        self.name = name
        self.options = options

# TODO: Implement array descriptors.
# TODO: Implement descriptor copy as well.
#       Very simple and similar model appears to be.
#          srcSet
#          srcBinding
#          srcArrayElement
#          dstSet
#          dstBinding
#          dstArrayElement
#          descriptorCount

class RenderPassBuilder
    +init = (self):
        self.attachments = []
        self.subpasses = []
        self.dependencies = []
        self.clearValueCount = 0

    +getattr = (self, name):
        try
            return self.getattr(name)
        except AttributeError as ae
            return BuilderAttribute(self, name)

    dependency = (self, src, dst, dependency):
        descr = {
            srcSubpass = src.subpass
            dstSubpass = dst.subpass
        }
        descr.update(dependency)
        self.dependencies.append(descr)

    # Technically building the pass will not require the screen, and 
    # it can be left out from here.
    # The screen dimensions are attached to the pass because
    # they are easy to drive into the pipeline and framebuffer from here.
    build = (self, device, screen=null, samples=null):
        attachments = []
        for a in self.attachments
            attachments.append(a.form())
            if not samples
                samples = a.config.samples
        subpasses = []
        for p in self.subpasses
            subpasses.append(p.form())
        pass = vulkan.RenderPass(device, {
            attachments = attachments,
            subpasses = subpasses,
            dependencies = self.dependencies})
        rp = RenderPass(self, pass, screen, samples)
        for subpass in self.subpasses
            setattr(rp, subpass.name,
                SubpassPipelineBuilder(rp, subpass))
        return rp

class BuilderAttribute
    +init = (self, builder, name):
        self.builder = builder
        self.name = name

    attachment = (self, config, description):
        attachments = self.builder.getattr("attachments")
        attachment = AttachmentDescription(
            self.name, self.builder,
            attachments.length,
            config, description)
        attachments.append(attachment)
        self.builder.setattr(self.name, attachment)
        return attachment

    subpass = (self, pipelineBindPoint, description):
        subpasses = self.builder.getattr("subpasses")
        subpass = SubpassDescription(
            self.name, self.builder,
            subpasses.length,
            pipelineBindPoint,
            description
        )
        subpasses.append(subpass)
        self.builder.setattr(self.name, subpass)
        return subpass

class AttachmentDescription
    +init = (self, name, builder, attachment, config, description):
        self.name = name
        self.builder = builder
        self.attachment = attachment
        self.config = config
        self.description = description
# To allow precise mapping, you would also need to determine
# clearValueCount for every subpass.
#        self.clearColor = false
#        if "loadOp" in description and description["loadOp"] == "CLEAR"
#            builder.setattr("clearValueCount", attachment + 1)
#            self.clearColor = true
#        self.clearStencil = false
#        if "loadStencilOp" in description and description["loadStencilOp"] == "CLEAR"
#            builder.setattr("clearValueCount", attachment + 1)
#            self.clearStencil = true

    +call = (self, layout):
        return {
            attachment = self.attachment,
            layout = layout}

    form = (self):
        descr = {
            format = self.config.format
            samples = self.config.samples
            loadOp = "DONT_CARE"
            storeOp = "DONT_CARE"
            stencilLoadOp = "DONT_CARE"
            stencilStoreOp = "DONT_CARE"
            initialLayout = 0
            finalLayout = 0
        }
        descr.update(self.description)
        return descr

class SubpassDescription
    +init = (self, name, builder, subpass, pipelineBindPoint, description):
        self.name = name
        self.builder = builder
        self.subpass = subpass
        self.pipelineBindPoint = pipelineBindPoint
        self.description = description

    form = (self):
        descr = {
            pipelineBindPoint = self.pipelineBindPoint
        }
        descr.update(self.description)
        return descr

    default_blend_attachments = (self):
        attachments = []
        for a in self.description.get("colorAttachments", [])
            attachments.append({
                blendEnable = false
                colorWriteMask = 0xf
                srcColorBlendFactor = "ZERO"
                dstColorBlendFactor = "ZERO"
                colorBlendOp = "ADD"
                srcAlphaBlendFactor = "ZERO"
                dstAlphaBlendFactor = "ZERO"
                alphaBlendOp = "ADD"
            })
        return attachments

class SubpassPipelineBuilder
    +init = (self, renderPass, config):
        self.renderPass = renderPass
        self.config = config

    +call = (self, stages, pipelineLayout, extra...):
        assert self.config.pipelineBindPoint == "GRAPHICS", "TODO"
        return GraphicsPipeline(self, stages, pipelineLayout, extra)

class GraphicsPipeline extends vulkan.Handle
    +init = (self, builder, stages, layout, extra):
        self.config = config = {
            flags = 0
            stages = stages
            layout = layout
            renderPass = builder.renderPass
            subpass = builder.config.subpass
            dynamicState = null # TODO: some support for dynamicState?
        }
        for a in extra
            config.update(a)
        # getting viewport state & multisampleState from the rendering target.
        if "viewportState" not in config
            config["viewportState"] = builder.renderPass.screen.viewportState
        if "multisampleState" not in config
            config["multisampleState"] = {
                rasterizationSamples = builder.renderPass.samples
            }
        # if rasterizationState is not in the vertex_layout, it is here.
        if "rasterizationState" not in config
            config["rasterizationState"] = {
                polygonMode = "FILL"
                cullMode = 0
                frontFace = "COUNTER_CLOCKWISE"
                lineWidth = 1.0
            }
        # finally the default color blend state.
        if "colorBlendState" not in config
            config["colorBlendState"] = {
                logicOpEnable = false
                logicOp = "CLEAR"
                attachments = builder.config.default_blend_attachments()
                blendConstants = [0.0, 0.0, 0.0, 0.0]
            }
        # Dynamic state can perhaps use some additional support.
        # include dynamicState    in pipeline

    destroy = (self):
        self.pipeline.destroy()
        self.pipeline = null
        self.id = null

class RenderPass extends vulkan.Handle
    +init = (self, config, renderPass, screen, samples):
        self.config = config
        self.renderPass = renderPass
        self.id = renderPass.id
        self.screen = screen
        self.samples = samples

    destroy = (self):
        self.renderPass.destroy()
        self.renderPass = null
        self.id = null

    # TODO: Consider whether this setting is appropriate.
    Framebuffer = (self, namedAttachments, screen=self.screen):
        device = self.renderPass.device
        config = {
            renderPass = self
            attachments = map_by_name(
                self.config.attachments,
                namedAttachments)
            width = screen.width
            height = screen.height
            layers = screen.layers
        }
        return vulkan.Framebuffer(device, config)

# The clear value mapping was more clutter than it was worth.
#    map_clear_values = (self, values):
#        if self.config.clearValueCount == 0
#            return []
#        clearValues = []
#        blank = {}
#        for a in self.config.attachments[0 .: self.config.clearValueCount]
#            clearValues.append(values.get(a.name, blank))
#        return clearValues

map_by_name = (fields, mapping):
    out = []
    for field in fields
        out.append(mapping[field.name])
    return out

class Rect
    +init = (self, x, y, width, height, layers=1, minDepth=0.0, maxDepth=1.0):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.layers = layers
        self.minDepth = minDepth
        self.maxDepth = maxDepth

    offset = property();
        get = (self):
            return {x = self.x, y = self.y}

    extent = property();
        get = (self):
            return {
                width = self.width,
                height = self.height}

    area = property();
        get = (self):
            return {
                offset = self.offset,
                extent = self.extent}

    viewport = property();
        get = (self):
            return {
                x = self.x,
                y = self.y,
                width = self.width,
                height = self.height,
                minDepth = self.minDepth,
                maxDepth = self.maxDepth
            }

    viewportState = property();
        get = (self):
            return {
                viewports = [self.viewport]
                scissors = [self.area]
            }


class ShaderLoader
    +init = (self, device, local):
        self.device = device
        self.local = local
        self.cache = {}

    fetch = (self, description):
        stages = []
        for item in description.items()
            stage = item[0]
            info = item[1].rsplit(":")
            path = self.local ++ info[0]
            try
                module = self.cache[path]
            except KeyError as e
                data = fs.read_file(path, "b")
                module = vulkan.ShaderModule(self.device, {
                    codeSize = data.length
                    pCode = data
                })
                self.cache[path] = module
            stages.append({
                stage = stage.upper() ++ "_BIT"
                module = module
                name = info[1]
            })
        return stages

    destroy = (self):
        for module in self.cache.values()
            module.destroy()
        self.cache = {}

# TODO: Could use the libuv threadpools to wait for a fence?
class Target
    +init = (self, gpu, swapchain):
        self.gpu = gpu
        self.swapchain = swapchain
        self.current_image = 0
        self.framebuffer = null

    acquire = (self):
        gpu = self.gpu
        swapchain = self.swapchain
        current_image = self.current_image
        # This is lazy. It means we can't continue before the previous frame has been submitted.
        # Need to check with performance counter later, whether this is sufficient
        status = gpu.device.waitForFences([swapchain.fences[current_image]],
            true, 20000000)
        if status.SUCCESS
            self.current_image = gpu.device.acquireNextImage(swapchain,
                0xFFFFFFFFFFFFFFFF, swapchain.image_acquired)
            self.framebuffer = swapchain.framebuffers[self.current_image]
            gpu.device.resetFences([swapchain.fences[self.current_image]])
        return status

    present = (self, cbufs):
        gpu = self.gpu
        gpu.queue.submit([{
            waitSemaphores = [self.swapchain.image_acquired]
            waitDstStageMask = ["TOP_OF_PIPE_BIT"]
            commandBuffers = cbufs
            signalSemaphores = [self.swapchain.rendering_done]
        }], self.swapchain.fences[self.current_image])

        gpu.queue.present({
            waitSemaphores = [self.swapchain.rendering_done]
            swapchains = [self.swapchain]
            imageIndices = [self.current_image]
        })
