contours_to_triangles = (contours):
    graph = contours_to_graph(contours)
    return triangulate(graph)

contours_to_graph = (contours):
    graph = {}
    for contour in contours
        contour = tessellate(contour)
        j = contour.length - 1
        for i in range(contour.length)
            last_vertex = contour[j].v0
            edge        = contour[j]
            next_vertex = contour[i].v0
            try
                graph[last_vertex].append(next_vertex)
            except KeyError as ke
                graph[last_vertex] = [next_vertex]
            try
                graph[next_vertex].append(last_vertex)
            except KeyError as ke
                graph[next_vertex] = [last_vertex]
            j = i
    return graph

# The tessellation is related to beziers more than it is related to polygons.
# It may deserve to be moved some time, along with the 'contours_to_triangles' -function.
tessellate = (contour):
    out = []
    for edge in contour
        if edge.name == "bezier"
            #b = edge.v0
            #k = 1 / 2
            #t = k
            #while t <= 1.0
            #    u = 1 - t
            #    p = (
            #        x=u*u*edge.v0.x + 2*u*t*edge.c0.x + t*t*edge.v1.x,
            #        y=u*u*edge.v0.y + 2*u*t*edge.c0.y + t*t*edge.v1.y)
            #    out.append(v0=b, v1=p)
            #    b = p
            #    t += k
            quadratic_bezier(out, edge.v0, edge.c0, edge.v1)
            #out.append(v0=edge.v0, v1=edge.v1)
        else
            out.append(v0=edge.v0, v1=edge.v1)
    return out

# http://antigrain.com/research/adaptive_bezier/
quadratic_bezier = (out, p1, p2, p3, approximation_scale=20.0):
    s = object()
    s.angle_tolerance = 0.0
    s.approximation_scale = approximation_scale
    s.curve_recursion_limit = 3
    s.curve_angle_tolerance_epsilon = 0.01
    s.curve_collinearity_epsilon = dbl_epsilon
    s.distance_tolerance = (0.5 / approximation_scale)**2
    quadratic_bezier_recurse(out, p1, p2, p3, 0, s)

# Overall this code seems like weird, I don't entirely trust that
# it produces good quality tessellations of beziers.
# TODO: study this one more, a little bit.
quadratic_bezier_recurse = (out, p1, p2, p3, level, s):
    if level > s.curve_recursion_limit
        out.append(v0=p1, v1=p3)
        return

    # Mid-points of the line segments (good time to consider the vec2 implementation)
    p12 = (x=(p1.x + p2.x)/2, y=(p1.y + p2.y)/2)
    p23 = (x=(p2.x + p3.x)/2, y=(p2.y + p3.y)/2)
    p123 = (x=(p12.x + p23.x)/2, y=(p12.y + p23.y)/2)

    dx = p3.x - p1.x
    dy = p3.y - p1.y
    d = abs((p2.x - p3.x) * dy - (p2.y - p3.y) * dx)

    if d > s.curve_collinearity_epsilon
        # regular
        if d * d <= s.distance_tolerance * (dx*dx + dy*dy)
            # Curvature doesn't exceed the distance_tolerance
            if s.angle_tolerance < s.curve_angle_tolerance_epsilon
                out.append(v0=p1,   v1=p123)
                out.append(v0=p123, v1=p3)
                return

            # Angle & Cusp Condition
            da = abs(atan2(p3.y - p2.y, p3.x - p2.x) - atan2(p2.y - p1.y, p2.x - p2.x))
            if da >= pi
                da = 2*pi - da

            if da < s.angle_tolerance # stop recursion
                out.append(v0=p1, v1=p123)
                out.append(v0=p123, v1=p3)
                return
    else
        # collinear
        dx = p123.x - (p1.x + p3.x) / 2
        dy = p123.y - (p1.y + p3.y) / 2

        if dx*dx + dy*dy <= s.distance_tolerance
            out.append(v0=p1, v1=p123)
            out.append(v0=p123, v1=p3)
            return

    quadratic_bezier_recurse(out, p1, p12, p123, level + 1, s)
    quadratic_bezier_recurse(out, p123, p23, p3, level + 1, s)

# Original algorithm was described in:
# Source: (C++) http://www.cs.hmc.edu/~mbrubeck/voronoi.html
# Source: (Python) https://github.com/jansonh/Voronoi 
# This code doesn't evaluate voronoi, instead it picks up a graph
# and triangulates it.
triangulate = (graph): #, off_x, off_y, off_s): TODO: improve debug-visualizations of this routine.
    vertices = list(graph)
    vertices.sort((a, b):
        # The vertical ordering is required for getting the case right
        # where the points do not intersect because they are vertically aligned.
        if a.x == b.x
            return a.y >= b.y
        return a.x >= b.x)

    triangles = []
    circles = []
    edges = {}
    bins = set()

    root = Bin(ParabolaSpline(triangles, circles))
    bins.add(root) # Root bin

    while vertices.length > 0
        top_point = vertices.pop()
        neighbours = graph[top_point]
        assert neighbours.length == 2, "Expecting closed contour lines as input."

        process_circles(root.spline, top_point)

        old_edges = []
        new_edges = []

        for p in neighbours
            try
                edge = edges.pop([p, top_point])
                old_edges.append(edge)
            except KeyError as _
                b_x = p.x - top_point.x
                b_y = p.y - top_point.y
                if b_x == 0
                    k = inf * sign(b_y)
                else
                    k = b_y / b_x
                c = p.y - k * p.x

                edges[[top_point, p]] = edge = Edge(k, c, top_point, p)
                new_edges.append(edge)

        new_edges.sort((a, b):
            return a.k < b.k)

        if old_edges.length == 1 and new_edges.length == 1
            oe = old_edges[0]
            ne = new_edges[0]
            ne.next = oe.next
            ne.next.prev = ne
            ne.prev = oe.prev
            ne.prev.next = ne
            if ne.next.inside
                c0 = Arc(top_point)
                c1 = Arc(top_point)
                arc_split(ne.next.spline, top_point, c0, c1)
                ne.next.spline.arc = c1

            if ne.prev.inside
                c0 = Arc(top_point)
                c1 = Arc(top_point)
                arc_split(ne.prev.spline, top_point, c0, c1)

        elif old_edges.length == 2 and new_edges.length == 0
            bot, top = old_edges
            top, bot = old_edges if bot.prev == top.next
            assert bot.next == top.prev, "merge fail"

            bins.discard(bot.next)
            if bot.next.inside
                process_point(bot.next.spline, top_point)#, off_x, off_y, off_s)

            top_bin = top.next
            bot_bin = bot.prev
            if bot_bin.inside or top_bin.inside
                c0 = Arc(top_point)
                c1 = Arc(top_point)
                m0 = Arc(top_point)
                arc_split(bot_bin.spline, top_point, m0, c0)
                arc_split(top_bin.spline, top_point, c1, m0)
                top_bin.spline = null

            bins.discard(top_bin)
            bot_bin.next = top_bin.next
            bot_bin.next.prev = bot_bin if bot_bin.next

        elif new_edges.length == 2 and old_edges.length == 0
            # The outer bin 
            outer = null
            for bin in bins
                continue if bin.next and not top_point.y < bin.next(top_point.x)
                continue if bin.prev and not top_point.y > bin.prev(top_point.x)
                outer = bin
                break
            assert outer

            top = Bin(ParabolaSpline(triangles, circles))
            bins.add(top)

            middle = Bin(ParabolaSpline(triangles, circles))
            bins.add(middle)

            bot = outer
            top.next = bot.next
            top.next.prev = top if top.next

            bot.next = new_edges[0]
            bot.next.prev = bot

            middle.prev = new_edges[0]
            middle.prev.next = middle

            middle.next = new_edges[1]
            middle.next.prev = middle

            top.prev = new_edges[1]
            top.prev.next = top

            top.inside    = bot.inside
            middle.inside = not bot.inside

            if bot.inside
                c0 = Arc(top_point)
                c1 = Arc(top_point)
                arc_split(bot.spline, top_point, c0, c1)
                top.spline.arc = c1

            if middle.inside
                process_point(middle.spline, top_point)#, off_x, off_y, off_s)

        else
            assert false, [new_edges.length, old_edges.length]

        #print(top_point.x, ", ", top_point.y)
        #for bin in bins
        #    continue if not bin.inside
        #    print('BIN')
        #    i = bin.spline.arc
        #    while i
        #        print(' ', i.p.x, ", ", i.p.y)
        #        i = i.next
        #print('***')

        #kop_count -= 1
        #if kop_count < 0
        #    debug_drawing(top_point, edges, bins, circles, triangles, off_x, off_y, off_s, 0.11)
        #    return

        #debug_drawing(top_point, edges, bins, circles, triangles, off_x, off_y, off_s, 0.11)

    # after all points, process remaining circle events
    while circles.length > 0
        top_circle = circles.pop()
        process_circle(root.spline, top_circle)
        #debug_drawing(top_point, edges, bins, circles, triangles, off_x, off_y, off_s, 0.11)


    return triangles

process_point = (spline, top_point):#, off_x, off_y, off_s):
    process_circles(spline, top_point)
    a = Arc(top_point)
    arc_split(spline, top_point, a, a)

process_circles = (spline, top_point):
    while spline.circles.length > 0
        top_circle = spline.circles.pop()
        if top_circle.x <= top_point.x
            process_circle(spline, top_circle)
        else
            spline.circles.append(top_circle)
            break

arc_split = (spline, p, left, right):
    if not spline.arc
        spline.arc = left
        return
    # find the current arcs at p.y
    i = spline.arc
    while i
        z = intersect(p, i)
        if not z
            i = i.next
            continue
        # new parabola intersects arc i
        zz = intersect(p, i.next)
        if i.next and not zz
            i.next.prev = Arc(i.p, i, i.next)
            i.next = i.next.prev
        elif zz
            # This is interesting case, because we can immediately smash a triangle here.
            # It only appeared at the 'P' letter of our font.
            spline.triangles.extend([p, i.p, i.next.p])
        else
            i.next = Arc(i.p, i)

        assert not left.prev,  "arc corruption"
        assert not right.next, "arc corruption"

        right.next = i.next
        right.next.prev = right

        i.next = left
        i.next.prev = i

        check_circle_event(spline, i,          p.x)
        check_circle_event(spline, left,       p.x)
        check_circle_event(spline, right,      p.x) if left != right
        check_circle_event(spline, right.next, p.x)
        return
    # if p never intersects an arc
    i = spline.arc
    while i.next
        i = i.next
    i.next = left
    i.next.prev = i
    check_circle_event(spline, i, p.x)

process_circle = (spline, e):
    if e.valid
        a = e.a # remove associated arc (parabola)
        a.prev.next = a.next if a.prev
        a.next.prev = a.prev if a.next

        if a.prev and a.next
            spline.triangles.extend([a.p, a.prev.p, a.next.p])

        # recheck circle events on either side of p
        check_circle_event(spline, a.prev, e.x) if a.prev
        check_circle_event(spline, a.next, e.x) if a.next

        e.valid = false
 
check_circle_event = (spline, i, x0):
    # look for a new circle event for arc i
    if i.e and i.e.x != x0
        i.e.valid = false
    i.e = null

    return if i.prev == null or i.next == null

    cir = circle(i.prev.p, i.p, i.next.p)
    if cir
        i.e = Event(cir.x, cir.center, i)
        spline.circles.append(i.e)
        spline.circles.sort((a, b):
            return a.x >= b.x)

circle = (a, b, c):
    # check if bc is a "right turn" from ab
    if (b.x - a.x)*(c.y - a.y) - (c.x - a.x)*(b.y - a.y) > 0
        return null
    # Joseph O'Rourke, Computational Geometry in C (2nd ed.) p.189
    A = b.x - a.x
    B = b.y - a.y
    C = c.x - a.x
    D = c.y - a.y
    E = A*(a.x + b.x) + B*(a.y + b.y)
    F = C*(a.x + c.x) + D*(a.y + c.y)
    G = 2*(A*(c.y - b.y) - B*(c.x - b.x))
 
    return null if G == 0 # Points are co-linear

    # point o is the center of the circle
    ox = (D*E - B*F) / G
    oy = (A*F - C*E) / G

    r = sqrt((a.x-ox)*(a.x-ox) + (a.y-oy)*(a.y-oy))
    x = ox + r
    o = (x=ox, y=oy)
    return (center=o, x=x, radius=r)
         
intersect = (p, i):
    # check whether a new parabola at point p intersect with arc i
    return null if not i
    return null if i.p.x == p.x

    a = 0.0
    b = 0.0

    a = intersection(i.prev.p, i.p, p.x).y if i.prev
    b = intersection(i.p, i.next.p, p.x).y if i.next

    if ((i.prev == null) or a <= p.y) and ((i.next == null) or p.y <= b)
        py = p.y
        px = (i.p.x * i.p.x + (i.p.y - py)*(i.p.y - py) - p.x*p.x) / (2*i.p.x - 2*p.x)
        return (x=px, y=py)
    return null
 
intersection = (p0, p1, l):
    # get the intersection of two parabolas
    p = p0
    if p0.x == p1.x
        py = (p0.y + p1.y) / 2.0
    elif p1.x == l
        py = p1.y
    elif p0.x == l
        py = p0.y
        p = p1
    else
        # use quadratic formula
        z0 = 2.0 * (p0.x - l)
        z1 = 2.0 * (p1.x - l)
        
        a = 1.0/z0 - 1.0/z1
        b = -2.0 * (p0.y/z0 - p1.y/z1)
        c = (p0.y*p0.y + p0.x*p0.x - l*l) / z0 - (p1.y*p1.y + p1.x*p1.x - l*l) / z1
        if b*b < 4*a*c
            return intersection(p0, p1, next_increment(l))
        py = (-b -sqrt(b*b - 4*a*c)) / (2*a)

    px = (p.x*p.x + (p.y - py)*(p.y - py) - l*l) / (2*p.x - 2*l)
    return (x=px, y=py)

class Bin
    +init = (self, spline):
        self.spline = spline
        self.prev = null
        self.next = null
        self.inside = false

class Edge
    +init = (self, k, c, v0, v1):
        self.k = k
        self.c = c
        self.v0 = v0
        self.v1 = v1
        self.prev = null
        self.next = null

    +call = (self, x):
        return self.k * x + self.c

class ParabolaSpline
    +init = (self, triangles, circles):
        self.arc = null  # linked list tree for parabola arcs
        self.circles = circles
        self.triangles = triangles

class Event
    +init = (self, x, p, a):
        self.x = x
        self.p = p
        self.a = a
        self.valid = true

class Arc
    +init = (self, vertex, prev=null, next=null):
        self.p = vertex
        self.prev = prev
        self.next = next
        self.e = null

#TODO? Implement edge-edge intersection -> error?
# Needed if the edge-edge intersection isn't catched otherwise.
# d = k1-k2
# return if d == 0
# x = (c2-c1) / d
# if 0 <= x and x <= min(x1, x2) # collision.

#debug_drawing = (top_point, edges, bins, circles, triangles, off_x, off_y, off_s, sleeptime):
#    x = top_point.x
#    app.vbo.vertex_count = 0
#    for ab in edges
#        a, b = ab
#        # add_vertex(a, off_x, off_y, off_s, [1, 0, 1])
#        # add_vertex(b, off_x, off_y, off_s, [1, 0, 1])
#        edge = edges[ab]
#
#        k_a = (x=a.x, y=a.x*edge.k + edge.c)
#        k_b = (x=b.x, y=b.x*edge.k + edge.c)
#        add_vertex(k_a, off_x, off_y, off_s, [1, 1, 1])
#        add_vertex(k_b, off_x, off_y, off_s, [1, 1, 1])
#
#    for bin in bins
#        continue if not bin.inside
#        y0 = -1.0
#        y0 = bin.prev(top_point.x) if bin.prev
#        add_vertex((x=top_point.x, y=y0), off_x, off_y, off_s, [1, 0, 1])
#        y1 = +1.0
#        y1 = bin.next(top_point.x) if bin.next
#        add_vertex((x=top_point.x, y=y1), off_x, off_y, off_s, [1, 0, 1])
#        #add_crosshair((x=top_point.x, y=y0), off_x, off_y, off_s, [0,1,1])
#        #add_crosshair((x=top_point.x, y=y1), off_x, off_y, off_s, [0,1,1])
#
#        present_edge(bin.spline, off_x, off_y, off_s, top_point.x)
#
#    for cir in circles
#        continue if not cir.valid
#        for e in draw_circle(cir.p, cir.x - cir.p.x)
#            add_vertex(e.v0, off_x, off_y, off_s, [0,1,0])
#            add_vertex(e.v1, off_x, off_y, off_s, [0,1,0])
#        #add_vertex((x=cir.x,     y=cir.a.p.y), off_x, off_y, off_s, [0,1,0])
#
#    app.tri_vbo.vertex_count = 0
#    for v in triangles
#        add_vertex_tri(v, off_x, off_y, off_s, [0.3, 0.3, 0.3])
#
#    add_crosshair(top_point, off_x, off_y, off_s, [1,0,0])
#
#    sleep(sleeptime)
#
#present_edge = (spline, off_x, off_y, off_s, l_x):
#    i = spline.arc
#    while i
#        add_crosshair(i.p, off_x, off_y, off_s, [1,1,0])
#        #add_vertex(i.p,      off_x - 0.015, off_y, off_s)
#        #add_vertex(i.p,      off_x + 0.015, off_y, off_s)
#        #add_vertex(i.p,      off_x, off_y - 0.005, off_s)
#        #add_vertex(i.p,      off_x, off_y + 0.005, off_s)
#
#        a_x = l_x - i.p.x
#
#        color = [1, 1, 1]
#
#        plot = (dy):
#            p = l_x - a_x/2 - dy*dy / (2*a_x)
#            add_vertex((x=p, y=i.p.y+dy), off_x, off_y, off_s, color)
#
#        n = i.p.y - 0.1
#        e = i.p.y + 0.1
#        if i.prev
#            n = intersection(i.prev.p, i.p, l_x).y
#        if i.next
#            e = intersection(i.p, i.next.p, l_x).y
#
#        n = max(-1, n)
#        e = min(+1, e)
#
#        step = 1 / 100
#        while n < e
#            plot(n - i.p.y)
#            plot(min(n+step, e) - i.p.y)
#            n += step
#
#        if i.next
#            assert i.next.prev == i, "broken chain somewhere"
#        i = i.next
#
#
#add_crosshair = (pos, x, y, s, color=[1,1,1]):
#    add_vertex((x=pos.x - 0.010, y=pos.y), x, y, s, color)
#    add_vertex((x=pos.x + 0.010, y=pos.y), x, y, s, color)
#    add_vertex((x=pos.x, y=pos.y - 0.010), x, y, s, color)
#    add_vertex((x=pos.x, y=pos.y + 0.010), x, y, s, color)
#
#add_vertex = (pos, x, y, s, color=[1,1,1]):
#    i = app.vbo.vertex_count
#    app.vbo.data[i] = dict(pos=[ x+pos.x*s, y+pos.y*s, 0 ], coord=[0, 0.5, 0], color=color)
#    app.vbo.vertex_count += 1
#
#add_vertex_tri = (pos, x, y, s, color=[1,1,1]):
#    i = app.tri_vbo.vertex_count
#    app.tri_vbo.data[i] = dict(pos=[ x+pos.x*s, y+pos.y*s, 0 ], coord=[0, 0.5, 0], color=color)
#    app.tri_vbo.vertex_count += 1
#
#draw_circle = (center, radius):
#    step = tau / 200
#    t = 0.0
#    while t < tau
#        u = t+step
#        yield (
#            v0=(x=center.x+radius*cos(t), y=center.y+radius*sin(t)),
#            v1=(x=center.x+radius*cos(u), y=center.y+radius*sin(u)))
#        t = u
