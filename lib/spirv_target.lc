from spirv import Tag

build = ():
    glsl_std_450 = object();
        name = "GLSL.std.450"

    void_type = OpTypeVoid()
    int_type  = OpTypeInt(32, true)
    uint_type = OpTypeInt(32, false)

    vec3_uint_type = OpTypeVector(uint_type, 3)

    ptr_uniform_uint    = OpTypePointer("Uniform", uint_type)
    ptr_input_uint      = OpTypePointer("Input", uint_type)
    ptr_input_vec3_uint = OpTypePointer("Input", vec3_uint_type)

    # The size of the RuntimeArray is not known before the runtime.
    runtime_array_type = OpTypeRuntimeArray(uint_type)
    runtime_array_type.decorate = [
        Tag("ArrayStride", [4])
    ]

    # The buffer block in the program
    struct_type = OpTypeStruct([
        Member("result", runtime_array_type);
            decorate = [ Tag("Offset", [0]) ] # Offset of this member.
    ])
    struct_type.decorate = [
        "BufferBlock" # Tells that it's a shader interface block
    ]

    uniform_type        = OpTypePointer("Uniform", struct_type)

    uniform_var = OpVariable(uniform_type, "Uniform")
    uniform_var.name = "uniform_var"
    uniform_var.decorate = [
        Tag("DescriptorSet", [0]),
        Tag("Binding", [0])
    ]

    global_invocation_id = OpVariable(ptr_input_vec3_uint, "Input")
    global_invocation_id.name = "global_invocation_id"
    global_invocation_id.decorate = [
        Tag("BuiltIn", ["GlobalInvocationId"])
    ]

    func_type = OpTypeFunction([], void_type)
    main_func = OpFunction(func_type)
    main_func.name = "main"

    uint_0 = OpConstant([0], uint_type)
    int_0 = OpConstant([0], int_type)

    entry = main_func.new_block()
    ins_0 = entry.op("OpAccessChain", [global_invocation_id, [uint_0]], ptr_input_uint)
    ins_1 = entry.op("OpLoad", [ins_0, null], uint_type)
    ins_2 = entry.op("OpAccessChain", [global_invocation_id, [uint_0]], ptr_input_uint)
    ins_3 = entry.op("OpLoad", [ins_2, null], uint_type)
    ins_4 = entry.op("OpAccessChain", [uniform_var, [int_0, ins_1]], ptr_uniform_uint)
    entry.op("OpStore", [ins_4, ins_3, null])
    entry.op("OpReturn", [])

    table = UIDTable(1)
    top  = []

    capabilities = [ "Shader" ]
    externals = [ glsl_std_450 ]
    addressing_model = "Logical"
    memory_model = "GLSL450"

    compute_entry = object();
        exec_model = "GLCompute" # Vertex, TessellationControl, TessellationEvaluation, Geometry, Fragment, GLCompute, Kernel
        func = main_func
        interface = [global_invocation_id]
        execution_modes = [
            Tag("LocalSize", [1, 1, 1])
        ]
    entries = [ compute_entry ]
    functions = [ main_func ]

    # All OpCapability instructions
    for cap in capabilities
        top.append(Tag("OpCapability", [cap]))

    # Optional OpExtension instructions (extensions to SPIR-V)
    # Optional OpExtInstImport instructions.
    for ext in externals
        top.append(Tag("OpExtInstImport", [table.result(ext), ext.name]))

    # The single required OpMemoryModel instruction.
    # Addressing models:
    #   Logical.
    #   Physical32, address width is 32 bits, requires 'Addresses' capability
    #   Physical64, address width is 64 bits, requires 'Addresses' capability
    # Memory models:
    #   Simple,  no shared memory consistency  issues, requires 'Shader' capability
    #   GLSL450, needed by GLSL and ESSL, requires 'Shader' capability
    #   OpenCL,  requires 'Kernel' capability
    top.append(Tag("OpMemoryModel", [addressing_model, memory_model]))

    # All entry point declarations, using OpEntryPoint
    for entry in entries
        interface = []
        for variable in entry.interface
            interface.append(table.ref(variable))

        top.append(Tag("OpEntryPoint", [
            entry.exec_model,
            table.ref(entry.func),
            entry.func.name,
            interface]))

    # All execution mode declarations, using OpExecutionMode
    for entry in entries
        for mode in entry.execution_modes
            top.append(Tag("OpExecutionMode", [table.ref(entry.func), mode]))

    # debug_names = {
    #     main_func.name: main_func,
    #     global_invocation_id.name: global_invocation_id
    # }
    # #Tag("OpSource",           ["Unknown", 0, null, null])
    # # If the language has extensions that need to be known in debugging, add them here.
    # #Tag("OpSourceExtension",  ["GL_ARB_separate_shader_objects"]),
    # #Tag("OpSourceExtension",  ["GL_ARB_shading_language_420pack"]),
    # for name, obj in debug_names.items()
    #     debug.append(Tag("OpName", [table.ref(obj), name]))

    builder = object();
        # Debug instructions, in order: 1. OpString, OpSourceExtension, OpSource, OpSourceContinued, (*)
        #                               2. OpName, OpMemberName
        # (*. without forward references)
        debug = []
        # decor section not a real requirement? but the validator seems to gunk without
        # pulling the OpDecorate -instructions up.
        decor = []
        # All type declarations (OpTypeXXX), all constant instructions, all global variable
        # declarations, (all OpVariable instructions whose Storage Class not a Function)
        # Preferred location for OpUndef instructions.
        # All operands must be declared before use, otherwise they can be in any order.
        # The first section to allow use of OpLine debug information.
        head  = []
        # All function declarations (no forward declaration to a function with a body TODO: what does this mean?)
        # All function definitions
        body = []
        # All items we visited, and the ID table (can be merged)
        visited = set()
        table = table

    for function in functions
        function.build(builder)

    # This is done here to ensure that the references in the interface are defined.
    for entry in entries
        for variable in entry.interface
            variable.visit(builder)

    unit = object()
    unit.generator = 0 # TODO: register the IR generator?
    unit.bound = table.bound # They start from '1'
    unit.instructions = top ++ builder.debug ++ builder.decor ++ builder.head ++ builder.body
    return unit

class Op

class OpFunction extends Op
    +init = (self, type, blocks=[]):
        self.type = type
        self.blocks = blocks
        self.control = [] # https://www.khronos.org/registry/spir-v/specs/1.0/SPIRV.html#Function_Control
                          # None, Inline, DontInline, Pure, Const

    build = (self, builder):
        #return self if self in builder.visited
        builder.visited.add(self)
        type = self.type.visit(builder)
        builder.body.append(
            Tag("OpFunction", [
                builder.table.as_type(type.restype),
                builder.table.result(self),
                self.control,
                builder.table.ref(type) ]))
        for block in self.blocks
            builder.body.append(
                Tag("OpLabel", [builder.table.result(block)]))
            for ins in block.body
                ins.build(builder)
        builder.body.append(
            Tag("OpFunctionEnd", []))
        #return self

    new_block = (self):
        block = OpBlock()
        self.blocks.append(block)
        return block

class OpBlock
    +init = (self, body=[]):
        self.body = body

    op = (self, name, args, restype=null):
        op = Operation(name, args, restype)
        self.body.append(op)
        return op

class OpType extends Op

class OpTypeFunction extends OpType
    +init = (self, argtypes, restype):
        self.argtypes = argtypes
        self.restype = restype

    visit = (self, builder):
        return self if self in builder.visited
        builder.visited.add(self)
        add_decorate(builder, self)
        restype = builder.table.ref(self.restype.visit(builder))
        argtypes = []
        for type in self.argtypes
            argtypes.append(builder.table.ref(type.visit(builder)))
        builder.head.append(Tag("OpTypeFunction", [
            builder.table.result(self),
            restype,
            argtypes
        ]))
        return self

class OpTypeVoid extends OpType
    visit = (self, builder):
        return self if self in builder.visited
        builder.visited.add(self)
        add_decorate(builder, self)
        builder.head.append(Tag("OpTypeVoid", [
            builder.table.result(self)
        ]))
        return self

class OpTypeInt extends OpType
    +init = (self, bits, signed):
        self.bits = bits
        self.signed = signed

    visit = (self, builder):
        return self if self in builder.visited
        builder.visited.add(self)
        add_decorate(builder, self)
        builder.head.append(Tag("OpTypeInt", [
            builder.table.result(self),
            self.bits,
            int(self.signed)
        ]))
        return self

class OpTypeVector extends OpType
    +init = (self, type, size):
        self.type = type
        self.size = size

    visit = (self, builder):
        return self if self in builder.visited
        builder.visited.add(self)
        add_decorate(builder, self)
        builder.head.append(Tag("OpTypeVector", [
            builder.table.result(self),
            builder.table.ref(self.type.visit(builder)),
            self.size
        ]))
        return self

class OpTypePointer extends OpType
    +init = (self, storage, type):
        self.storage = storage
        self.type = type

    visit = (self, builder):
        return self if self in builder.visited
        builder.visited.add(self)
        add_decorate(builder, self)
        builder.head.append(Tag("OpTypePointer", [
            builder.table.result(self),
            self.storage,
            builder.table.ref(self.type.visit(builder))
        ]))
        return self

class OpTypeRuntimeArray extends OpType
    +init = (self, type):
        self.type = type

    visit = (self, builder):
        return self if self in builder.visited
        builder.visited.add(self)
        add_decorate(builder, self)
        builder.head.append(Tag("OpTypeRuntimeArray", [
            builder.table.result(self),
            builder.table.ref(self.type.visit(builder))
        ]))
        return self

class OpTypeStruct extends OpType
    +init = (self, members):
        self.members = members

    visit = (self, builder):
        return self if self in builder.visited
        builder.visited.add(self)
        member_refs = []
        for member in self.members
            member_refs.append(
                builder.table.ref(member.type.visit(builder)))
        index = 0
        for member in self.members
            if member.?decorate
                for decorate in member.decorate
                    builder.decor.append(Tag("OpMemberDecorate", [
                        builder.table.ref(self),
                        index, 
                        decorate]))
            index += 1
        add_decorate(builder, self)
        builder.head.append(Tag("OpTypeStruct", [
            builder.table.result(self),
            member_refs
        ]))
        return self

class OpVariable extends Op
    +init = (self, type, storage, initializer=null):
        self.type = type
        self.storage = storage
        self.initializer = initializer

    visit = (self, builder):
        return self if self in builder.visited
        builder.visited.add(self)
        type = self.type.visit(builder)
        add_decorate(builder, self)
        if self.initializer
            init = builder.table.ref(self.initializer.visit(builder))
        else
            init = null
        builder.head.append(Tag("OpVariable", [
            builder.table.as_type(type),
            builder.table.result(self),
            self.storage,
            init
        ]))
        return self
    
class OpConstant extends Op
    +init = (self, value, type):
        self.value = value
        self.type = type

    visit = (self, builder):
        return self if self in builder.visited
        builder.visited.add(self)
        add_decorate(builder, self)
        builder.head.append(Tag("OpConstant", [
            builder.table.as_type(self.type.visit(builder)),
            builder.table.result(self),
            self.value
        ]))
        return self

class Member
    +init = (self, name, type):
        self.name = name
        self.type = type

class Operation extends Op
    +init = (self, name, args, restype=null):
        self.name = name
        self.args = args
        self.restype = restype

    visit = (self, builder):
        assert self.restype, "has no result"
        return self

    build = (self, builder):
        args = []
        if self.restype
            restype = self.restype.visit(builder)
            args.append(builder.table.as_type(restype))
            args.append(builder.table.result(self))
        for arg in self.args
            args.append(rename(builder, arg))
        builder.body.append(
            Tag(self.name, args))

add_decorate = (builder, type):
    return if not type.?decorate
    for item in type.decorate
        builder.decor.append(Tag("OpDecorate", [
            builder.table.ref(type),
            item
        ]))

rename = (builder, arg):
    if isinstance(arg, Op)
        return builder.table.ref(arg.visit(builder))
    elif isinstance(arg, list)
        args = []
        for a in arg
            args.append(rename(builder, a))
        return args
    else
        return arg

class UIDTable
    +init = (self, bound=1):
        self.table = {}
        self.bound = bound

    get = (self, key):
        i_key = Id(key)
        if i_key in self.table
            return self.table[i_key]
        else
            self.table[i_key] = record = object();
                uid = self.bound
                created = false
            self.bound += 1
            return record

    result = (self, key):
        record = self.get(key)
        assert not record.created
        record.created = true
        return Tag("IdResult", [record.uid])

    as_type = (self, key):
        record = self.get(key)
        return Tag("IdResultType", [record.uid])

    ref = (self, key):
        record = self.get(key)
        return Tag("IdRef", [record.uid])
