import fs

doc = path("doc:/texopic")
# https://cheery.github.io/texopic/
# This project still may need some work.

# All macros are marked with arity.
#
# Ordinary macro is just replacing itself
# with some content and starts or holds a
# horizontal mode. We don't need to treat them.
#
# Segments are paragraph level constructs
# meant for customizing behavior of
# horizontal lists. Simplest constructs
# just write out a differently formatted
# horizontal list.
#
# Segments may hold a precapture -rule that
# causes them to capture a preformat block.
#
# Groups form nested vertical lists.
# Separators separate content in blocks.
main = (args):
    test_macros = {
        segments = {
            "title/0": {capture = false}
        }
        groups = {
            "itemize/0": {separators = ["item/0"]},
            "enumerate/0": {separators = ["item/0"]}
        }
    }
    document = []
    for arg in args[1.:]
        document ++= read_file(arg, test_macros)
    # A writeout demo to accompany the earlier one.
    document ++= [
        Segment(null, [
            "Here we have some sample code generated by texopic sample program. ",
            "The meaning of this text is different depending on what has been done to it.",
        ]),
        Segment(Macro("code", []), ["python"], Pre("if sunny:\n    print 'hello'\n    print 'world'")),
        Group(
            Macro("enumerate", []),
            [
                GroupCell(null, [
                    Segment(null, ["hello"])
                ]),
                GroupCell(Macro("item", []), [
                    Segment(Macro("foo",[]), ["world"])
                ]),
                GroupCell(Macro("item", []), [
                    Segment(null, ["bar"])
                ])
            ]
        ),
        Segment(null, [
            "A texopic parser/generator is required to be symmetrical."
        ])
    ]
    print(stringify(document))

read_file = (path, macros):
    fd = fs.open(path, fs.RDONLY)
    stream = Stream(read_fd(fd))
    output = parse_structure(stream, macros)
    fd.close()
    return output

write_file = (path, document):
    fd = fs.open(path, fs.WRONLY | fs.TRUNC | fs.CREAT)
    fd.write(stringify(document).utf8)
    fd.close()

parse_structure = (stream, macros, implicit_ending="auto"):
    output = []
    stack = null
    seg = Segment(null, [], null, stream.lno)
    capture = false
    flush = ():
        if seg.head or seg.data.length > 0
            output.append(seg)
            seg := Segment(null, [], null, stream.lno)
            capture := false
    stack_flush = (separator):
        flush()
        if stack.separator or output.length > 0
            stack.data.append( GroupCell(stack.separator, output) )
        stack.separator = separator
        output := []
    stack_pop = (ending):
        stack_flush(null)
        output := stack.output
        output.append(Group(stack.head, stack.data, stack.head.lno, ending))
        stack := stack.parent
    while stream.current != ""
        token = parse_token(stream)
        if isinstance(token, str)
            if not (token.is_space() and seg.data.length == 0)
                seg.data.append(token)
        elif isinstance(token, Par)
            flush()
        elif isinstance(token, Pre)
            if capture
                seg.pre = token
                flush()
            else
                flush()
                output.append(Segment(null, [], token, token.lno))
        elif isinstance(token, Macro)
            if token.name == "begin"
                if token.args.length > 0
                    name = verbatim(token.args[0])
                    key = name ++ "/" ++ (token.args.length - 1).to_string()
                    info = macros["groups"].get(key)
                    if info
                        stack = object();
                            parent = stack
                            name = name
                            head = Macro(name, token.args[1.:], token.lno)
                            separator = null
                            separators = set(info["separators"])
                            output = output
                            data = []
                        output = []
                        continue
            if token.name == "end"
                if token.args.length == 1
                    name = verbatim(token.args[0])
                    if in_stack(name, stack)
                        while stack and stack.name != name
                            stack_pop(implicit_ending)
                        stack_pop("explicit")
                        continue
                if token.args.length == 0 and stack
                    stack_pop("implicit")
                    continue
            key = token.name ++ "/" ++ token.args.length.to_string()
            info = macros["segments"].get(key)
            if info
                flush()
                seg.head = token
                capture  = info["capture"]
                continue
            if stack and key in stack.separators
                stack_flush(token)
                continue
            seg.data.append(token)
        else
            assert false, repr(token)
    flush()
    while stack
        stack_pop(implicit_ending)
    return output

in_stack = (name, stack):
    while stack and stack.name != name
        stack = stack.parent
    return bool(stack)

parse_token = (stream):
    skip_space(stream)
    if stream.putback
        token = stream.putback
        stream.putback = null
        return token
    nl = stream.nl
    sp = stream.sp
    ch = stream.advance()
    if ch == ";" and stream.current == "#"
        sp = true
        ch = stream.advance()
    if sp and ch == "#"
        lno = stream.lno
        name = StringBuilder()
        while stream.current != ""
            if stream.current == ";"
                stream.sp = true
                break
            if stream.current in "{}\n" or
               stream.current.is_space()
                break
            name.append(stream.advance())
        name = name.build()
        if name == "#"
            text = precapture(stream)
            if text
                return Pre(text, lno)
        args = []
        while true
            if stream.current == ";"
                stream.advance()
                break
            skip_space(stream)
            if stream.current != "{"
                break
            arg = []
            stream.advance()
            stream.sp = true
            stream.putback = null
            skip_space(stream)
            count = 1
            while count > 0
                if stream.current == ""
                    for i in range(count)
                        arg.append(Macro("syntax_error",
                            [["brace missing"]],
                            stream.putback.lno))
                    break
                elif stream.current == "{" and not stream.putback
                    count += 1
                    arg.append(stream.advance())
                    continue
                elif stream.current == "}" and not stream.putback
                    count -= 1
                    if count > 0
                        arg.append(stream.advance())
                    else
                        stream.advance()
                    continue
                token = parse_token(stream)
                if isinstance(token, [Par, Pre])
                    stream.putback = token
                    arg.append(Macro("syntax_error",
                        [["brace missing"]], stream.putback.lno))
                    args.append(arg)
                    return Macro(name, args, lno)
                arg.append( token )
                skip_space(stream)
            if stream.putback
                arg.append(stream.putback)
                stream.putback = null
            args.append(arg)
        stream.sp = true
        return Macro(name, args, lno)
    elif nl and ch == "\n"
        return Par(stream.lno)
    return ch

skip_space = (stream):
    if stream.putback and stream.putback != " "
        return
    while stream.current.is_space()
        if stream.nl and stream.current == "\n"
            return
        stream.advance()
        stream.putback = " "

# precapture never seems to change.
precapture = (stream):
    while stream.current != "\n" and stream.current.is_space()
        stream.advance()
    if stream.current != "\n"
        return null
    indent = stream.indent
    lines = []
    line = StringBuilder()
    while stream.current != ""
        if stream.current != "\n"
            line.append(stream.advance())
            continue
        while stream.current.is_space()
            if stream.current == "\n"
                lines.append(line.build())
                line = StringBuilder()
                stream.advance()
            else
                line.append(stream.advance())
        if stream.indent <= indent
            break

    lines.pop(0)            # the first line is always empty.
    if stream.current != "" # on mid-stream behavior the last line
        line = lines.pop()         # ends up empty.
        if not line.is_space()
            lines.append(line)
    # The precaptured block is left-stripped from space and
    # tab characters in equal amount per line.
    leftpad = null
    for line in lines
        i = 0
        for ch in line
            if ch not in " \t"
                break
            i += 1
        if i < line.length
            leftpad = min(i, leftpad)
    for i in range(lines.length)
        lines[i] = lines[i][leftpad.:]
        if lines[i].is_space()  # without this, repeated read/writes
            lines[i] = ""       # would appear to accumulate space.
    return "\n".join(lines)

class Stream
    +init = (self, iterator, col=0, lno=1, indent=col):
        self.iterator = iterator
        self.col = col
        self.lno = lno
        self.indent = indent
        self.sp = true
        self.nl = true
        self.putback = null # Stores Par, Precapture, and allows space
                            # to emit.
        try
            self.current = self.iterator.next()
        except UncatchedStopIteration as _
            self.current = ""

    advance = (self):
        ch = self.current
        try
            self.current = self.iterator.next()
        except UncatchedStopIteration as _
            self.current = ""
        if ch == "\r"
            return self.advance()
        self.sp = ch.is_space()
        if self.sp
            self.indent += self.nl
        else
            self.nl = (ch == "\n")
        if ch == "\n"
            self.sp = true
            self.nl = true
            self.col = 0
            self.lno += 1
            self.indent = 0
        else
            self.col += 1
        return ch

# TODO: Consider flushing this one somewhere else?
#       Think about generators and resource handling here.
#       There were some ideas in the treatment of this thing as an async queue.
read_fd = (fd):
    inbuf = Uint8Array(64*1024)
    dec = Utf8Decoder()
    index = 0
    count = fd.pread(inbuf, index)
    while count > 0
        for ch in dec(inbuf[.:count])
            yield ch
        index += count
        count = fd.pread(inbuf, index)
    dec.finish()


stringify = (data):
    sp = false
    builder = Builder()
    stringify_node = (node):
        if sp
            builder.stringify(Par())
        sp := true
        if isinstance(node, Segment)
            if node.head
                builder.stringify(node.head)
                builder.emit_char(" ")
            for snode in node.data
                builder.stringify(snode)
            if node.pre
                builder.emit_char(" ")
                builder.stringify(node.pre)
        elif isinstance(node, Group)
            builder.stringify(Macro("begin", [node.head.name] ++ node.head.args))
            sp2 = false
            for cell in node.data
                if sp2
                    builder.stringify(Par())
                else
                    builder.emit_newline()
                if cell.head
                    builder.stringify(cell.head)
                    builder.emit_char(" ")
                sp := false
                for snode in cell.data
                    stringify_node(snode)
                sp2 = cell.data.length > 1 # Compacts single-paragraph items.
            builder.emit_newline()
            if node.ending == "auto" or node.ending == "explicit"
                builder.stringify(Macro("end", [node.head.name]))
            elif node.ending == "implicit"
                builder.stringify(Macro("end", []))
            else
                assert false, repr(node.ending)
        else
            assert false, repr(node)
    for node in data
        stringify_node(node)
    builder.scanner.finish()
    return builder.scanner.printer.result.build()

verbatim = (arg, builder=Builder(VerbatimScanner())):
    if isinstance(arg, [Macro, str])
        builder.stringify(arg)
    else
        for node in arg
            builder.stringify(node)
    return builder.scanner.result.build()

# Structure after the parse is structured:
# Segment(lno, head, data), Block(lno, head, tail, data)
# Segment.head = macro?
# Block.head = macro?
# Block.tail = macro?
# Segment.data = [macro or str]
# Block.data = [ [macro, [Segment]] ]
# macro : <lno,name,args,capture>
class Segment
    +init = (self, head, data=[], pre=null, lno=null):
        self.head = head
        self.data = data
        self.pre = pre
        self.lno = lno

class Group
    +init = (self, head, data=[], lno=null, ending="auto"):
        self.head = head
        self.data = data
        self.lno = lno
        self.ending = ending

class GroupCell
    +init = (self, head, data):
        self.head = head
        self.data = data

class Macro
    +init = (self, name, args, lno=null):
        self.name = name
        self.args = args
        self.lno = lno

class Par
    +init = (self, lno=null):
        self.lno = lno

class Pre
    +init = (self, text, lno=null):
        self.text = text
        self.lno = lno

    +repr = (self):
        return "##<text>"
        
# So we have a game with characters '#{};'
# In the input stream the ';' may get eaten in several occassions:
# ;#    #;      #foo;   #xxx{};
#
# short: in beginning of macro, and in the end of macro.
#
# Does not matter if the macro is just '#', char escape or real.
#
# The user's remedy is to add another ';' if it gets eaten.
class Builder
    +init = (self, scanner = Scanner()):
        self.scanner = scanner
        self.sp = 3 # 0=no sp, 1=sp, 3=do not emit.
        self.st = 3 # 0=the next character can extend a macro
                    # 1=the next '{' will extend a macro
                    # 2=no danger of activating a macro
                    # 3=no danger of extending a macro
        self.count = 0 # counts parentheses if above 0

    stringify = (self, node):
        if isinstance(node, Macro)
            self.emit_macro(node.name, node.args)
        elif isinstance(node, str)
            for ch in node
                self.emit_char(ch)
        elif isinstance(node, Pre)
            assert self.count == 0, "precapture only valid on toplevel"
            self.emit_sp()
            if self.st == 2 or self.st == 0
                self.scanner.text(";")
            self.scanner.text("##")
            self.scanner.preformat(node.text)
            self.st = 3
        elif isinstance(node, Par)
            assert self.count == 0, "paragraph break only valid on toplevel"
            self.emit_newline()
            self.scanner.newline(0, true)
        else
            assert false, repr(node)

    emit_newline = (self):
        self.scanner.newline()
        self.sp = 3
        self.st = 3

    emit_macro = (self, name, args):
        self.emit_sp()
        if self.st == 2 or self.st == 0
            self.scanner.text(";")
        self.scanner.text("#")
        self.scanner.text(name)
        self.st = 0
        for arg in args
            count = self.count
            self.count = 1
            self.scanner.blank("", 0)
            self.scanner.text("{")
            self.st = 3
            for node in arg
                self.stringify(node)
            self.emit_sp()
            for i in range(self.count)
                self.scanner.text("}")
            self.count = count
            self.st = 1
        if name == "#" and self.st == 0 # 
            self.scanner.text(";")
            self.st = 3

    emit_char = (self, ch):
        if ch.is_space()
            self.sp |= 1
            self.st |= 1
        elif ch == "#"
            if self.st == 2
                self.scanner.text("#")
            else
                self.emit_macro("", [])
        elif ch == "{"
            if self.count > 0
                self.count += 1
            if self.st < 2
                self.scanner.text(";")
            self.emit_sp()
            self.scanner.text("{")
            self.st = 3
        elif ch == "}"
            if self.count > 0
                if self.count == 1
                    self.scanner.text("{")
                else
                    self.count -= 1
            self.emit_sp()
            self.scanner.text("}")
            self.st = 3
        elif ch == ";"
            if self.st < 2
                self.scanner.text(";")
            self.emit_sp()
            self.scanner.text(ch)
            self.st = 2
        else
            if self.st == 0
                self.scanner.text(";")
            self.emit_sp()
            self.scanner.text(ch)
            self.st = 2

    emit_sp = (self):
        if self.sp == 1
            self.scanner.blank(" ", 0)
        self.sp = 0

# When plugged to builder, gives canonical representation
# for a given macro.
class VerbatimScanner
    +init = (self):
        self.result = StringBuilder()

    left = (self):
        null

    right = (self):
        null

    blank = (self, text, indent):
        self.result.append(text)

    text = (self, text):
        self.result.append(text)

# The use of this code here is excessive because we are not using it to
# format the item groups.
class Scanner
    +init = (self):
        self.printer = Printer()
        self.stream = []
        self.stack = []
        self.lastblank = null
        self.left_total = 1
        self.right_total = 1 # makes sure we won't treat the first
                             # item differently than others.

    left = (self):
        return self.scan(Left())

    right = (self):
        return self.scan(Right())

    blank = (self, text, indent):
        return self.scan(Blank(text, indent))

    text = (self, text):
        return self.scan(Text(text))

    newline = (self, indent=0, force=false):
        return self.scan(Newline(indent, force))

    preformat = (self, text, indent=4):
        return self.scan(Preformat(text, indent))

    scan = (self, x):
        if isinstance(x, Left)
            x.size = -self.right_total
            self.stack.append(x)
        elif isinstance(x, Right)
            if self.stack.length > 0
                self.stack.pop().size += self.right_total
        elif isinstance(x, Blank)
            if self.lastblank
                self.lastblank.size += self.right_total
            self.lastblank = x
            x.size = -self.right_total
            self.right_total += x.text.length
        elif isinstance(x, Text)
            self.right_total += x.text.length
        self.stream.append(x)
        while self.stream.length > 0 and self.right_total - self.left_total > 3*self.printer.margin
            self.left_total += self.printer.scan(self.stream.pop(0))
        return self

    finish = (self):
        if self.lastblank                           # required for correct handling of the last line.
            self.lastblank.size += self.right_total
        while self.stream.length > 0
            self.printer.scan(self.stream.pop(0))

# Printer keeps the track of layout during printing.
class Printer
    +init = (self):
        self.margin = 80
        self.layout = object({
            parent = null
            spaces = 80
            force_break = false
        })
        self.spaceleft = 80
        self.spaces = 80
        self.result = StringBuilder()

    scan = (self, x):
        if isinstance(x, Left)
            self.layout = object({
                parent = self.layout
                spaces = self.spaces
                force_break = (x.size < 0 or self.spaceleft < x.size)
            })
        elif isinstance(x, Right)
            if self.layout.parent
                self.layout = self.layout.parent
        elif isinstance(x, Blank)
            if x.size < 0 or self.spaceleft < x.size or self.layout.force_break
                self.spaces = self.layout.spaces - x.indent
                self.spaceleft = self.spaces
                self.result.append("\n")
                self.result.append(" "*(self.margin - self.spaces))
            else
                self.result.append(x.text)
                self.spaceleft -= x.text.length
        elif isinstance(x, Text)
            self.result.append(x.text)
            self.spaceleft -= x.text.length
        elif isinstance(x, Newline)
            if self.spaces != self.spaceleft or x.force
                self.spaces = self.layout.spaces - x.indent
                self.spaceleft = self.spaces
                self.result.append("\n")
                self.result.append(" "*(self.margin - self.spaces))
        elif isinstance(x, Preformat)
            self.spaces = self.layout.spaces
            self.spaceleft = self.spaces
            cr = "\n" ++ " "*(self.margin - self.spaces + x.indent)
            self.result.append(cr)
            self.result.append(x.text.replace("\n", cr))

            self.result.append("\n")
            self.result.append(" "*(self.margin - self.spaces))
        return x.length

# These objects are mutated by the scanner, so they cannot be
# reused. Users of the pretty printer should not create them themselves.
class Text
    +init = (self, text):
        self.text = text
        self.length = text.length

class Left
    +init = (self):
        self.size = 0

class Right
    +init = (self):
        null

class Blank
    +init = (self, text, indent):
        self.text = text
        self.indent = indent
        self.size = 0
        self.length = text.length

# Newline and preformat are hacks into this pretty printer.
# They might turn out to be badly behaving later on.
class Newline
    +init = (self, indent, force):
        self.length = 0
        self.indent = indent
        self.force = force

class Preformat
    +init = (self, text, indent):
        self.text = text
        self.indent = indent
        self.length = 0
