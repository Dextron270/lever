import api, ffi

init = (gl):
    gl.enable(gl.FRAMEBUFFER_SRGB)
    ovr = api.library("LibOVRRT32_0_8")
    result = ovr.Initialize(null)
    if result < ovr.Success
        print("ovr Initialize failed")
        exit(1)
    session = ffi.automem(ovr.Session)
    luid = ffi.automem(ovr.GraphicsLuid)
    result = ovr.Create(session, luid)
    if result < ovr.Success
        print("ovr Create failed")
        exit(1)
    session = session.to
    hmddesc = ovr.GetHmdDesc(session)

    depthbuf = ffi.automem(ffi.int, 2)
    framebuf = ffi.automem(ffi.int, 2)
    gl.genRenderbuffers(2, depthbuf)
    gl.genFramebuffers(2, framebuf)
    eyes = [exnihilo(), exnihilo()]
    for i in [0, 1] # ovr.Eye_Left, ovr.Eye_Right
        eyes[i].i = i

    layer = ffi.automem(ovr.LayerEyeFov)
    layer.Header.Type = ovr.LayerType_EyeFov
    layer.Header.Flags = ovr.LayerFlag_TextureOriginAtBottomLeft
    for eye in eyes
        fov = hmddesc.DefaultEyeFov[eye.i]
        eye.desc = ovr.GetRenderDesc(session, eye.i, fov)
        #size = ovr.GetFovTextureSize(session, eye.i, fov, 1.0)
        eye.size = exnihilo()
        eye.size.w = 1024
        eye.size.h = 1024
        texset_p = ffi.automem(ffi.pointer(ovr.SwapTextureSet))
        result = ovr.CreateSwapTextureSetGL(session,
            gl.SRGB8_ALPHA8, eye.size.w, eye.size.h, texset_p)
        if result < ovr.Success
            print("ovr CreateSwapTextureSetGL failed")
            exit(1)
        eye.texset = texset_p.to
        layer.ColorTexture[eye.i] = eye.texset
        layer.Fov[eye.i] = eye.desc.Fov
        layer.Viewport[eye.i].Pos.x = 0
        layer.Viewport[eye.i].Pos.y = 0
        layer.Viewport[eye.i].Size.w = eye.size.w
        layer.Viewport[eye.i].Size.h = eye.size.h
        eye.drb = depthbuf[eye.i]
        eye.fb = framebuf[eye.i]
        gl.bindRenderbuffer(gl.RENDERBUFFER, eye.drb)
        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH24_STENCIL8, eye.size.w, eye.size.h)
        gl.bindFramebuffer(gl.FRAMEBUFFER, eye.fb)
        gl.framebufferRenderbuffer(gl.FRAMEBUFFER,
            gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, eye.drb)
        eye.projection = hmd_projection(true, eye.desc.Fov, 0.01, 10000.0, false, false)


    frame_texture = (texset):
        x = ffi.cast(texset.Textures[texset.CurrentIndex], ffi.pointer(ovr.GLTexture))
        return x.OGL.TexId

    layerlist = ffi.automem(ffi.pointer(ovr.LayerHeader))
    layerlist.to = layer.Header

    hmd = exnihilo()
    hmd.on = true
    hmd.eyes = eyes
    hmd.begin = ():
        t = ovr.GetPredictedDisplayTime(session, 0)
        state = ovr.GetTrackingState(session, t, ovr.True)
        layer.SensorSampleTime = ovr.GetTimeInSeconds()

        hmd.ori = pose_ori(state.HeadPose.ThePose)
        hmd.pos = pose_pos(state.HeadPose.ThePose)
        hmd.matrix = hmd.ori.to_mat4(hmd.pos)

    eye_poke = (eye):
        eye.bind = ():
            eye.texset.CurrentIndex = (eye.texset.CurrentIndex + 1) % eye.texset.TextureCount
            gl.bindFramebuffer(gl.FRAMEBUFFER, eye.fb)
            #gl.bindTexture(gl.TEXTURE_2D, texture_id)
            gl.framebufferTexture2D(gl.FRAMEBUFFER,
                gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, frame_texture(eye.texset), 0)
            if gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE
                print("framebuffer is not complete!")
                exit(1)
            gl.viewport(0, 0, eye.size.w, eye.size.h)
            eye.pos = hmd.matrix * ld_vec3(eye.desc.HmdToEyeViewOffset)
            eye.ori = hmd.ori
            set_pose(layer.RenderPose[eye.i], eye.pos, eye.ori)
    for eye in eyes
        eye_poke(eye)

    hmd.submit = ():
        result = ovr.SubmitFrame(session, 0, null, layerlist, 1)
        hmd.on = (result == ovr.Success)

    # TODO: hmd quit
    #ovr.Destroy(session)
    #ovr.Shutdown()

    return hmd

    # Left these in here in case they're ever needed around.
    #viewscaledesc = ffi.automem(ovr.ViewScaleDesc)
    #viewscaledesc.HmdSpaceToWorldScaleInMeters = 1.0
    #viewscaledesc.HmdToEyeViewOffset[0] = ldesc.HmdToEyeViewOffset
    #viewscaledesc.HmdToEyeViewOffset[1] = rdesc.HmdToEyeViewOffset
    # Framebuffer color buffer
    # color_buffer = ffi.automem(ffi.int)
    # gl.genTextures(1, color_buffer)
    # gl.bindTexture(gl.TEXTURE_2D, color_buffer.to)
    # gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 320, 240, 0, gl.RGB, gl.UNSIGNED_BYTE, null)
    # gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)
    # gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)

hmd_projection = (righthanded, tan_half_fov, znear, zfar, flipz, faratinfinity):
    if not flipz and faratinfinity
        assert(false, "Cannot push far clip to infinity when z-order is not flipped")
    scaleAndOffset = create_ndc_scale_and_offset_from_fov(tan_half_fov)

    if righthanded
        handedness_scale = -1.0
    else
        handedness_scale = +1.0

    # Produces X result, mapping clip edges to [-w,+w]
    m00 = scaleAndOffset.scale_x
    m01 = 0.0
    m02 = handedness_scale * scaleAndOffset.offset_x
    m03 = 0.0

    # Produces Y result, mapping clip edges to [-w,+w]
    # Hey - why is that YOffset negated?
    # It's because a projection matrix transforms from world coords with Y=up,
    # whereas this is derived from an NDC scaling, which is Y=down.
    m10 = 0.0
    m11 = scaleAndOffset.scale_y
    m12 = handedness_scale * -scaleAndOffset.offset_y
    m13 = 0.0

    # Produces Z-buffer result - app needs to fill this in with whatever Z range it wants.
    # We'll just use some defaults for now.
    m20 = 0.0
    m21 = 0.0

    if faratinfinity
        # It's not clear this makes sense for OpenGL - you don't get the same precision benefits you do in D3D.
        m22 = -handedness_scale
        m23 = 2.0 * znear
    else
        if flipz
            a = -1.0
            b = -zfar
        else
            a = +1.0
            b = +zfar
        # Clip range is [-w,+w], so 0 is at the middle of the range.
        m22 = -handedness_scale * a * (znear + zfar) / (znear - zfar)
        m23 =                     2.0 * (b * znear) / (znear - zfar)

    # Produces W result (= Z in)
    m30 = 0.0
    m31 = 0.0
    m32 = handedness_scale
    m33 = 0.0
    return mat4(m00, m10, m20, m30,
                m01, m11, m21, m31,
                m02, m12, m22, m32,
                m03, m13, m23, m33)

create_ndc_scale_and_offset_from_fov = (tanHalfFov):
    result = exnihilo()
    result.scale_x = 2.0 / ( tanHalfFov.LeftTan + tanHalfFov.RightTan )
    result.offset_x = ( tanHalfFov.LeftTan - tanHalfFov.RightTan ) * result.scale_x * 0.5
    result.scale_y = 2.0 / ( tanHalfFov.UpTan + tanHalfFov.DownTan )
    result.offset_y = ( tanHalfFov.UpTan - tanHalfFov.DownTan ) * result.scale_y * 0.5
    # Hey - why is that Y.Offset negated?
    # It's because a projection matrix transforms from world coords with Y=up,
    # whereas this is from NDC which is Y=down.
    return result

pose_ori = (pose):
    return quat(pose.Orientation.x, pose.Orientation.y, pose.Orientation.z, pose.Orientation.w)

pose_pos = (pose):
    return vec3(pose.Position.x, pose.Position.y, pose.Position.z)

ld_vec3 = (obj):
    return vec3(obj.x, obj.y, obj.z)

set_pose = (pose, pos, ori):
    pose.Orientation.x = ori.x
    pose.Orientation.y = ori.y
    pose.Orientation.z = ori.z
    pose.Orientation.w = ori.w
    pose.Position.x = pos.x
    pose.Position.y = pos.y
    pose.Position.z = pos.z
