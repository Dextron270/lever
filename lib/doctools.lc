import fs

doc = path("doc:/doctools")

# Syntax of a doc file.
macros = {
    segments = {
        "module/1": {capture = false}
        "title/0": {capture = false}
        "source/0": {capture = true}
        "toc/0": {capture = false}
        "section/0": {capture = false}
        "section/1": {capture = false}
        "subsection/0": {capture = false}
        "subsection/1": {capture = false}
        #"reference/1": {capture = false}
        "image/1": {capture = false}
        "extends/0": {capture = false}
        "summary/0": {capture = false}
        "status/0": {capture = false}
        "arg/1": {capture = false}
        "arg/2": {capture = false}
        "optional/2": {capture = false}
        "optional/3": {capture = false}
        "is_variadic/0": {capture = false}
        "returns/0": {capture = false}
        "returns/1": {capture = false}
        "value/0": {capture = false}
        "interface/0": {capture = false}
        "ignore/1": {capture = false}
        "code/0": {capture = true}
        "manual/3": {capture = false}
        "index-toc/1": {capture = false}
    }
    groups = {
        "interface/1": {separators = []},
        # TODO: later add method/2 for externally marked multimethods.
        #       maybe... put the multimethod fill the .doc, so you can
        #       then use this mode of documentation... concat_int_int
        "function/1": {separators = []},
        "method/0": {separators = []},
        "default/0": {separators = []},
        "multimethod/2": {separators = []},
        "object/1": {separators = []},
        "itemize/0": {separators = ["item/0"]},
        "enumerate/0": {separators = ["item/0"]},
        "table/0": {separators = ["tr/0", "td/0"]},
        "examples/0": {separators = []},
    }
}


# Never run this on a scope you do not trust.
import_all_modules = (scope):
    if path("builtin:/") <= scope.local
        for name in scope
            yield object();
                module = scope[name].module
                name = path(name).relpath(scope.local).to_string()
    else
        imp = Import(scope.local, scope)
        for entry in fs.scandir(scope.local)
            if not entry.path.endswith(".lc")
                continue
            assert entry.type == "file"
                "TODO: entry type: " ++ entry.type
            name = entry.path[.:entry.path.length-3]
            yield object();
                module = imp(name)
                name = name

# Same goes for this.
get_scope_index = (scope, recursive=true):
    if recursive and scope.parent
        index = get_scope_index(scope.parent)
    else
        index = {}
    for entry in import_all_modules(scope)
        module = entry.module
        if not module.doc # not sure what else to do for undocumented modules.
            continue
        assert not isinstance(module.doc, DocRef)
            info(module.doc.name, 'error')
            info(module.doc.link, 'error')
            "doctools doesn't handle submodules right yet, so we appear to have an unmarked library module."
        path = module.doc.to_string()
        index[entry.name] = {
            type = "module"
            fields = get_module_index(module, index.get(entry.name))
            path = path
            # The ideas here was still a bit quite cloudy.
            # I thought that keying the dictionary by module name
            # would allow multiple modules refer to same document.
        }
    return index

# Stuff below this are safe, unless you imported
# a malicious module.
get_module_index = (module, block={}):
    scan(block, block, module.doc, module)
    return block

scan = (members, this, link, base):
    for name in listattr(base)
        if name == "doc"
            continue
        if isinstance(base, Module) and name in ["+init", "+repr"]
            continue
        val = getattr(base, name)
        doc = try_getattr(val, 'doc')
        if isinstance(doc, DocRef) and doc.link == link
            block = get_block(members, doc)
            if isinstance(val, interface)
                block["type"] = "interface"
                block["extends"] = get_link(super(val))
                if "fields" not in block
                    block["fields"] = {}
                scan(members, block["fields"], link, val)
            elif isinstance(val, multimethod)
                block["type"] = "multimethod"
                block["methods"] = table = []
                block["arity"] = val.arity
                for argtypes in val.keys()
                    func = val[argtypes]
                    desc = {}
                    if is_function(func)
                        scan_function(desc, func)
                    else
                        desc["type"] = "object"
                        desc["interface"] = get_link(interface(func))
                    arglinks = []
                    for argtype in argtypes
                        arglinks.append(get_link(argtype))
                    table.append({
                        argtypes = arglinks
                        function = desc
                    })
                if val.default
                    default = {}
                    scan_function(default, val.default)
                else
                    default = null
                block["default"] = default
            elif is_function(val)
                scan_function(block, val)
            else
                block["type"] = "object"
                block["interface"] = get_link(interface(val))
        else
            if isinstance(val, [int, str, float, bool, null])
                this[name] = block = {}
                block["type"] = "object"
                block["interface"] = get_link(interface(val))
                block["value"] = repr(val)
            elif isinstance(doc, DocRef)
                null # One approach would be to document these
                     # implicit links, but it encourages importing
                     # and using functions implicitly.
            else
                this[name] = block = {}
                block["type"] = "object"
                block["interface"] = get_link(interface(val))
#                if isinstance(doc, DocRef)
#                    block["link"] = get_link(val)

is_function = (val):
    spec = try_getattr(val, "spec")
    loc = try_getattr(val, "loc")
    return spec and loc

scan_function = (block, func):
    spec = func.spec
    loc = func.loc
    if spec and loc
        block["type"] = "function"
        if isinstance(loc.start, int)             #TODO: move this to runtime?
            loc.start = {lno=loc.start, col=null} #      also the function args
        else                                      #      could be moved.
            loc.start = dict(loc.start)
        if isinstance(loc.stop, int)
            loc.stop = {lno=loc.stop, col=null}
        else
            loc.stop = dict(loc.stop)
        block["loc"] = dict(loc)

        argtypes = try_getattr(spec, "argtypes")
        arglist = []
        for i in range(spec.argc + spec.optional + int(spec.is_variadic))
            arg = {}
            if spec.varnames and i < spec.varnames.length
                name = spec.varnames[i]
            else
                name = chr(0x61+i%25)
                k = i // 25
                while k > 0
                    name = chr(0x65+i%25) ++ name
                    k = k // 25
            arg["name"] = name
            if argtypes and i < argtypes.length
                arg["type"] = get_link(argtypes[i])
            if spec.argc <= i and i < spec.argc+spec.optional
                arg["default"] = "null"
            arglist.append(arg)
        block["args"] = arglist
        block["is_variadic"] = spec.is_variadic
        
get_block = (members, ref):
    if ref.parent
        block = get_block(members, ref.parent)
        if "fields" in block
            members = block["fields"]
        else
            members = block["fields"] = {}
    if ref.name in members
        return members[ref.name]
    else
        res = members[ref.name] = {}
        return res

get_link = (obj, ref=obj.doc):
    if not ref
        return [null, repr(obj)]
    if ref.parent
        link = get_link(obj, ref.parent)
    else
        link = [ref.link.to_string()]
    link.append(ref.name)
    return link

try_getattr = (obj, name, default=null):
    try
        return getattr(obj, name)
    except Exception as _
        return default
