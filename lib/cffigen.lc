import c, chartparser, json
# Completion of this strategy is due to 0.9.0 milestone
# STRATEGY: Improve foreign function interface to extend it's capabilities.
#           Provide complete REPL+Integrated Editor suite for lever.
# 
# I want people to frown when they see lever FFI and then contempt their
# language do not have this kind of system. To do this it needs to be
# slightly better and get some more exposure.

# Powerful interactive programming is lever's staple feature. This means we
# need really powerfull integrated development environment embedded into the
# runtime. The first step would be to provide a REPL that does bit more than
# reading a line and printing another out.

# TACTIC: use readline via FFI
# motivation: 
#   Line-editing tools in console are a great way to prepare
#   for the needs of a real IDE early on. It is also a feature many
#   other dynamic language implementations lack.
#
# requirements:
#   Use of readline requires that callbacks are implemented,
#   It also requires that library variables are handled more like
#   ordinary memory entries, because readline relies on global variables.

#   Use of readline requires dynamic loading that interrupts if the
#   library isn't available.

#   Also we may want to use this feature async. Async readline that doesn't
#   get confused by printing lines out would be so
#   awesome that it gives a new meaning for awesome.

#   Use of readline requires good C header generation. The cffi-gen library
#   is clumsy to use and update. Partially my own fault because I relied on
#   LR parsing. 

#   I believe it'd be the time to implement cffi header generator in lever.

#   To do that we need a C parser. Wholly functioning C parser! With macro
#   preprocessor.



main = ():
    stdio_h = "/usr/include/stdio.h"
    macro_env = c.std_macro_env()
    # This is actually something exposed to user. The user can select a config
    # The config comes from pytci's gcc_probe
    # Ran it with gcc_probe.py gcc -m32
    # and without the -m32
    config = json.read_file("/home/cheery/.local/cc-config-x86_64.json")
    ambiguity = (sppf, traverse):
        print("ambiguity resolution")
        out = ["AMBIGUOUS"]
        for x in sppf
            out.append(traverse(x))
        return chartparser.Resolve(out)

    # giving the preprocessor a stream allows you to stream
    # from elsewhere than files. Although this uses the include like usual.
    preprocessor = c.Preprocessor(config, macro_env, c.open_token_stream(stdio_h))
    parser = c.language.new_parser()
    parser.default_ambiguity_resolution = ambiguity
    keywords = c.language.table.keywords
    terminals = c.language.table.terminals

    typetable = set([
        "__builtin_va_list"
    ])

    actions = :exnihilo()
        nil = ():
            return null
        empty_list = ():
            return []
        first = (a):
            return [a]
        append = (a, b):
            a.append(b)
            return a
        r_append = (a, b):
            return [a] ++ b
        declaration = (specifiers, declarators):
#            for token in specifiers
#                if isinstance(token, c.Token) and token.value == "typedef"
#                    for decl in declarators
#                        print("NEW TYPEDEF", decl)
#                        typetable.add(decl.value)
            return [specifiers, declarators]

    post = (rule, args, start, stop):
        res = rule.annotation(actions, args, [])
        #print(rule, args, "->", res)
        return res

    while not preprocessor.empty
        token = preprocessor.step()
        if not token
            continue
        if token.name == "identifier" and token.value in keywords
            term = terminals[keywords[token.value]]
# ... interesting......
#        elif token.name == "identifier" and token.value in typetable
#            term = terminals["type_name"]
        else
            term = terminals[keywords.get(token.name, token.name)]
        assert parser.expecting(term)
            print("EXPECTED", parser.expect...)
            print(c.format_source(token), "GOT", term, token)
            "C parsing failed"
        parser.step(term, token, token, token)
        if parser.accepted
            result = parser.traverse(post)
            print(result)
            parser = c.language.new_parser()
            parser.default_ambiguity_resolution = ambiguity

    assert parser.chart.length == 1, "parser not finished?"
