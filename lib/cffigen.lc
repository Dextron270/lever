import c, chartparser, json

doc = runtime_path ++ "doc/cffigen"
# Completion of this strategy is due to 0.9.0 milestone
# STRATEGY: Improve foreign function interface to extend it's capabilities.
#           Provide complete REPL+Integrated Editor suite for lever.
# 
# I want people to frown when they see lever FFI and then contempt their
# language do not have this kind of system. To do this it needs to be
# slightly better and get some more exposure.

# Powerful interactive programming is lever's staple feature. This means we
# need really powerfull integrated development environment embedded into the
# runtime. The first step would be to provide a REPL that does bit more than
# reading a line and printing another out.

# TACTIC: use readline via FFI
# motivation: 
#   Line-editing tools in console are a great way to prepare
#   for the needs of a real IDE early on. It is also a feature many
#   other dynamic language implementations lack.
#
# requirements:
#   Use of readline requires that callbacks are implemented,
#   It also requires that library variables are handled more like
#   ordinary memory entries, because readline relies on global variables.

#   Use of readline requires dynamic loading that interrupts if the
#   library isn't available.

#   Also we may want to use this feature async. Async readline that doesn't
#   get confused by printing lines out would be so
#   awesome that it gives a new meaning for awesome.

#   Use of readline requires good C header generation. The cffi-gen library
#   is clumsy to use and update. Partially my own fault because I relied on
#   LR parsing. 

#   I believe it'd be the time to implement cffi header generator in lever.

#   To do that we need a C parser. Wholly functioning C parser! With macro
#   preprocessor.

# outcome so far:

#   Readline seems bit hard to use with libuv TTY. But it doesn't seem like I
#   could get portable terminal REPL with readline anyway.
#   Module lib/cffigen.lc is no longer relevant for the last strategy.

main = ():
    stdio_h = "/usr/include/stdio.h"
    #stdio_h = dir ++ "ansi-c-grammar-test.c"
    macro_env = c.std_macro_env()
    # This is actually something exposed to user. The user can select a config
    # The config comes from pytci's gcc_probe
    # Ran it with gcc_probe.py gcc -m32
    # and without the -m32
    config = json.read_file("/home/cheery/.local/cc-config-x86_64.json")

    # giving the preprocessor a stream allows you to stream
    # from elsewhere than files. Although this uses the include like usual.
    preprocessor = c.Preprocessor(config, macro_env, c.open_token_stream(stdio_h))
    scope = c.Scope()
    # hmm...
    scope.declare("__builtin_va_list", "type", null)
    while not preprocessor.empty
        result = c.parse(preprocessor, scope)
        print(result)

    print("done!")




traverse_declarator = (ctx, decl):
    spec = traverse_specifier(ctx, decl.specifier)
    stack = decl.stack
    while stack
        if stack.type == 'function'
            args = []
            for arg in stack.args
                args.append(traverse_arg(ctx, arg))
            spec = {
                type = 'cfunc'
                restype = spec
                argtypes = args
            }
        elif stack.type == 'pointer'
            for _ in stack.ptr
                spec = {
                    type = 'pointer'
                    to = spec
                }
        elif stack.type == 'array'
            assert isinstance(stack.size, c.Constant), repr(stack.size)
            if stack.size.token == null
                length = null
            else
                length = c.parse_number(stack.size.token.value)
            spec = {
                type = 'array'
                length = length
                ctype = spec
            }
        else
            assert false, repr(stack) ++ " " ++ stack.type
        stack = stack.next
    return spec

traverse_specifier = (ctx, specifier):
    if specifier.typespec.length > 1
        spec = " ".join(specifier.typespec)
        return primitive_types[spec]
    else
        spec = specifier.typespec[0]
        if isinstance(spec, str)
            return primitive_types[spec]
        if isinstance(spec, c.Reference)
            assert spec.value.type == "type", "?"
            return ctx.traverse_type(spec.name, spec.value.declarator)
        if isinstance(spec, c.DataSpecifier)
            return {
                type = spec.token.value
                fields = traverse_fields(ctx, spec.fields)
            }
        assert false, "requires special treatment " ++ repr(spec)

traverse_fields = (ctx, fields):
    result = []
    for field in fields
        assert not field.last, repr(field.last)
        result.append([
            field.name,
            traverse_declarator(ctx, field)
        ])
    return result

traverse_arg = (ctx, arg):
    if isinstance(arg, c.Specifier)
        return traverse_specifier(ctx, arg)
    elif isinstance(arg, c.Declarator)
        assert not arg.last, "bad syntax?"
        assert not arg.initializer, "initializer disallowed"
        return traverse_declarator(ctx, arg)
    else
        assert false, repr(arg)

primitive_types = {
    'void':               "void",
    'char':               "ubyte",
    'unsigned char':      "ubyte",
    'signed char':        "sbyte",
    'short':              "short",
    'signed short':       "short",
    'unsigned short':     "ushort",
    'int':                "int",
    'signed':             "int",
    'unsigned':           "uint",
    'unsigned int':       "uint",
    'signed int':         "int",
    'long':               "long",
    'unsigned long':      "ulong",
    'long long':          "llong",
    'signed long long':   "llong",
    'unsigned long long': "ullong",
    'float':              "float",
    'double':             "double",
    'long double':        "ldouble",
}
