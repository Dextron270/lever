import fs

system_console = null
get_system_console = (options=default_options):
    if system_console
        return system_console
    if isinstance(stdin, TTY)
        infd = stdin
    else
        raise NoConsole()
    if isinstance(stdout, TTY)
        outfd = stdout
    else
        raise NoConsole()
    logger = new_log()
    infd.set_mode('raw')
    if isinstance(stderr, [TTY, Pipe])
        errfd = stderr
    elif isinstance(stderr, fs.File)
        errfd = ErrorFileStream(stderr)
    else
        warn = object()
        warn.type = "warning"
        warn.value = "stderr is incompatible and ignored"
        logger.append(warn)
        warn = object()
        warn.type = "warning"
        warn.value = "error fed to stdout"
        logger.append(warn)
        errfd = stdout # TODO: do something smarter here.
    system_console := Console(infd, outfd, errfd, logger, options)
    return system_console

class NoConsole extends Exception
    +init = (self):
        self.traceback = []

    +repr = (self):
        return "NoConsole: Interactive console unavailable"
    
class ErrorFileStream
    +init = (self, file):
        self.file = file
        self.offset = 0
    
    write = (self, buffer):
        count = self.file.pwrite(buffer, self.offset)
        self.offset += count

    close = (self):
        self.file.close()

class Console
    +init = (self, infd, outfd, errfd, logger, options):
        self.infd = infd
        self.outfd = outfd
        self.errfd = errfd
        self.visuals = []
        self.focus = null
        self.logger = logger
        schedule(refresh_loop, self, options.colors)
        self.infd.ref = false 
        schedule(input_loop, self)
        #  
        self.refresh_interval = options.refresh_interval
        self.timer = Timer()
        self.timer.ref = false
        self.timer.on_tick.register(self.allow_refresh)
        self.refresh_ok = true
        self.refresh_pending = false

#   Not sure how to close the input_loop yet,
#   other than closing the infd. Not very good approach.
#    close = (self):
#        self.logger.close()
#        self.timer.close()

    attach = (self, visual):
        self.visuals.append(visual)
        if can_obtain_focus(visual)
            if not self.focus        # focus is gained if given.
                self.focus = visual
                self.infd.ref = true
        return visual

    detach = (self, visual):
        index = self.visuals.index(visual)
        self.visuals.remove(visual)
        if visual == self.focus
            self.focus = null
        for visual in self.visuals[index:.]
            if can_obtain_focus(visual)
                self.focus = visual
                break
        self.infd.ref = bool(self.focus)

    input = (self, prompt=""):
        this = self.attach(InputVisual(self, prompt))
        return this.response.wait()

    log = (self, type, value):
        obj = object()
        obj.type = type
        obj.value = value
        self.logger.append(obj)

    allow_refresh = (self):
        if self.refresh_pending
            self.log("refresh", null)
            self.refresh_pending = false
        else
            self.refresh_ok = true

    refresh = (self):
        self.refresh_pending = true
        if self.refresh_ok
            self.log("refresh", null)
            self.refresh_pending = false
            self.refresh_ok = false
        
class InputVisual
    +init = (self, console, prompt):
        self.console = console
        self.prompt = prompt
        self.response = Event()
        self.editor = LineEditor()

    process = (self, ch):
        if self.editor.process(ch)
            return true
        if ch == "\r" or ch == "\n"
            self.response.dispatch(self.editor.get_line())
            self.console.detach(self)
            return true
        return false

    refresh = (self, sketch):
        sketch.append(self.prompt)
        self.pos = self.editor.refresh(sketch)

# This is separated to allow reuse. See an example of it in
# lib/repl.lc (once it's up)
class LineEditor
    +init = (self, text=""):
        self.line0 = list(text)
        self.line1 = []
        self.pos = object({x = 0, y = 0})

    get_line = (self):
        return "".join(self.line0 ++ self.line1)

    process = (self, ch):
        if ch.length == 1
            n = ord(ch)
            if (0x20 <= n and n < 127) or n > 255
                self.line0.append(ch)
                return true
        if ch == "\x7f"
            if self.line0.length > 0
                self.line0.pop()
            return true
        if ch == "\x1b[3~"
            if self.line1.length > 0
                self.line1.pop(0)
            return true
        if ch == "\x1b[C"
            if self.line1.length > 0
                self.line0.append(self.line1.pop(0))
            return true
        if ch == "\x1b[D"
            if self.line0.length > 0
                self.line1.insert(0, self.line0.pop())
            return true
        if ch == "\x1b[H"
            self.line0.extend(self.line1)
            self.line1 = self.line0
            self.line0 = []
            return true
        if ch == "\x1b[F"
            self.line0.extend(self.line1)
            self.line1 = []
            return true
        return false

    refresh = (self, sketch):
        sketch.append("".join(self.line0))
        self.pos = sketch.get_cursor_pos()
        sketch.append("".join(self.line1))
        return self.pos

# Before input loop is scheduled, the infd handle
# is unreferenced in order to allow the program quit
# even if the loop was active.
input_loop = (console):
    while true
        for ch in parse_ansi_stream(console.infd)
            if ch == "\x03"
                console.log("exit", 0)
            elif console.focus
                # This way it doesn't nag when there is no focus.
                if console.focus.process(ch)
                    console.log("refresh", null)
                elif console.focus and ch == "\x1b[5~"
                    # If you aren't using pgup, pgdown, lets use it for
                    # switching focus.
                    index = console.visuals.index(console.focus) - 1
                    for visual in console.visuals[index:.]
                        if can_obtain_focus(visual)
                            console.focus = visual
                            break
                elif console.focus and ch == "\x1b[6~"
                    index = console.visuals.index(console.focus) + 1
                    for visual in console.visuals[index.:]
                        if can_obtain_focus(visual)
                            console.focus = visual
                            break
                else
                    console.log("error", "unknown command: " ++ repr(ch))

# The console.logger is unable to be a .ref==true
# handle that would keep the eventloop alive.
# Surprisingly, this refresh loop can capture even
# the death gurgles of your program despite it. 
refresh_loop = (console, colors):
    try
        backpedal = "" # defers the backpedal so we can expect the cursor
                       # to sit in where we leave it.
        while true
            winsize = console.outfd.get_winsize()
            sketch = EtchySketchy(winsize.width, winsize.height, colors)
            sketch.out.append(backpedal)
            for visual in console.visuals
                if sketch.x != 0
                    sketch.append("\n")
                visual.refresh(sketch)
            sketch.out.append("\033[0J") # clear off the display from under the cursor.
                                         # as a precaution in case there is garbage there.
            if console.focus
                sketch.set_cursor_pos(console.focus.pos)
            console.outfd.write(sketch.out.build().utf8)
            entry = console.logger.wait()
            console.timer.start(console.refresh_interval)
            backpedal = sketch.backpedal()
            if entry.type == 'exit'
                # Clear because we don't want garbage to output.
                # Although we seem to get it anyway.
                console.outfd.write((backpedal ++ "\033[0J").utf8)
                exit(entry.value)
            elif entry.type == 'refresh'
                null
            else
                # Here we clear too, so we won't get garbage to stdout.
                console.outfd.write((backpedal ++ "\033[0J").utf8)
                backpedal = ""
                print_log_message(
                    entry.type, entry.value,
                    console.outfd, console.errfd)
    except Exception as error  # reveals the reason of failure.
        console.logger.close()
        raise error

print_log_message = (type, value, outfd, errfd):
    s = StringBuilder()
    if type == "error"
        outfd = errfd
        type = "info"
    if type == "exception"
        outfd = errfd
        s.append(format_traceback(value))
    elif type == "info"
        if isinstance(value, list)
            sp = ''
            for arg in value
                s.append(sp)
                s.append(format_value(arg))
                sp = ' '
        else
            s.append(format_value(value))
    else
        s.append(type)
        s.append(": ")
        s.append(format_value(value))
    s.append("\n")
    outfd.write(s.build().utf8)

format_value = (value):
    if isinstance(value, str)
        return value
    else
        return repr(value)

parse_ansi_stream = (stream):
    dec = Utf8Decoder()
    seq = ""
    for ch in dec(stream.read())
        if ch == "\x1b"
            seq ++= ch
            continue
        if seq == "\x1b" and ch == "[" 
            seq ++= ch
            continue
        if seq.startswith("\x1b[") and ch.is_digit()
            seq ++= ch
            continue
        yield seq ++ ch
        seq = ""

class EtchySketchy
    +init = (self, width, height, colors):
        self.x = 0
        self.y = 0
        self.width = width
        self.height = height
        self.out = StringBuilder()
        self.colors = colors

    get_cursor_pos = (self):
        return :object()
            x = self.x
            y = self.y

    set_cursor_pos = (self, pos):
        motion = cursor_motion(pos.x - self.x, pos.y - self.y)
        self.x = pos.x
        self.y = pos.y
        self.out.append(motion)

    backpedal = (self):
        return backpedal_motion(self.y)

    append = (self, text):
        for ch in text
            if ch == "\n"
                self.out.append("\033[K\n") # clear end of line.
            if ch == "\n" or self.x >= self.width
                self.y += 1
                self.x = 0
            else
                self.out.append(ch)
                self.x += 1

    color = (self, fg, bg=null):
        self.out.append("\033[")
        if bg
            self.out.append(self.colors(bg, 'bg'))
        self.out.append("m")
        self.out.append("\033[")
        if fg
            self.out.append(self.colors(fg, 'fg'))
        self.out.append("m")
    
    normal = (self):
        self.out.append("\033[0m")

# State of the art method for implementing a line editor in
# an ANSI-compliant terminal. We measure where the text
# lands to stay on the track.
cursor_motion = (x, y):
    out = StringBuilder()
    if y < 0
        out.append("\033["++(-y).to_string()++"A")
    if y > 0
        out.append("\033["++(-y).to_string()++"B")
    if x > 0
        out.append("\033["++(-x).to_string()++"C")
    if x < 0
        out.append("\033["++(-x).to_string()++"D")
    return out.build()

backpedal_motion = (y):
    # push above the terminal and clear the screen.
    out = StringBuilder()
    if y == 0
        out.append("\033["++y.to_string()++"G") # Absolute horizontal position.
    else
        out.append("\033["++y.to_string()++"F") # To the beginning of last line.
    return out.build()

can_obtain_focus = (visual):   # yes, we check it this way
    try                        # to determine it.
        visual.process
        return true
    except AttributeError as _
        return false

# This method of selecting colors is forwards-compatible
black   = vec3(0.0, 0.0, 0.0)
red     = vec3(0.5, 0.0, 0.0)
green   = vec3(0.0, 0.5, 0.0)
yellow  = vec3(0.5, 0.5, 0.0)
blue    = vec3(0.0, 0.0, 0.5)
magenta = vec3(0.5, 0.0, 0.5)
cyan    = vec3(0.0, 0.5, 0.5)
gray    = vec3(0.75, 0.75, 0.75)

darkgray      = vec3(0.5, 0.5, 0.5)
light_red     = vec3(1, 0, 0)
light_green   = vec3(0, 1, 0)
light_yellow  = vec3(1, 1, 0)
light_blue    = vec3(0, 0, 1)
light_magenta = vec3(1, 0, 1)
light_cyan    = vec3(0, 1, 1)
white         = vec3(1, 1, 1)

fg_ansi_palette = [
    object({color = black,         index = "30;22"}),
    object({color = red,           index = "31;22"}),
    object({color = green,         index = "32;22"}),
    object({color = yellow,        index = "33;22"}),
    object({color = blue,          index = "34;22"}),
    object({color = magenta,       index = "35;22"}),
    object({color = cyan,          index = "36;22"}),
    object({color = gray,          index = "37;22"}),
    object({color = darkgray,      index = "30;1"}),
    object({color = light_red,     index = "31;1"}),
    object({color = light_green,   index = "32;1"}),
    object({color = light_yellow,  index = "33;1"}),
    object({color = light_blue,    index = "34;1"}),
    object({color = light_magenta, index = "35;1"}),
    object({color = light_cyan,    index = "36;1"}),
    object({color = white,         index = "37;1"}),
]

bg_ansi_palette = [
    object({color = black,         index = "40"}),
    object({color = red,           index = "41"}),
    object({color = green,         index = "42"}),
    object({color = yellow,        index = "43"}),
    object({color = blue,          index = "44"}),
    object({color = magenta,       index = "45"}),
    object({color = cyan,          index = "46"}),
    object({color = gray,          index = "47"}),
]

legacy_ansi_colors = (color, mode="fg"):
    if mode == "fg"
        palette = fg_ansi_palette
    elif mode == "bg"
        palette = bg_ansi_palette
    else
        return ""
    closest = 100.0
    index = ""
    for entry in palette
        k = length(entry.color - color)
        if k < closest
            closest = k
            index = entry.index
    return index

# I have this for RGB ansi colors. Unfortunately
# too many terminals do not support them, so I have
# this unused here.
rgb_ansi_colors = (color, mode="fg"):
    s = StringBuilder()
    if mode == "fg"
        s.append("38;2")
    elif mode == "bg"
        s.append("48;2")
    else
        return ""
    s.append(int(color.x*255 + 0.5).to_string())
    s.append(";")
    s.append(int(color.y*255 + 0.5).to_string())
    s.append(";")
    s.append(int(color.z*255 + 0.5).to_string())
    return s.build()

default_options = :object()
    colors = legacy_ansi_colors
    refresh_interval = 0.1      # Once we'll get the Timer
                                # so that we can .ref=false, this is the
                                # shortest refresh interval we accept.
                                # Also, going to grab multiple objects
                                # from queue at once, before going to
                                # waiting.
