import api, ffi, platform

if platform.name == "win32"
    sdl = ffi.library("SDL2.dll", api.read_file("libSDL2", {}))
else
    sdl = ffi.library("libSDL2.so", api.read_file("libSDL2", {}))

class Window
    +init = (self, name, options={}):
        assert sdl.Init(sdl.INIT_VIDEO) == 0
            sdl.GetError()

        self.handle = sdl.CreateWindow(name,
            options.get("x", 0x1FFF0000),
            options.get("y", 0x1FFF0000),
            options.get("width",  512),
            options.get("height", 512),
            options.get("flags", sdl.WINDOW_SHOWN))
        assert self.handle, sdl.GetError()

        w = ffi.automem(ffi.int)
        h = ffi.automem(ffi.int)
        sdl.GetWindowSize(self.handle, w, h)
        self.width  = w.to
        self.height = h.to

        self.wsi = WSI(self.handle)

    close = (self):
        self.wsi.destroy()
        sdl.DestroyWindow(self.handle)
        self.handle = null
        sdl.Quit()

class WSI
    +init = (self, window):
        self.window = window
        self.surface = null
        self.vk = null
        self.instance = null

    instance_support = (self, vk, extensions):
        enable = ["VK_KHR_surface"]
        if "VK_KHR_xcb_surface" in extensions
            enable.append("VK_KHR_xcb_surface")
        else
            raise Exception("The app lacks swapchain instantiator for your platform.")
        return enable

    setup = (self, vk, instance):
        self.vk = vk
        self.instance = instance
        p_surface = ffi.automem(vk.SurfaceKHR)
        info = ffi.automem(sdl.SysWMinfo)
        info.version = {major=2, minor=0, patch=2}
        if sdl.GetWindowWMInfo(self.window, info) == 0
            raise Exception("GetWindowWMInfo failed")

        if info.subsystem == sdl.SYSWM_X11
            #VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000
            vk.createXcbSurfaceKHR(instance, {
                #sType = VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR
                connection = info.info.x11.display
                window = ffi.cast(info.info.x11.window, ffi.voidp)
            }, null, p_surface)
        else
            raise Exception("The app lacks swapchain instantiator for your platform.")
        self.surface = p_surface.to
        
    device_support = (self, vk, dev, extensions):
        if "VK_KHR_swapchain" not in extensions
            return null
        return ["VK_KHR_swapchain"]

    queue_support = (self, vk, dev, queueFamilyIndex):
        p_supported = ffi.automem(ffi.u32)
        vk.getPhysicalDeviceSurfaceSupportKHR(dev,
            queueFamilyIndex, self.surface, p_supported)
        return p_supported.to == vk.TRUE

    destroy = (self):
        if self.surface
            self.vk.destroySurfaceKHR(self.instance,
                self.surface, null)
            self.surface = null
