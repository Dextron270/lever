import api, ffi, platform

if platform.name == "win32"
    sdl = ffi.library("SDL2.dll", api.read_file("libSDL2", {}))
else
    sdl = ffi.library("libSDL2.so", api.read_file("libSDL2", {}))

sdl.Init(0)
on_exit(sdl.Quit)

init_on_demand = (flags):
    if sdl.WasInit(flags) == 0
        assert sdl.InitSubSystem(flags) == 0
            sdl.GetError()

class Window
    +init = (self, name, options={}):
        init_on_demand(sdl.INIT_VIDEO)

        # TODO: Figure out WINDOW_ALLOW_HIGHDPI
        self.handle = sdl.CreateWindow(name,
            options.get("x", 0x1FFF0000),
            options.get("y", 0x1FFF0000),
            options.get("width",  512),
            options.get("height", 512),
            options.get("flags", sdl.WINDOW_SHOWN))
        assert self.handle, sdl.GetError()

        w = ffi.automem(ffi.int)
        h = ffi.automem(ffi.int)
        sdl.GetWindowSize(self.handle, w, h)
        self.width  = w.to
        self.height = h.to

        self.wsi = WSI(self.handle)

    close = (self):
        self.wsi.destroy()
        sdl.DestroyWindow(self.handle)
        self.handle = null

    getDPI = (self):
        display_id = sdl.GetWindowDisplayIndex(self.handle)
        ddpi = ffi.automem(ffi.float)
        hdpi = ffi.automem(ffi.float)
        vdpi = ffi.automem(ffi.float)
        assert sdl.GetDisplayDPI(display_id, ddpi, hdpi, vdpi) == 0
        return (ddpi = ddpi.to,
            xdpi = hdpi.to,
            ydpi = vdpi.to,
            ddpcm = ddpi.to / 2.54,
            xdpcm = hdpi.to / 2.54,
            ydpcm = vdpi.to / 2.54)

class WSI
    +init = (self, window):
        self.window = window
        self.surface = null
        self.vk = null
        self.instance = null

    instance_support = (self, vk, extensions):
        enable = ["VK_KHR_surface"]
        if "VK_KHR_xcb_surface" in extensions
            enable.append("VK_KHR_xcb_surface")
        else
            raise Exception("The app lacks swapchain instantiator for your platform.")
        return enable

    setup = (self, vk, instance):
        self.vk = vk
        self.instance = instance
        p_surface = ffi.automem(vk.SurfaceKHR)
        info = ffi.automem(sdl.SysWMinfo)
        info.version = {major=2, minor=0, patch=2}
        if sdl.GetWindowWMInfo(self.window, info) == 0
            raise Exception("GetWindowWMInfo failed")

        if info.subsystem == sdl.SYSWM_X11
            #VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000
            vk.createXcbSurfaceKHR(instance, {
                #sType = VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR
                connection = info.info.x11.display
                window = ffi.cast(info.info.x11.window, ffi.voidp)
            }, null, p_surface)
        else
            raise Exception("The app lacks swapchain instantiator for your platform.")
        self.surface = p_surface.to
        self.instance.add_ref(self)
        
    device_support = (self, vk, dev, extensions):
        if "VK_KHR_swapchain" not in extensions
            return null
        return ["VK_KHR_swapchain"]

    queue_support = (self, vk, dev, queueFamilyIndex):
        p_supported = ffi.automem(ffi.u32)
        vk.getPhysicalDeviceSurfaceSupportKHR(dev,
            queueFamilyIndex, self.surface, p_supported)
        return p_supported.to == vk.TRUE

    extent = property();
        get = (self):
            w = ffi.automem(ffi.int)
            h = ffi.automem(ffi.int)
            sdl.GetWindowSize(self.window, w, h)
            return {width=w.to, height=h.to}

    destroy = (self):
        if self.surface
            self.instance.discard_ref(self)
            self.vk.destroySurfaceKHR(self.instance,
                self.surface, null)
            self.surface = null

AUDIO_F32 = 0x8120

class StereoAudio
    +init = (self, out):
        init_on_demand(sdl.INIT_AUDIO)
        self.out = out

        have = ffi.automem(sdl.AudioSpec)
        self.freq = 48000
        self.dt = 1 / self.freq
        self.t = 0.0

        self.fill_cb = ffi.callback(sdl.AudioCallback, self.fill_audio_buffer)
        self.dev = sdl.OpenAudioDevice(null, 0, {
            freq = self.freq
            format = AUDIO_F32
            channels = 2
            samples = 4096
            callback = self.fill_cb
        }, have, 0)

    fill_audio_buffer = (self, _, stream, length):
        data = ffi.cast(stream, ffi.pointer(ffi.float))
        length = int(length / ffi.sizeof(ffi.float))
        if self.out == null
            for i in range(0, length)
                data[i+0] = 0.0
        else
            try
                for i in range(0, length, 2)
                    value = self.out(self.t, self.dt)
                    data[i+0] = value.left
                    data[i+1] = value.right
                    self.t += self.dt
            except Exception as e
                self.out = null
                raise e

    play = (self):
        if self.dev
            sdl.PauseAudioDevice(self.dev, 0)

    stop = (self):
        if self.dev
            sdl.PauseAudioDevice(self.dev, 1)

    close = (self):
        if self.dev
            sdl.CloseAudioDevice(self.dev)
            self.dev = null

event = ffi.automem(sdl.Event)
poll = ():
    while sdl.PollEvent(event) != 0
        yield event
