import optable

export = (fn):
    code = fn.code
    spec = fn.spec

    argn = []
    for i in range(spec.argc + spec.optional)
        argn.append(Local("arg" ++ i.to_string())) #spec.varnames[i]))

    assert not spec.is_variadic
        "not translating variadic"
    assert code.excs.length == 0
        "not translating code with exceptions"
    assert not code.is_generator
        "not translating generators"

    ssa = QuickSSA()

    # Jump labels have to extracted from the current
    # bytecode, we may want to reconsider this.
    jump_labels = {0: ssa.new_block()}
    pc = 0
    while pc < code.length
        cc = (code[pc] & 255) + 1
        opcode = code[pc] >> 8
        op = optable.dec[opcode]
        types = argl(op[2], op[3])
        retv = op[1]
        for i in range(1+int(retv), cc)
            tn = types.next()
            if tn == "block"
                jump_labels[code[pc+i]] = ssa.new_block()
        pc += cc

    for i in range(argn.length)
        ssa.writevar(jump_labels[0], i, argn[i])

    block = null
    pc = 0
    while pc < code.length
        if pc in jump_labels
            if block
                block.branch("jump", jump_labels[pc])
            block = jump_labels[pc]
        cc = (code[pc] & 255) + 1
        opcode = code[pc] >> 8
        op = optable.dec[opcode]
        name = op[0]
        retv = op[1]
        types = argl(op[2], op[3])

        assert name != "next", "'next' instruction needs special treatment"
        assert name != "yield", "'yield' instruction needs special treatment"
        assert name != "raise", "'raise' instruction needs special treatment"
        assert name != "assert", "'assert' instruction needs special treatment"
        assert name != "getupv", "'getupv' instruction needs special treatment"
        assert name != "func", "'func' instruction needs special treatment"
        assert name != "loglob", "'loglob' instruction illegal"
        assert name != "setglob", "'setglob' instruction illegal"
        assert name != "setupv", "'setupv' instruction illegal"
        if name == "move"
            ssa.writevar(block, code.localc + code[pc+1], 
                ssa.readvar(block, code.localc + code[pc+2]))
            pc += cc
            continue

        args = []
        for i in range(1+int(retv), cc)
            tn = types.next()
            if tn == "string" or tn == "constant"
                args.append( code.constant(code[pc+i]) )
            elif tn == "vreg"
                args.append( ssa.readvar(block, code.localc + code[pc+i]) )
            elif tn == "block"
                args.append( jump_labels[code[pc+i]] )
            else
                args.append( code[pc+i] )

        if name == "jump"
            block.branch("jump", args...)
        elif name == "cond"
            block.branch("cond", args...)
        elif name == "return"
            block.branch("ret", args...)
        elif name == "getloc"
            ins = ssa.readvar(block, args[0])
        elif name == "setloc"
            ssa.writevar(block, args[0], args[1])
        elif name == "getglob"
            #ins = ssa.constant(getattr(code.module, args[0]))
            ins = block.expr("getattr", 
                ssa.constant(code.module),
                ssa.constant(args[0]))

        elif name == "constant"
            ins = ssa.constant(args[0])
        else
            group = []
            for a in args
                if isinstance(a, [str, int])
                    a = ssa.constant(a)
                group.append(a)
            ins = block.expr(name, group...)
        if retv
            ssa.writevar(block, code.localc + code[pc+1], ins)
        pc += cc

    blocks = reverse_postorder_traverse(jump_labels[0])
    ssa.seal_all(blocks)

    return object();
        args = argn
        blocks = blocks






# https://pp.info.uni-karlsruhe.de/uploads/publikationen/braun13cc.pdf
# Simple and Efficient Construction of Static
# Single Assignment Form

# Notice the Algorithm 5. is not implemented.
# It produces minimal SSA form for irreducible control flow.
# SCC = Strongly connected components
class QuickSSA
    +init = (self):
        self.env = {}
        self.constants = {}
        self.incomplete_phi = {}
        self.sealed = set()

    new_block = (self):
        block = Block()
        self.env[block] = {}
        self.incomplete_phi[block] = {}
        return block

    constant = (self, value):
        if value in self.constants
            return self.constants[value]
        result = Const(value)
        self.constants[value] = result
        return result

    writevar = (self, block, var, value):
        self.env[block][var] = value

    readvar = (self, block, var):
        defs = self.env[block]
        if var in defs
            return defs[var]
        elif not block in self.sealed
            phi = Phi(block, {})
            self.incomplete_phi[block][var] = phi
            defs[var] = phi
            return phi
        elif block.pred.length == 1
            val = self.readvar(iter(block.pred).next(), var)
        else
            val = Phi(block, {})
            defs[var] = val
            val = self.add_phi_operands(var, val)
            defs[var] = val
        return val

    seal_all = (self, blocks):
        self.sealed.update(blocks)
        for block in blocks
            self.seal(block)

    seal = (self, block):
        if block in self.incomplete_phi
            self.sealed.add(block)
            i_phi = self.incomplete_phi.pop(block)
            for var in i_phi
                phi = i_phi[var]
                self.add_phi_operands(var, phi)

    add_phi_operands = (self, var, phi):
        for pred in phi.block.pred
            phi[pred] = val = self.readvar(pred, var)
        return try_remove_trivial_phi(phi)

try_remove_trivial_phi = (phi):
    same = null
    for op in phi.input.values()
        if op == same or op == phi
            continue # unique value or self reference
        if same
            return phi # Merges at least two values
        same = op
    if same == null
        same = Local("undef") # Phi is unreachable or in start block
    users = set(phi.users)
    users.discard(phi)
    phi.replace_by(same)
    for use in users
        if isinstance(use, Phi)
            try_remove_trivial_phi(use)
    if isinstance(same, Phi)
        try_remove_trivial_phi(same)
    return same

reverse_postorder_traverse = (entry):
    visited = set()
    blocks = []
    dfs = (block):
        if block in visited
            return
        visited.add(block)
        for op in block.code
            for arg in reversed(op.args)
                if isinstance(arg, Block)
                    dfs(arg)
        blocks.append(block)
    dfs(entry)
    blocks.reverse()
    return blocks

class Operand
    replace_by = (self, other):
        if self == other # To avoid the accidents.
            return
        for user in list(self.users)
            user.rewrite(self, other)

class Block extends Operand
    +init = (self):
        self.code = []
        self.closed = false
        self.users = set()
        self.pred = set()

    branch = (self, name, args...):
        if self.closed
            return
        for arg in args
            if isinstance(arg, Block)
                arg.pred.add(self)
        op = Op(name, args, true, true)
        self.code.append(op)
        self.closed = true

    stmt = (self, name, args...):
        if self.closed
            return
        op = Op(name, args, true, false)
        op.attach(self)
        self.code.append(op)

    expr = (self, name, args...):
        if self.closed
            return
        op = Op(name, args, false, false)
        op.attach(self)
        self.code.append(op)
        return op

class Const extends Operand
    +init = (self, value):
        self.value = value
        self.users = set()
        self.type = null

class Local extends Operand
    +init = (self, name):
        self.name = name
        self.users = set()
        self.type = null

class Op extends Operand
    +init = (self, name, args, stmt=false, br=false):
        self.name = name
        self.args = args
        self.stmt = stmt
        self.br = br
        self.users = set()
        self.type = null
        for arg in args
            arg.users.add(self)

        self.block = null

    rewrite = (self, this, that):
        for i in range(self.args.length)
            if self.args[i] == this
                this.users.discard(self)
                that.users.add(self)
                self.args[i] = that

    match_partial = (self, name, argt):
        return false if argt.length > self.args.length
        return false if self.name != name
        for i in range(argt.length)
            if not isinstance(self.args[i], argt[i])
                return false
        return true

    match = (self, name, argt):
        return false if argt.length != self.args.length
        return false if self.name != name
        for i in range(self.args.length)
            if not isinstance(self.args[i], argt[i])
                return false
        return true

    attach = (self, block):
        assert not self.block, "op already used in a block"
        for arg in self.args
            arg.users.add(self)
        self.block = block

    detach = (self):
        assert self.block, "op not present in any block"
        for arg in self.args
            arg.users.discard(self)
        block = self.block
        self.block = null
        return block

    expand = (self, expansion, result=null):
        self.replace_by(result)
        block = self.detach()

        index = block.code.index(self)
        block.code = block.code[.: index] ++ expansion ++ block.code[index + 1 .:]
        for op in expansion
            op.attach(block)

class Phi extends Operand
    +init = (self, block, input):
        self.block = block
        self.input = input
        self.users = set()
        self.type = null
        for val in input.values()
            val.users.add(self)

    rewrite = (self, this, that):
        for i in self.input
            if self.input[i] == this
                this.users.discard(self)
                that.users.add(self)
                self.input[i] = that

    +setitem = (self, pred, value):
        if pred in self.input
            self.input[pred].users.discard(self)
        value.users.add(self)
        self.input[pred] = value

    +getitem = (self, pred):
        return self.input[pred]

# print_function = (func):
#     print(func.restype, func.label, func.argtypes)
#     for ebb in func.ebbs
#         print_ebb(ebb)
# 
# print_ebb = (ebb):
#     print(ebb.label, iter_repr(ebb.input) ++ ":")
#     for op in ebb
#         print(" ", op, "=", op.name, op.args...)
#     if ebb.exit
#         print(" ", ebb.exit.name, ebb.exit.args...)
#     else
#         print("  <ebb not terminated>")
# 
# class Function
#     +init = (self, label, argtypes, restype):
#         self.label = label
#         self.argtypes = argtypes
#         self.restype = restype
#         self.entry = EBB("entry")
#         self.ebbs = [self.entry]
# 
#     new_ebb = (self, label="L" ++ self.ebbs.length.to_string()):
#         ebb = EBB(label)
#         self.ebbs.append(ebb)
#         return ebb
# 
#     sort_reverse_postorder = (self):
#         self.ebbs = traverse_postorder(self.entry)
#         self.ebbs.reverse()
# 
# class EBB
#     +init = (self, label):
#         self.label = label
#         self.input = {}
#         self.code = []
#         self.exit = null
# 
#     arg = (self, label):
#         arg = self.input.get(label)
#         if not arg
#             self.input[label] = arg = Arg(label)
#         return arg
# 
#     op = (self, name, args, io=false):
#         op = Op(name, args, io)
#         if not self.exit
#             op.index = self.code.length
#             self.code.append(op)
#         return op
# 
#     rcond = (self, cond, values...):
#         return self.op("rcond",
#             [cond] ++ values)
# 
#     jcond = (self, cond, ebb, output={}):
#         return self.op("jcond",
#             [cond, Exit(ebb, output)])
# 
#     jump = (self, ebb, output={}):
#         exit = Op("jump", [Exit(ebb, output)])
#         if not self.exit
#             self.exit = exit
#         return exit
# 
#     ret = (self, values...):
#         exit = Op("return", values)
#         if not self.exit
#             self.exit = exit
#         return exit
# 
#     unreachable = (self):
#         exit = Op("unreachable", [])
#         if not self.exit
#             self.exit = exit
#         return exit
# 
#     +iter = (self):
#         return iter(self.code)
# 
# class Arg
#     +init = (self, label):
#         self.label = label
#         self.t = null
# 
#     +repr = (self):
#         if isinstance(self.label, str)
#             return self.label
#         return repr(self.label)
# 
# class Op
#     +init = (self, name, args, io=false):
#         self.name = name
#         self.args = args
#         self.t = null
#         self.io = io
#         self.index = -1
# 
#     +repr = (self):
#         return "v" ++ self.index.to_string()
# 
# class Exit
#     +init = (self, ebb, output={}):
#         self.ebb = ebb
#         self.output = output
# 
#     +repr = (self):
#         return reprp(self.ebb.label) ++ iter_pairs(self.output)
# 
# iter_pairs = (obj):
#     pairs = []
#     for item in obj.items()
#         pairs.append(
#             reprp(item[0]) ++ "=" ++ reprp(item[1]))
#     return iter_repr(pairs)
# 
# iter_repr = (seq):
#     out = []
#     for x in seq
#         out.append(reprp(x))
#     return "(" ++ ", ".join(out) ++ ")"
# 
# reprp = (item):
#     if isinstance(item, str)
#         return item
#     else
#         return repr(item)
# 
# traverse_postorder = (entry, out=[], visit=set()):
#     visit.add(entry)
#     for op in entry
#         for arg in op.args
#             if isinstance(arg, Exit)
#                 if arg.ebb not in visit
#                     traverse_postorder(arg.ebb, out, visit)
#     for arg in entry.exit.args
#         if isinstance(arg, Exit)
#             if arg.ebb not in visit
#                 traverse_postorder(arg.ebb, out, visit)
#     out.append(entry)
#     return out
# 
# # Convert Lever bytecode into an EBB function.
# export = (fn):
#     code = fn.code
#     spec = fn.spec
#     argt = []
#     argn = []
#     for i in range(spec.argc + spec.optional)
#         argt.append('any')
#         argn.append(spec.varnames[i])
#     assert not spec.is_variadic,  "not translating variadic functions yet"
#     assert code.excs.length == 0, "not translating exceptions yet"
#     assert not code.is_generator, "not translating generators yet"
#     func = Function(fn.doc.name, argt, 'any')
#     func.argnames = argn
# 
#     # print(code.regc)
# 
#     # We have to extract the jump labels by pre-pass.
#     # It can be worthwhile to reconsider the bytecode later on.
#     jump_labels = {0: func.entry}
#     pc = 0
#     while pc < code.length
#         cc = (code[pc] & 255) + 1
#         opcode = code[pc] >> 8
#         op = optable.dec[opcode]
#         types = argl(op[2], op[3])
#         retv = op[1]
#         for i in range(1+int(retv), cc)
#             tn = types.next()
#             if tn == "block"
#                 jump_labels[code[pc+i]] = null
#         pc += cc
# 
#     label_pc = list(jump_labels.keys())
#     label_pc.sort()
#     for pc in label_pc
#         if pc != 0
#             jump_labels[pc] = func.new_ebb()
# 
#     block = func.entry
#     scope = {}
#     lookup = (index):
#         if index in scope
#             return scope[index]
#         else
#             assert isinstance(index, int), index
#             return block.arg(index)
#     pc = 0
#     while pc < code.length
#         if pc in jump_labels
#             scope = {}
#             block = jump_labels[pc]
# 
#         cc = (code[pc] & 255) + 1
#         opcode = code[pc] >> 8
#         op = optable.dec[opcode]
#         name = op[0]
#         retv = op[1]
#         types = argl(op[2], op[3])
# 
#         # Another operation that feels lame special case in the retrospect.
#         if name == "move"
#             scope[code.localc + code[pc+1]] = lookup(code[pc+2])
#             pc += cc
#             continue
# 
#         args = []
#         for i in range(1+int(retv), cc)
#             tn = types.next()
#             if tn == "string" or tn == "constant"
#                 args.append( code.constant(code[pc+i]) )
#             elif tn == "vreg"
#                 args.append( lookup(code.localc + code[pc+i]) )
#             elif tn == "block"
#                 args.append( jump_labels[code[pc+i]] )
#             else
#                 args.append( code[pc+i] )
# 
#         assert name != "next", "'next' instruction needs special treatment"
#         assert name != "yield", "'yield' instruction needs special treatment"
#         assert name != "raise", "'raise' instruction needs special treatment"
#         assert name != "assert", "'assert' instruction needs special treatment"
#         assert name != "getupv", "'getupv' instruction needs special treatment"
#         assert name != "func", "'func' instruction needs special treatment"
#         assert name != "loglob", "'loglob' instruction illegal"
#         assert name != "setglob", "'setglob' instruction illegal"
#         assert name != "setupv", "'setupv' instruction illegal"
#         if name == "jump"
#             block.jump(args[0], dict(scope))
#         elif name == "cond"
#             block.jcond(args[0], args[1], dict(scope))
#             block.jump(args[2], dict(scope))
#         elif name == "return"
#             block.ret(args[0])
#         elif name == "getloc"
#             ins = lookup(args[0])
#         elif name == "setloc"
#             scope[args[0]] = args[1]
#         elif name == "getglob"
#             ins = block.op("constant", [getattr(code.module, args[0])], true)
#         else
#             ins = block.op(name, args, true)
#         if retv
#             scope[code.localc + code[pc+1]] = ins
# 
#         pc += cc
# 
#     simplify(func)
#     return func
# 
# The print bytecode is also using the argl. This is meant for the quick
# checking of the bytecode of a function.
print_bytecode = (fn):
    code = fn.code
    pc = 0
    while pc < code.length
        cc = (code[pc] & 255) + 1
        opcode = code[pc] >> 8
        out = [pc.to_string().rjust(4, '0') ++ ":"]
        op = optable.dec[opcode]
        retv = op[1]
        if retv
            out.append(code[pc+1])
            out.append("=")
        out.append(op[0])
        types = argl(op[2], op[3])
        for i in range(1+int(retv), cc)
            tn = types.next()
            if tn == "string" or tn == "constant"
                out.append( repr(code.constant(code[pc+i])) )
            elif tn == "vreg"
                out.append( code[pc+i] )
            else # on block you could do some pretty printing.
                out.append( code[pc+i].to_string() ++ "(" ++ tn ++ ")" )
        print(out...)
        pc += cc

# Used by the export(fn) function to decode instructions.
argl = (args, varg):
    for obj in args
        yield obj
    while true
        yield varg

# # The simplify drops unreachable code and calculates the
# # variable flow.
# simplify = (func):
#     visited = set()
#     edges = []
#     ebbs = []
# 
#     dfs = (ebb):
#         if ebb in visited
#             return
#         visited.add(ebb)
#         for op in ebb.code ++ [ebb.exit]
#             for arg in op.args
#                 if isinstance(arg, Exit)
#                     dfs(arg.ebb)
#                     edges.append([ebb, arg])
#         ebbs.append(ebb)
#     dfs(func.entry)
# 
#     changed = true
#     while changed
#         changed = false
#         for edge in edges
#             ebb = edge[0]
#             exit = edge[1]
#             for key in exit.ebb.input
#                 if key not in exit.output
#                     exit.output[key] = ebb.arg(key)
#                     changed = true
#     # It's this simple to trim away the excess outputs once
#     # the fixed point in inputs have been reached.
#     for edge in edges
#         exit = edge[1]
#         for key in list(exit.output)
#             if key not in exit.ebb.input
#                 exit.output.pop(key)
# 
#     ebbs.reverse()
#     func.ebbs = ebbs


print_blocks = (blocks):
    L = 0
    v = 0
    names = {}
    phi_sets = {}
    for block in blocks
        names[block] = "L" ++ L.to_string()
        phi_sets[block] = set()
        L += 1
        for op in block.code
            if op.stmt
                continue
            names[op] = "v" ++ v.to_string()
            v += 1
    
    find_phi = (phi):
        if not isinstance(phi, Phi)
            return
        if phi in names
            return
        names[phi] = "v" ++ names.length.to_string()
        if phi.block in phi_sets
            phi_sets[phi.block].add(phi)
        for arg in phi.input.values()
            find_phi(arg)

    for block in blocks
        for op in block.code
            for arg in op.args
                find_phi(arg)

    for block in blocks
        print(names[block] ++ ":")
        for phi in phi_sets[block]
            operands = []
            for pred in phi.input
                operands.append( "(" ++ names.get(pred, "L?") ++ " " ++
                    repr_arg(phi.input[pred], names) ++ ")" )
            print(" ", names[phi], "=", phi_symbol, operands...)

        for op in block.code
            args = []
            for arg in op.args
                args.append(repr_arg(arg, names))
            if op.stmt
                print(" ", op.name, args...)
            else
                print(" ", names[op], "=", op.name, args...)
    # Returned so that you can annotate types for stuff.
    return [phi_sets, names]

repr_arg = (arg, names):
    if arg in names
        return names[arg]
    elif isinstance(arg, Const)
        if isinstance(arg.value, multimethod)
            return "<multimethod " ++ repr(arg.value.doc.name) ++ ">"
        return repr(arg.value)
    elif isinstance(arg, Local)
        return arg.name
    else
        return repr(arg)

phi_symbol = "ф"

