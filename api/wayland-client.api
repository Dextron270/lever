(event_queue_destroy             = void         wl_event_queue_destroy              event_queue*)
(proxy_marshal_array             = void         wl_proxy_marshal_array              proxy*  uint32  argument*)
(proxy_create                    = proxy*       wl_proxy_create                     proxy*  interface*)
(proxy_destroy                   = void         wl_proxy_destroy                    proxy*)  
(proxy_add_listener              = int          wl_proxy_add_listener               proxy*  implementation*  void*)
(proxy_get_listener              = void*        wl_proxy_get_listener               proxy*)  
(proxy_add_dispatcher            = int          wl_proxy_add_dispatcher             proxy*  dispatcher_func  void*  void*)
(proxy_set_user_data             = void         wl_proxy_set_user_data              proxy*  void*)
(proxy_get_user_data             = void*        wl_proxy_get_user_data              proxy*)  
(proxy_get_id                    = uint32       wl_proxy_get_id                     proxy*)  
(proxy_get_class                 = char*        wl_proxy_get_class                  proxy*)  
(proxy_set_queue                 = void         wl_proxy_set_queue                  proxy*  event_queue*)
(proxy_marshal_array_constructor = proxy*       wl_proxy_marshal_array_constructor  proxy*  uint32  argument*  interface*)
(display_connect                 = display*     wl_display_connect                  char*)
(display_connect_to_fd           = display*     wl_display_connect_to_fd            int)
(display_disconnect              = void         wl_display_disconnect               display*)
(display_get_fd                  = int          wl_display_get_fd                   display*)
(display_dispatch                = int          wl_display_dispatch                 display*)
(display_dispatch_queue          = int          wl_display_dispatch_queue           display*  event_queue*)
(display_dispatch_queue_pending  = int          wl_display_dispatch_queue_pending   display*  event_queue*)
(display_dispatch_pending        = int          wl_display_dispatch_pending         display*)
(display_get_error               = int          wl_display_get_error                display*)
(display_flush                   = int          wl_display_flush                    display*)
(display_roundtrip               = int          wl_display_roundtrip                display*)
(display_create_queue            = event_queue* wl_display_create_queue             display*)
(display_prepare_read_queue      = int          wl_display_prepare_read_queue       display*  event_queue*)
(display_prepare_read            = int          wl_display_prepare_read             display*)
(display_cancel_read             = void         wl_display_cancel_read              display*)
(display_read_events             = int          wl_display_read_events              display*)
(log_set_handler_client          = void         wl_log_set_handler_client           log_func)

(implementation = (function void))
(display        = opaque)
(proxy          = opaque)
(event_queue    = opaque)

(message = struct
    (name      = char*)
    (signature = char*)
    (types     = interface**))

(interface = struct
    (name         = char*)
    (version      = int)
    (method_count = int)
    (methods      = message*)
    (event_count  = int)
    (events       = message*))

(list_init        = void wl_list_init         list*)
(list_insert      = void wl_list_insert       list*  list*)
(list_remove      = void wl_list_remove       list*)
(list_length      = int  wl_list_length       list*)
(list_empty       = int  wl_list_empty        list*)
(list_insert_list = void wl_list_insert_list  list*  list*)

(list = struct
    (prev = list*)
    (next = list*))

(array_init    = void  wl_array_init    array*)
(array_release = void  wl_array_release array*)
(array_add     = void* wl_array_add     array*, size)
(array_copy    = int   wl_array_copy    array*, array*)

(array = struct
    (size  = size)
    (alloc = size)
    (data  = void*))

(argument = union
    (i = int32)
    (u = uint32)
    (f = fixed)
    (s = char*)
    (o = object*)
    (n = uint32)
    (a = array)
    (h = int32))

(fixed = int32)

(dispatcher_func = function int   void* void* uint32 message* argument*)
(log_func        = function void  char* va_list)

(VERSION_MAJOR = 1)
(VERSION_MINOR = 4)
(VERSION_MICRO = 0)
(VERSION = "1.4.0")
