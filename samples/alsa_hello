# According to the original source: http://users.suse.com/~mana/alsa090_howto.html
# This thing should play a saw.
# I haven't heard anything because it says "device busy"
# I got it to run on "hw:0,1" though.

api = {import}("api")
ffi = {import}("ffi")
automem = ffi.automem
pointer = ffi.pointer

main := ():
    snd = api.open("libasound.so")

    pcm_handle = automem(pointer(snd.pcm_t))
    hw_params = automem(pointer(snd.pcm_hw_params_t))

    err = snd.pcm_open(pcm_handle, "plughw:0,0", snd.PCM_STREAM_PLAYBACK, 0)
    if err < 0
        print("cannot open audio:", snd.strerror(err).str)
        assert err >= 0

    err = snd.pcm_hw_params_malloc(hw_params)
    assert err >= 0

    err = snd.pcm_hw_params_any(pcm_handle.to, hw_params.to)
    assert err >= 0

    err = snd.pcm_hw_params_set_access(pcm_handle.to, hw_params.to,
        snd.PCM_ACCESS_RW_INTERLEAVED)
    assert err >= 0

    err = snd.pcm_hw_params_set_format(pcm_handle.to, hw_params.to,
        snd.PCM_FORMAT_S16_LE)
    assert err >= 0 

    exact_rate = automem(snd.int)
    exact_rate.to = 44100
    period_size = 8192
    periods = 2
    num_frames = 2

    err = snd.pcm_hw_params_set_rate_near(pcm_handle.to, hw_params.to,
        exact_rate, null)
    assert err >= 0

    err = snd.pcm_hw_params_set_channels(pcm_handle.to, hw_params.to, 2)
    assert err >= 0

    err = snd.pcm_hw_params_set_periods(pcm_handle.to, hw_params.to, periods, 0)
    assert err >= 0

    err = snd.pcm_hw_params_set_buffer_size(pcm_handle.to, hw_params.to,
        (period_size * periods) >> 2)
    assert err >= 0

    err = snd.pcm_hw_params(pcm_handle.to, hw_params.to)
    assert err >= 0

    data = automem(snd.char, period_size)
    frames = period_size >> 2

    l1 = 0
    while l1 < 100
        l2 = 0
        while l2 < num_frames
            s1 = (l2 % 128) * 100 - 5000
            s2 = (l2 % 256) * 100 - 5000
            data[4*l2] = s1
            data[4*l2+1] = s1 >> 8
            data[4*l2+2] = s2
            data[4*l2+3] = s2 >> 8
            l2 = l2 + 1
        pcmreturn = snd.pcm_writei(pcm_handle.to, data, frames)
        while pcmreturn < 0
            snd.pcm_prepare(pcm_handle.to)
            print("buffer underrun")
            pcmreturn = snd.pcm_writei(pcm_handle.to, data, frames)
        l1 = l1 + 1

    snd.pcm_drain(pcm_handle.to)
