api = {import}("api")
automem = {import}("ffi").automem

sdl = api.open("libSDL.so")
rect = automem(sdl.Rect)

main := ():
    if sdl.Init(sdl.INIT_EVERYTHING) != 0
        print("error")
        exit()

    game = object()
    game.active = false
    game.speed = 1
    game.score = 0
    game.running = true
    game.reset_round = false

    ball = object()
    ball.x = 50
    ball.y = 50
    ball.xv = game.speed
    ball.yv = game.speed

    left_paddle = object()
    left_paddle.y = 0
    left_paddle.up = false
    left_paddle.down = false

    right_paddle = object()
    right_paddle.y = 190
    right_paddle.up = false
    right_paddle.down = false

    sdl.EnableUNICODE(1)
    sdl.ShowCursor(0)

    screen = sdl.SetVideoMode(320, 240, 32,
        sdl.HWSURFACE | sdl.DOUBLEBUF)

    event = automem(sdl.Event)
    was = sdl.GetTicks()
    while game.running
        # Input
        while 1 == sdl.PollEvent(event)
            if event.type == sdl.QUIT
                return quit()
            if event.type == sdl.KEYDOWN
                keyboard_event(event.key, game,
                    left_paddle, right_paddle)
            if event.type == sdl.KEYUP
                keyboard_event(event.key, game,
                    left_paddle, right_paddle)

        # Game Mechanics
        now = sdl.GetTicks()
        dt = now - was
        was = now
        sdl.Delay(max(15-dt, 0))

        if game.reset_round and -8 <= game.score and game.score <= 8
            sdl.Delay(500)
            game.reset_round = false
            ball.x = screen.w/2 - 5
            ball.y = screen.h/2 - 5
        elif game.reset_round
            sdl.Delay(1500)
            game.reset_round = false
            game.score = 0
            ball.x = screen.w/2 - 5
            ball.y = screen.h/2 - 5

        paddle_motion(left_paddle, game.speed)
        paddle_motion(right_paddle, game.speed)

        if game.active
            ball.x = ball.x + ball.xv
            ball.y = ball.y + ball.yv

        if ball.x >= 300 and (
            right_paddle.y - 10 < ball.y and ball.y < right_paddle.y + 40)
            ball.xv = -game.speed
            game.speed = game.speed + 1
        elif ball.x <= 10 and (
            left_paddle.y - 10 < ball.y and ball.y < left_paddle.y + 40)
            ball.xv = game.speed
            game.speed = game.speed + 1
        elif ball.x >= 310
            game.speed = 1
            game.reset_round = true
            ball.xv = -game.speed
            game.score = game.score - 1
        elif ball.x <= 0
            game.speed = 1
            reset_round = true
            ball.xv = game.speed
            game.score = game.score + 1
        elif ball.y >= 220
            ball.yv = -game.speed
        elif ball.y <= 0
            ball.yv = game.speed

        # Rendering
        fill(screen, 0, 0, screen.w, screen.h, 0, 0, 0)
        fill(screen, screen.w/2, 0, 1, screen.h, 20, 20, 20)

        i = game.score
        while i > 0
            fill(screen, i*10 + (screen.w/2), 10, 5, 5, 100, 185, 100)
            i = i - 1
        while i < 0
            fill(screen, i*10 + (screen.w/2), 10, 5, 5, 100, 185, 100)
            i = i + 1

        fill(screen, 0,    left_paddle.y, 10, 50, 10, 185, 10)
        fill(screen, 310, right_paddle.y, 10, 50, 10, 185, 10)
        fill(screen, ball.x, ball.y, 10, 10, 185, 185, 10)

        sdl.Flip(screen)
    return quit()

paddle_motion = (paddle, speed):
    if paddle.up
        paddle.y = max(0, paddle.y - speed)
    if paddle.down
        paddle.y = min(190, paddle.y + speed)

keyboard_event = (key, game, left_paddle, right_paddle):
    keysym = key.keysym
    game.active = true
    if keysym.scancode == 9 or keysym.scancode == 28
        game.running = false
    if keysym.scancode == 103 or keysym.scancode == 59
        left_paddle.up = (key.state == 1)
    if keysym.scancode == 108 or keysym.scancode == 47
        left_paddle.down = (key.state == 1)
    if keysym.scancode == 57 or keysym.scancode == 111
        right_paddle.up = (key.state == 1)
    if keysym.scancode == 56 or keysym.scancode == 116
        right_paddle.down = (key.state == 1)

fill = (screen, x, y, w, h, r, g, b):
    rect.x = x
    rect.y = y
    rect.w = w
    rect.h = h
    rgb = sdl.MapRGB(screen.format, r, g, b)
    sdl.FillRect(screen, rect, rgb)

quit = ():
    sdl.Quit()
