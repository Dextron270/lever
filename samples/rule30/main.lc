import api, ffi, fs, rule30, platform

win32 = (platform.name == "win32")
if win32
    sdl = ffi.library("SDL2.dll", api.read_file("libSDL2", {}))
else
    sdl = ffi.library("libSDL2.so", api.read_file("libSDL2", {}))

AUDIO_F32 = 0x8120

sg = rule30.Generator(12)
sg.now[int(random()*(sg.now.length-1) + 0.5)] = 1

make_sound_generator = ():
    changed = true
    t0 = 0.0

    schedule(():
        while true
            sleep((60 / 150) / 2 + sin(random()*tau) * 0.001)
            changed := true
            sg.next()
            rule30.print_state(sg.now))

    saw = (t):
        return (pi - t % tau) / pi

    sqr = (t):
        return int(pi < (t % tau)) * 2 - 1

    tri = (t):
        return abs(1 - (t % tau)/pi) * 2 - 1

    gen = [sqr, sin, tri, saw]

    return (t):
        volume = pow(10, -1.0)
        out = 0.0
        for i in range(sg.now.length)
            k = sg.now[i]
            if k > 0
                out += gen[k-1](t*tau*(440*pow(2, (i*3.05 - 40)/12)))
                #out += gen[k-1](t*tau*(80 + i * 50.0))

        if changed
            t0 := t
            changed := false
        u = clamp((t - t0) / 0.1, 0.0, 1.0)
        decay = exp((t0 - t)*20.0)

        return (out*u) * volume * decay

main = :
    assert sdl.Init(sdl.INIT_EVERYTHING) == 0, sdl.GetError()
    data = ffi.automem(ffi.float, 1024*8)
    have = ffi.automem(sdl.AudioSpec)

    sample_freq = 48000

    sample_dt = 1 / sample_freq
    t = 0.0

    sound_out = make_sound_generator()

    fill_audio_buffer = (_, stream, length):
        data = ffi.cast(stream, ffi.pointer(ffi.float))
        length = int(length / ffi.sizeof(ffi.float))
        for i in range(0, length, 2)
            value = sound_out(t)
            #volume = pow(10, -1.0 - sin(t*tau))
            data[i+0] = value #sin(t*tau*440) * volume
            data[i+1] = value #sin(t*tau*440) * volume
            t += sample_dt

    fill_audio_buffer = ffi.callback(
        sdl.AudioCallback, fill_audio_buffer)

    dev = sdl.OpenAudioDevice(null, 0, {
        freq = sample_freq,
        format = AUDIO_F32,
        channels = 2,
        samples = 4096,
        callback = fill_audio_buffer
    }, have, 0)
    assert dev, sdl.GetError()
    try
        sdl.PauseAudioDevice(dev, 0)
        sleep(60)
        exit(1)
    finally
        if dev
            sdl.CloseAudioDevice(dev)
        sdl.Quit()
