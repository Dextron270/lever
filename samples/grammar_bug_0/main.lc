# Here's an illustration of how a sample program can be used to
# discover very hard to spot errors.

# This bug appeared when parsing C. C has ambiguity as long
# as typedefs aren't resolved. If we had LR parsing, we could
# resolve the ambiguity before parsing. We had to resolve it
# after parsing though.
import chartparser, grammar_language

language = grammar_language.read_file(dir ++ "bug.grammar")
language.new_parser = chartparser.preprocess(
    language.grammar,
    language.table.nonterminal("a"))

parser = language.new_parser()
parser.step(language.table.terminal("t"), "long", 0, 1)
parser.step(language.table.terminal("t"), "flubbar", 1, 2)

# This will check whether the reduction chart is correct.
# It appears to be.
i = 0
for col in parser.chart
    print("step", i)
    for t in col.items()
        print("  key", t[0])
        for e in t[1]
            print("   ", e.eim)
    i += 1

# The parser referred to here is a variation of Earley parser,
# it's improved based on Jeffrey Keggler's marpa papers.

# Here's a theory for why this is happening.
# The reason is that when x -rule is 'reduced', it will
# apparently reduce with 0:'b' first.
# Because it reduces with 0:'b' first, the 0:'b' will reduce
# with 0:'a' and we get a 'nice' parse tree.
# but next the 0:'g' goes and sees that it's been reduced.
# the reduction no longer reconsiders the 0:'b' since it was
# reduced.

# We should consider this special case when building SPPF and
# add the SPPF link even if the reduction were not cached.

# But it seems we do? It's right in there..

# Lets see if SPPF is correct.
sppf_labels = {}
sppf_queue = list(parser.output)
add_sppf = (sppf):
    if not sppf
        return '_'
    try
        return sppf_labels[sppf]
    except KeyError as _
        sppf_labels[sppf] = i = sppf_labels.length
        sppf_queue.append(sppf)
        return i

for sppf in sppf_queue
    sppf_labels[sppf] = sppf_labels.length

print("SPPF chart")
while sppf_queue.length > 0
    sppf = sppf_queue.pop(0)
    print(" ", sppf_labels[sppf], sppf.start, sppf.stop, sppf.cell)
    link = sppf.link
    while link
        print("  ", add_sppf(link.left), add_sppf(link.right))
        link = link.link

# This seems correct too. There's a link list pointing out
# we have b -> g and b -> x activating a -> b
# notorious..

# It means we got a bug somewhere in traversing. Most likely
# we aren't recognizing the link-list correctly.

# And the bug was found... Right in the SPPF.simple() it had
# the role to return a single list from SPPF if it has one.

# This function should have returned 'null' if it finds an
# SPPF with more than one link in it's shift-chain.

# It ran by basis that while there's shift-edge on a link,
# we'll do something and then traverse to the next SPPF
# in our shift-chain.

# The check to see if there's more than one link was inside
# a loop, that only ran if there was a shift-edge.

# The problem occurred in single-item reductions and under
# ambiguity.

# Adding the multiple-link-check after that loop fixed
# the issue.

post = (rule, args, start, stop):
    return rule.annotation(null, args, [])
print("accept", parser.accepted)
print("result", parser.traverse(post))
# This should produce error due to ambiguity.

# UPDATE: Now this behavior has been fixed.
# This code produces correct results now.

# Due to the nature and discovered triviality of this bug,
# the fix should fix it and we won't have another case like this.
