# This program brings up an async console.
# The console part is floating below the
# output stream.

# These are replacing the stdin/stdout to some extent.
# Except that the stdin would need to be replaced with
# an editor interface of some kind.
edit_line = []
stream_block = []

# This should be an edge trigger or a lock instead.
# For now we shall abuse events to get the screen refresh.
terminal_refresh = Event()

main = ():
    # Setting tty mode to raw seems to incapacitate
    # several commands such as ctrl+c, ctrl+z, ctrl+d, so on.
    # This kind of details are the reason why this thing
    # isn't a library for now.
    stdin.set_mode('raw')
    # There are unrealised, but potential ways to mark that
    # some greenlets are auxiliary.
    # For now we exit with exit(0), and that doesn't come with
    # shutdown schemas.
    schedule(editor_loop)
    schedule(refresh_loop)
    schedule(chatter)

# Superfluous obnoxiety, although it just wants to greet you enough.
chatter = ():
    i = 0
    while true
        print("Hello", i)
        sleep(1.5)
        i += 1

# Imitates the system print command in behavior.
print = (args...):
    space = ""
    for arg in args
        stream_block.append(space)
        if isinstance(arg, str)
            stream_block.append(arg)
        else
            stream_block.append(repr(arg))
        space = " "
    stream_block.append("\n")
    terminal_refresh.dispatch() # event dispatchers such as this are
                                # meant for one-to-many communication.

# This editor loop runs while the other
# loops are waiting, and vice versa.
editor_loop = ():
    try
        while true
            text = stdin.read()
            if text.count("\x03") > 0
                stdout.write("\n")     # should be done by the refresh_loop()
                exit(0)                # but there was not shutdown schema in place.
            for ch in text
                n = ord(ch) # Not much of an editor.
                if ch == '\n' or ch == '\r' or (0x20 <= n and n < 128) or n > 255
                    if ch == '\r'
                        edit_line.append('\n')
                    else
                        edit_line.append(ch)
            terminal_refresh.dispatch()
    except Exception as e
        print_traceback(e) # Default behavior would be to crash a loop and see if it keeps running.
        exit(1)            # Though we have whole another process dedicated for
                           # mutilating the stdout.

refresh_loop = ():
    while true
        # The pending writes go out. If this was real usecase
        # You'd be probably best off by faking the stdout with
        # a fake buffered stream-pair, which gets the buffer size
        # from the stdout and avoids being congested.
        stdout.write("".join(stream_block))
        stream_block := []

        line0 = "this toy console does not do anything\n>> " ++ "".join(edit_line)
        line1 = line0 ++ ""

        # State of the art method for implementing a line editor in
        # an ANSI-compliant terminal. We measure where the text
        # lands to stay on the track.
        width = stdout.get_winsize()[0]
        a = calculate_offset(line0, width)
        b = calculate_offset(line1, width)
        stdout.write(line1)
        stdout.write("".join(cursor_motion(a.x-b.x, a.y-b.y)))

        # The terminal refresh wait here, to show the cursor in the
        # right place so we don't need to hide it.
        terminal_refresh.wait()

        # Then we push above the terminal and clear the screen.
        if a.y == 0
            stdout.write("\033["++a.y.to_string()++"G") # Absolute horizontal position.
        else
            stdout.write("\033["++a.y.to_string()++"F") # To the beginning of last line.
        stdout.write("\033[0J") # clear off the display from under the cursor.

cursor_motion = (x, y):
    if y < 0
        yield "\033["++(-x).to_string()++"A"
    if y > 0
        yield "\033["++(-x).to_string()++"B"
    if x > 0
        yield "\033["++(-x).to_string()++"C"
    if x < 0
        yield "\033["++(-x).to_string()++"D"

calculate_offset = (line, width):
    y = 0
    x = 0
    for ch in line
        if ch == "\n" or x >= width
            y += 1
            x = 0
        else
            x += 1
    return :exnihilo()
        x = x
        y = y
