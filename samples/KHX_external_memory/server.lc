import sdl
import vulkan, ffi, api, fs
from warpgpu import *
from external_memory import ExternalMemory
from process import spawn

main = ():
    # The cwd of the uv_spawn was freaking out for
    # some reason, so lets do this instead.
    chdir(runtime_path)
    # Unix-socket approach may work just as well,
    # but this is the quicker way to test these things
    # out.
    client = Pipe(true)
    process = spawn({
        file = runtime_path ++ "lever"
        #cwd  = runtime_path
        args = [
            (runtime_path ++ "lever").to_string(),
            (dir ++ "client.lc").to_string()
        ]
        stdio = [
            {fd=stdin, readable=true},
            {fd=stdout, writable=true},
            {fd=stderr, writable=true},
            {create = true, fd = client}
        ]
    })
    # Now the client should open up the 
    # fd=3 when it wakes up.
    print("waiting for a client")
    while client.pending_count() == 0
        data = client.read()
        print(repr(Utf8Decoder()(data)))
    print("There is something pending there")
    fdh = client.accept()
    print("fileno", fdh.get_fileno())
    mem_fd = fdh.get_fileno()
    # Now it's time to wake up.


    window = sdl.Window(name, {
        width = 512
        height = 512
    })
    external = ExternalMemory()
    gpu = GPU(window.wsi, external)
    screen = Rect(0, 0, window.width, window.height)
    swapchain = get_swapchain(gpu.device, window.wsi.surface, screen)

    #prop = ffi.automem(gpu.vk.MemoryFdPropertiesKHX)
    #prop[0] = {
    #    sType = "MEMORY_FD_PROPERTIES_KHX",
    #    pNext = null}
    #gpu.vk.getMemoryFdPropertiesKHX(gpu,
    #    "OPAQUE_FD_BIT_KHX", mem_fd, prop)
    #print(prop)

    # These must be the same as in the client-side.
    # They should be passed over the pipe.
    external_image_info = ffi.automem(
        vulkan.vk.ExternalMemoryImageCreateInfoKHX)
    external_image_info[0] = external.handle_spec
    external_image = vulkan.Image(gpu, {
        pNext = external_image_info
        imageType = "2D"
        format = "R8G8B8A8_UNORM"
        extent = {width = 512, height = 512, depth = 1}
        mipLevels = 1
        arrayLayers = 1
        samples = "1_BIT"
        tiling = "OPTIMAL"
        usage = ["SAMPLED_BIT", "COLOR_ATTACHMENT_BIT"]
        initialLayout = "COLOR_ATTACHMENT_OPTIMAL"
    })
    req = external_image.getMemoryRequirements()
    memoryIndex = find_properties(req, [],
        memory_report(gpu.physicalDevice))

    import_info = ffi.automem(gpu.vk.ImportMemoryFdInfoKHX)
    import_info[0] = {
        handleType = "OPAQUE_FD_BIT_KHX"
        fd = mem_fd
    }
    external_mem = gpu.device.allocateMemory({
        pNext = import_info
        allocationSize = req.size
        memoryTypeIndex = memoryIndex
    })
    external_image.bindMemory(external_mem, 0)

    # Now we need an image view
    image_view = vulkan.ImageView(gpu.device, {
        image = external_image
        viewType = "2D"
        format = "R8G8B8A8_UNORM" # could just pick it up from the image
        components = {r = "R", g = "G", b = "B", a = "A"}
        subresourceRange = {
            aspectMask = "COLOR_BIT"
            baseMipLevel = 0
            levelCount = 1
            baseArrayLayer = 0
            layerCount = 1
        }
    })

    # and we need a sampler.
    sampler = vulkan.Sampler(gpu, {
        magFilter = "LINEAR"
        minFilter = "LINEAR"
        addressModeU = "REPEAT"
        addressModeV = "REPEAT"
        addressModeW = "REPEAT"
        anisotropyEnable = true
        maxAnisotropy = 16
        borderColor = "INT_OPAQUE_BLACK"
        unnormalizedCoordinates = false
        compareEnable = false
        compareOp = "ALWAYS"
        mipmapMode = "LINEAR"
        mipLodBias = 0.0
        minLod = 0.0
        maxLod = 0.0
    })


    vertex_layout = object();
        vertexInputState = {
            flags = 0
            vertexBindingDescriptions = [{
                binding = 0
                stride = 6 * ffi.sizeof(ffi.float)
                inputRate = "VERTEX"
            }]
            vertexAttributeDescriptions = [
                {
                    binding = 0
                    location = 0
                    format = "R32G32B32_SFLOAT"
                    offset = 0
                },
                {
                    binding = 0
                    location = 1
                    format = "R32G32B32_SFLOAT"
                    offset = 3 * ffi.sizeof(ffi.float)
                }
            ]
        }
        inputAssemblyState = {topology = "TRIANGLE_LIST"}

    vbo = object();
        size = 8 * 1024
        buffer = gpu.mem.createBuffer(size, "VERTEX_BUFFER_BIT")
        data = buffer.mem.map(ffi.float, buffer.offset, buffer.size)
        stuff = [
           -1.0,-1.0, 0.0, 0.0, 0.0, 0.0,
           -1.0,+1.0, 0.0, 0.0, 1.0, 0.0,
           +1.0,-1.0, 0.0, 1.0, 0.0, 0.0,
           -1.0,+1.0, 0.0, 0.0, 1.0, 0.0,
           +1.0,+1.0, 0.0, 1.0, 1.0, 0.0,
           +1.0,-1.0, 0.0, 1.0, 0.0, 0.0,
        ]
        for i in range(stuff.length)
            data[i] = stuff[i]
        buffer.mem.unmap()

    ubo = object();
        size = 2 * 4 * 4 * ffi.sizeof(ffi.float)
        buffer = gpu.mem.createBuffer(size, "UNIFORM_BUFFER_BIT")
        data = buffer.mem.map(ffi.float, buffer.offset, buffer.size)
        stuff = [
            1.0, 0.0, 0.0, 0.0,
            0.0, 1.0, 0.0, 0.0,
            0.0, 0.0, 1.0, 0.0,
            0.0, 0.0, 0.0, 1.0,

            1.0, 0.0, 0.0, 0.0,
            0.0, 1.0, 0.0, 0.0,
            0.0, 0.0, 1.0, 0.0,
            0.0, 0.0, 0.0, 1.0]
        for i in range(stuff.length)
            data[i] = stuff[i]

    m = list(projection_matrix(45/180*pi, 1.0, 0.01, 100.0))
    for i in 0 .: 16
        ubo.data[i] = m[i]

    cbuf = gpu.queue.pool.allocate({level = "PRIMARY", commandBufferCount = 1})[0]

    DSC0 = DescriptorSetLayout(gpu.device, {
        "testbuffer": {
            binding=0,
            descriptorType = "UNIFORM_BUFFER",
            stageFlags="VERTEX_BIT"
        }
        "texSampler": {
            binding=1,
            descriptorType = "COMBINED_IMAGE_SAMPLER",
            stageFlags="FRAGMENT_BIT"
        }
    })
    # DEP: pipeline_layout, descset

    dsc0 = DSC0()
    dsc0.testbuffer = {
        buffer = ubo.buffer
        offset = 0
        range  = -1#ubo.buffer.size
    }
    dsc0.texSampler = {
        imageLayout = "SHADER_READ_ONLY_OPTIMAL"
        imageView = image_view
        sampler = sampler
    }
    gpu.update(dsc0)
    # DEP: cbuf

    pipeline_layout = vulkan.PipelineLayout(gpu.device, {
        flags = 0
        setLayouts = [DSC0]
        pushConstantRanges = []
    })
    # # DEP: cbuf, pipeline

    pb = RenderPassBuilder()
    pb.color0.attachment(swapchain.config, {
        loadOp = "CLEAR"
        storeOp = "STORE"
        initialLayout = 0 #UNDEFINED
        finalLayout   = "PRESENT_SRC_KHR"
    })
    pb.p0.subpass("GRAPHICS", {
        colorAttachments = [
            pb.color0("COLOR_ATTACHMENT_OPTIMAL")
        ]
    })

    pass = pb.build(gpu.device, screen)
    # DEP: framebuffer, pipeline, cbuf

    swapchain.views = []
    swapchain.framebuffers = []
    for image in swapchain.images
        view = vulkan.ImageView(gpu.device, {
            image = image
            viewType = "2D"
            format = swapchain.format
            components = {r = "R", g = "G", b = "B", a = "A"}
            subresourceRange = swapchain.subresource_range
        })
        swapchain.views.append(view)
        # DEP: framebuffer

        framebuffer = pass.Framebuffer({
            color0 = view
        })
        swapchain.framebuffers.append(framebuffer)
        # DEP: cbuf, begin of renderpass

    shaders = ShaderLoader(gpu.device, dir ++ "glsl")
    # DEP: pipeline

    pipeline = pass.p0(shaders.fetch({
        vertex = "vertex_shader.spv:main"
        fragment = "server_shader.spv:main"
    }), pipeline_layout, vertex_layout) # extra={}...
    gpu.createPipeline(pipeline) # or pipelines.
    # DEP: cbuf

    portal = Portal(gpu, swapchain)

    axis = random_sphere()
    angle = 0


    frame_statistics = []
    frame_was = time()
    render = ():
        if not portal.acquire().SUCCESS
            return

        frame_now = time()
        dt = frame_now - frame_was
        frame_statistics.append(dt)
        frame_was := frame_now
        
        angle += dt
        axis = axisangle(random_sphere(), dt*dt) * axis
        m = list(axisangle(axis, angle).to_mat4(
            vec3(0.0, 0.0, -2.5+0.5*sin(frame_now/tau))))
        for i in 0 .: 16
            ubo.data[16+i] = m[i]


        cbuf.begin({flags = "ONE_TIME_SUBMIT_BIT"})
        cbuf.pipelineBarrier(
            "TOP_OF_PIPE_BIT",
            "TOP_OF_PIPE_BIT",
            0,
            [], [],
            [{
                srcAccessMask = "COLOR_ATTACHMENT_WRITE_BIT"
                dstAccessMask = "SHADER_READ_BIT"
                oldLayout = "COLOR_ATTACHMENT_OPTIMAL"
                newLayout = "SHADER_READ_ONLY_OPTIMAL"
                #srcQueueFamilyIndex = "EXTERNAL_KHX"
                #dstQueueFamilyIndex = 0
                image = external_image
                subresourceRange = {
                    aspectMask = "COLOR_BIT"
                    baseMipLevel = 0
                    levelCount = 1
                    baseArrayLayer = 0
                    layerCount = 1
                }
            }])


        cbuf.beginRenderPass({
            renderPass = pass
            framebuffer = portal.framebuffer
            renderArea = screen.area
            clearValues = [
                {color = {float32 = [
                    0.0,
                    0.0,
                    0.0,
                    1.0
                ]}}]
        }, "INLINE")
        cbuf.bindPipeline("GRAPHICS", pipeline)
        cbuf.bindDescriptorSets("GRAPHICS", pipeline_layout, 0, [dsc0], [])
        cbuf.bindVertexBuffers(0, [vbo.buffer], [0])
        cbuf.draw(6, 1, 0, 0)
        cbuf.endRenderPass()
        cbuf.end()
        portal.present([cbuf])

        if frame_statistics.length >= 1000
            best  = 1.0
            worst = 0.0
            avg   = 0.0
            for stat in frame_statistics
                best = min(best, stat)
                worst = max(worst, stat)
                avg += stat
            avg /= frame_statistics.length
            print("best:", 1/best, "worst:", 1/worst, "avg:", 1/avg)
            frame_statistics := []

    event = ffi.automem(sdl.sdl.Event)
    running = true
    while running
        render()
        while sdl.sdl.PollEvent(event) != 0
            if event.type == sdl.sdl.QUIT
                running = false

    gpu.device.waitIdle()
    for obj in swapchain.framebuffers ++ swapchain.views
        obj.destroy()
    dsc0.destroy()
    DSC0.destroy()
    pipeline.destroy()
    pipeline_layout.destroy()
    vbo.buffer.destroy()
    vbo.buffer.mem.free()
    ubo.buffer.destroy()
    ubo.buffer.mem.unmap()
    ubo.buffer.mem.free()
    shaders.destroy()
    pass.destroy()
    portal.destroy()
    swapchain.destroy()
    window.wsi.destroy()
    gpu.destroy()


#TODO: Think about unix sockets some time later.
    #socket = Pipe(true)
    #fs.unlink(dir ++ "server.sock")
    #socket.bind((dir ++ "server.sock").to_string())
    #socket.listen(1)
    #print("waiting for client")
    #while socket.pending_count() == 0
    #    sleep(0.1)
    #print("pending client")
    #client = socket.accept()
    #print("connected")

    #print(client.accept())
    #print(client.pending_count())
    #sleep(1.0)
    #print("woo")
    #print(client.pending_count())
    ##while client.pending_count() == 0
    #print("read:", repr(decode_utf8(client.read())))
    #print("trying something")
    #if client.pending_count() > 0
    #    fdh = client.accept()
    #    print("whee")
    #print("something incoming")
    #client.listen(1)
    #fdh = client.accept()
    #print("file numbah", fdh.get_fileno())
    #print("but not interested")
    #sleep(1.0)
    #print("closing")
    #socket.close()
    #return null
