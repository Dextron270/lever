import sdl
import vulkan, ffi, api, fs
from warpgpu import *

# 2D shading effect imitating waves with sine functions.
# https://developer.nvidia.com/gpugems/GPUGems/gpugems_ch01.html

main = :
    window = sdl.Window(name, {
        width = 1024
        height = 1024
        flags = sdl.sdl.WINDOW_SHOWN # | sdl.sdl.WINDOW_FULLSCREEN_DESKTOP
                                     # Add if you want fullscreen
    })
    gpu = GPU(window.wsi)
    screen = Rect(0, 0, window.width, window.height)
    swapchain = get_swapchain(gpu.device, window.wsi.surface, screen)

    # DATA: PUSH CONSTANTS
    constants = ffi.automem(ffi.float, 1)
    constants_size = ffi.sizeof(ffi.float)*1

    # DATA: VERTEX
    quad_mesh = object();
        pipeline = {
            vertexInputState = {
                flags = 0
                vertexBindingDescriptions = [{
                    binding = 0
                    stride = 2 * ffi.sizeof(ffi.float)
                    inputRate = "VERTEX"
                }]
                vertexAttributeDescriptions = [
                    {
                        binding = 0
                        location = 0
                        format = "R32G32_SFLOAT"
                        offset = 0
                    }
                ]
            }
            inputAssemblyState = {topology = "TRIANGLE_LIST"}
        }
        size = 4096
        buffer = gpu.mem.createBuffer(size, "VERTEX_BUFFER_BIT")
        data = buffer.mem.map(ffi.float, buffer.offset, buffer.size)
        quad_vertices = [
            -1.0, -1.0,  -1.0, +1.0,  +1.0, -1.0,
            -1.0, +1.0,  +1.0, +1.0,  +1.0, -1.0,
        ]
        for i in range(quad_vertices.length)
            data[i] = quad_vertices[i]
        buffer.mem.unmap()

    # NO UNIFORM DATA, therefore no descriptors.

    # RENDER PASS
    pb = RenderPassBuilder()
    pb.color.attachment(swapchain.config, {
        loadOp = "CLEAR"
        storeOp = "STORE"
        initialLayout = 0
        finalLayout = "PRESENT_SRC_KHR"
    })
    pb.p0.subpass("GRAPHICS", {
        colorAttachments = [
            pb.color("COLOR_ATTACHMENT_OPTIMAL")
        ]
    })
    renderPass = pb.build(gpu, screen)

    # RENDER TARGET
    swapchain = swapchain
    swapchain.views = []
    swapchain.fences = []
    swapchain.framebuffers = []
    for image in swapchain.images
        view = vulkan.ImageView(gpu.device, {
            image = image
            viewType = "2D"
            format = swapchain.format
            components = {r = "R", g = "G", b = "B", a = "A"}
            subresourceRange = swapchain.subresource_range
        })
        swapchain.views.append(view)
        # DEP: framebuffer

        fence = vulkan.Fence(gpu.device, {flags = "SIGNALED_BIT"})
        swapchain.fences.append(fence)

        framebuffer = renderPass.Framebuffer({
            color = view
        })
        swapchain.framebuffers.append(framebuffer)
        # DEP: cbuf, begin of renderpass

    shaders = ShaderLoader(gpu, dir)

    layout = vulkan.PipelineLayout(gpu.device, {
        flags = 0
        setLayouts = []
        pushConstantRanges = [{
            stageFlags = "FRAGMENT_BIT"
            offset = 0
            size = constants_size
        }]
    })
    
    # PIPELINE
    pipeline = renderPass.p0(shaders.fetch({
        vertex = "glsl/ocean_waves.vert.spv:main"
        fragment = "glsl/ocean_waves.frag.spv:main"
    }), layout, quad_mesh.pipeline) # extra={}...
    gpu.createPipeline(pipeline)

    # COMMAND BUFFER
    cbuf = gpu.queue.pool.allocate(
        {level = "PRIMARY", commandBufferCount = 1})[0]

    portal = Portal(gpu, swapchain)
    start_time = time()
    render = ():
        if not portal.acquire().SUCCESS
            return

        constants[0] = time() - start_time

        cbuf.begin({flags = "ONE_TIME_SUBMIT_BIT"})
        cbuf.beginRenderPass({
            renderPass = renderPass
            framebuffer = portal.framebuffer
            renderArea = screen.area
            clearValues = [
                {color = {float32 = [0, 0, 0, 1]}}
            ]
        }, "INLINE")
        cbuf.bindPipeline("GRAPHICS", pipeline)
        cbuf.bindVertexBuffers(0, [quad_mesh.buffer], [0])
        cbuf.pushConstants(layout, "FRAGMENT_BIT", 
            0, constants_size, constants)
        cbuf.draw(6, 1, 0, 0) # 6 vertices, one instance.
        cbuf.endRenderPass()
        cbuf.end()
        portal.present([cbuf])

    event = ffi.automem(sdl.sdl.Event)
    running = true
    while running
        render()
        while sdl.sdl.PollEvent(event) != 0
            if event.type == sdl.sdl.QUIT
                running = false
            if event.type == sdl.sdl.KEYDOWN
                running = false

    gpu.device.waitIdle()
    for obj in swapchain.fences ++ swapchain.framebuffers ++ swapchain.views
        obj.destroy()
    pipeline.destroy()
    layout.destroy()
    quad_mesh.buffer.destroy()
    quad_mesh.buffer.mem.free()
    shaders.destroy()
    renderPass.destroy()
    swapchain.destroy()
    window.wsi.destroy()
    portal.destroy()
    gpu.destroy()
