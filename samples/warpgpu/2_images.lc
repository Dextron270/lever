import sdl, vulkan, ffi, api, fs, png
from warpgpu import *

main = ():
    window = sdl.Window(name, {
        width = 640
        height = 480
    })
    gpu = GPU(window.wsi)
    screen = Rect(0, 0, window.width, window.height)
    swapchain = get_swapchain(gpu.device,
        window.wsi.surface, screen)

    png_image = png.read_file(
        dir ++ "../png/frants_boe_villender_test.png")

    image = vulkan.Image(gpu, {
        imageType = "2D"
        format = png_image.format
        extent = {
            width = png_image.width,
            height = png_image.height,
            depth = 1
        }
        mipLevels = 1
        arrayLayers = 1
        samples = "1_BIT"
        tiling = "LINEAR"
        usage = ["SAMPLED_BIT", "TRANSFER_SRC_BIT"]
        sharingMode = "EXCLUSIVE"
        initialLayout = "PREINITIALIZED"
        # TODO: needs a layout transition here?
    })
    image.mem = gpu.mem.associate(image, [
        "HOST_VISIBLE_BIT", "HOST_COHERENT_BIT"
    ])
    data = image.mem.map(ffi.byte, image.offset, image.size)
    ffi.memcpy(data, png_image.data, png_image.data.length)

    image_view = vulkan.ImageView(gpu.device, {
        image = image
        viewType = "2D"
        format = png_image.format
        components = {r = "R", g = "G", b = "B", a = "A"}
        subresourceRange = {
            aspectMask = "COLOR_BIT"
            baseMipLevel = 0
            levelCount = 1
            baseArrayLayer = 0
            layerCount = 1
        }
    })

    sampler = vulkan.Sampler(gpu, {
        magFilter = "LINEAR"
        minFilter = "LINEAR"
        addressModeU = "REPEAT"
        addressModeV = "REPEAT"
        addressModeW = "REPEAT"
        anisotropyEnable = true
        maxAnisotropy = 1
        borderColor = "INT_OPAQUE_BLACK"
        unnormalizedCoordinates = false
        compareEnable = false
        compareOp = "ALWAYS"
        mipmapMode = "LINEAR"
        mipLodBias = 0.0
        minLod = 0.0
        maxLod = 0.0
    })

    vertex_layout = object();
        vertexInputState = {
            flags = 0
            vertexBindingDescriptions = [{
                binding = 0
                stride = 6 * ffi.sizeof(ffi.float)
                inputRate = "VERTEX"
            }]
            vertexAttributeDescriptions = [
                {
                    binding = 0
                    location = 0
                    format = "R32G32B32_SFLOAT"
                    offset = 0
                },
#                {
#                    binding = 0
#                    location = 1
#                    format = "R32G32B32_SFLOAT"
#                    offset = 3 * ffi.sizeof(ffi.float)
#                }
            ]
        }
        inputAssemblyState = {topology = "TRIANGLE_LIST"}

    vbo = object();
        size = 8 * 1024
        buffer = gpu.mem.createBuffer(size, "VERTEX_BUFFER_BIT")
        data = buffer.mem.map(ffi.float, buffer.offset, buffer.size)
        stuff = [
           -1.0,-1.0, 0.0, 0.0, 0.0, 0.0,
           -1.0,+1.0, 0.0, 0.0, 1.0, 0.0,
           +1.0,-1.0, 0.0, 1.0, 0.0, 0.0,
           -1.0,+1.0, 0.0, 0.0, 1.0, 0.0,
           +1.0,+1.0, 0.0, 1.0, 1.0, 0.0,
           +1.0,-1.0, 0.0, 1.0, 0.0, 0.0,
        ]
        for i in range(stuff.length)
            data[i] = stuff[i]
        buffer.mem.unmap()

    cbuf = gpu.queue.pool.allocate({level = "PRIMARY", commandBufferCount = 1})[0]

    DSC0 = DescriptorSetLayout(gpu.device, {
        "texSampler": {
            binding = 1,
            descriptorType = "COMBINED_IMAGE_SAMPLER",
            stageFlags = "FRAGMENT_BIT"
        }
    })

    dsc0 = DSC0()
    dsc0.texSampler = {
        imageLayout = "SHADER_READ_ONLY_OPTIMAL"
        imageView = image_view
        sampler = sampler
    }
    gpu.update(dsc0)

    push_constants = ffi.automem(ffi.float, 1)
    push_constants_size = ffi.sizeof(ffi.float)*1

    pipeline_layout = vulkan.PipelineLayout(gpu.device, {
        flags = 0
        setLayouts = [DSC0]
        pushConstantRanges = [{
            stageFlags = "FRAGMENT_BIT"
            offset = 0
            size = push_constants_size
        }]
    })

    pb = RenderPassBuilder()
    pb.color0.attachment(swapchain.config, {
        loadOp = "CLEAR"
        storeOp = "STORE"
        initialLayout = 0
        finalLayout = "PRESENT_SRC_KHR"
    })
    pb.p0.subpass("GRAPHICS", {
        colorAttachments = [
            pb.color0("COLOR_ATTACHMENT_OPTIMAL")
        ]
    })

    pass = pb.build(gpu.device, screen)

    swapchain.views = []
    swapchain.framebuffers = []
    for sw_image in swapchain.images
        view = vulkan.ImageView(gpu.device, {
            image = sw_image
            viewType = "2D"
            format = swapchain.format
            components = {r = "R", g = "G", b = "B", a = "A"}
            subresourceRange = swapchain.subresource_range
        })
        swapchain.views.append(view)
        framebuffer = pass.Framebuffer({
            color0 = view
        })
        swapchain.framebuffers.append(framebuffer)

    shaders = ShaderLoader(gpu.device, dir ++ "glsl")

    pipeline = pass.p0(shaders.fetch({
        vertex = "2_images.vert.spv:main"
        fragment = "2_images.frag.spv:main"
    }), pipeline_layout, vertex_layout)
    gpu.createPipeline(pipeline)

    portal = Portal(gpu, swapchain)

    start_time = time()
    render = ():
        if not portal.acquire().SUCCESS
            return

        push_constants[0] = time() - start_time

        cbuf.begin({flags = "ONE_TIME_SUBMIT_BIT"})
        cbuf.beginRenderPass({
            renderPass = pass
            framebuffer = portal.framebuffer
            renderArea = screen.area
            clearValues = [
                {color = {float32 = [
                    0.0,
                    0.0,
                    0.0,
                    1.0
                ]}}]
        }, "INLINE")
        cbuf.bindPipeline("GRAPHICS", pipeline)
        cbuf.bindDescriptorSets("GRAPHICS", pipeline_layout, 0, [dsc0], [])
        cbuf.bindVertexBuffers(0, [vbo.buffer], [0])
        cbuf.pushConstants(pipeline_layout, "FRAGMENT_BIT",
            0, push_constants_size, push_constants)
        cbuf.draw(6, 1, 0, 0)
        cbuf.endRenderPass()
        cbuf.end()
        portal.present([cbuf])

    event = ffi.automem(sdl.sdl.Event)
    running = true
    while running
        render()
        while sdl.sdl.PollEvent(event) != 0
            if event.type == sdl.sdl.QUIT
                running = false

    gpu.device.waitIdle()
    for obj in swapchain.framebuffers ++ swapchain.views
        obj.destroy()
    dsc0.destroy()
    DSC0.destroy()
    pipeline.destroy()
    pipeline_layout.destroy()
    sampler.destroy()
    image_view.destroy()
    image.mem.free()
    image.destroy()
    vbo.buffer.destroy()
    vbo.buffer.mem.free()
    shaders.destroy()
    pass.destroy()
    portal.destroy()
    swapchain.destroy()
    window.wsi.destroy()
    gpu.destroy()
