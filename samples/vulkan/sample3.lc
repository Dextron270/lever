import vulkan, sdl2_wsi, ffi, gc, api, fs

sdl = api.library("libSDL2")

main = ():
    extensions = vulkan.listInstanceExtensions()
    enabledExtensionNames = sdl2_wsi.required_extensions(extensions)

    instance = vulkan.Instance({
        enabledExtensionNames = enabledExtensionNames
    })

    screen = :exnihilo()
        width = 1024
        height = 1024
        offset = {x = 0, y = 0}
        extent = {width = width, height = height}
        area = {offset=offset, extent=extent}
        viewport = {x = 0, y = 0,
            width = width, height = height,
            minDepth = 0.0, maxDepth = 1.0}

    assert(sdl.Init(sdl.INIT_VIDEO) == 0, "SDL Init")
    win = sdl.CreateWindow("Hello", 0, 0,
        screen.width, screen.height, sdl.WINDOW_SHOWN)
    assert(win, "SDL CreateWindow")
    surface = sdl2_wsi.create_surface(vulkan, sdl, instance, win)

    gpu = null
    queueIndex = null
    for device in instance.listPhysicalDevices()
        prop = device.getProperties()
        i = 0
        for x in device.listQueueFamilyProperties()
            if not device.getSurfaceSupport(i, surface)
                continue
            if x.queueFlags.GRAPHICS_BIT and x.queueFlags.COMPUTE_BIT
                print("Device name:", prop.deviceName.str)
                print("            ", prop.deviceType)
                queueIndex = i
                gpu = device
            i += 1
    if gpu == null
        print("Did not find a suitable GPU")
        exit(1)

    print("found suitable GPU")

    device = vulkan.Device(gpu, {
        enabledExtensionNames = ["VK_KHR_swapchain"]
        queueCreateInfos = [{
            queueFamilyIndex = queueIndex
            queuePriorities = [1.0]
        }]
    })
    queue = device.getQueue(0, 0)
    swapchain = get_swapchain(device, surface, screen)

    command_pool = vulkan.CommandPool(device, {
        flags = "RESET_COMMAND_BUFFER_BIT"
        queueFamilyIndex = queueIndex
    })

    image_acquired = vulkan.Semaphore(device)
    rendering_done = vulkan.Semaphore(device)

    buffer = command_pool.allocate({level = "PRIMARY", commandBufferCount = 1})[0]

    render_pass = vulkan.RenderPass(device, {
        attachments = [
            {
                # These values will likely require adjustment.
                format = swapchain.format
                samples = "1_BIT"
                loadOp = "CLEAR"
                storeOp = "STORE"
                stencilLoadOp = "DONT_CARE"
                stencilStoreOp = "DONT_CARE"
                # I'm not sure about these.. going to read on them soon.
                initialLayout = "COLOR_ATTACHMENT_OPTIMAL"
                finalLayout = "COLOR_ATTACHMENT_OPTIMAL"
            }
        ]
        subpasses = [
            {
                pipelineBindPoint = "GRAPHICS"
                inputAttachments = []
                colorAttachments = [
                    {attachment = 0, layout = "COLOR_ATTACHMENT_OPTIMAL"}
                ]
            }
        ]
    })

    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002

    descset_layout = vulkan.DescriptorSetLayout(device, {
        bindings = [{
            binding = 0
            descriptorType = "UNIFORM_BUFFER"
            descriptorCount = 1
            stageFlags = "VERTEX_BIT"
        }]
    })

    pipeline_layout = vulkan.PipelineLayout(device, {
        flags = 0
        setLayouts = [descset_layout]
        pushConstantRanges = []
    })

    hostMemoryIndex = null
    gpu_mem = device.physicalDevice.getMemoryProperties()
    for i in range(gpu_mem.memoryTypeCount)
        if gpu_mem.memoryTypes[i].propertyFlags.HOST_CACHED_BIT
            hostMemoryIndex = i

    particle_count = 100000
    vbo = :exnihilo()
        size = 6*4*particle_count
        buffer = vulkan.Buffer(device, {
            size = size
            usage = ["VERTEX_BUFFER_BIT", "STORAGE_BUFFER_BIT"]
        })
        memreq = buffer.getMemoryRequirements()
        print(memreq.size, memreq.alignment, memreq.memoryTypeBits)
        mem = device.allocateMemory({
            allocationSize = memreq.size
            memoryTypeIndex = hostMemoryIndex
        })
        buffer.bindMemory(mem, 0)

        data = mem.map(ffi.float, 0, memreq.size)
        i = 0
        while i < particle_count
            data[i*6 + 0] = random()
            data[i*6 + 1] = random()
            data[i*6 + 2] = random()
            data[i*6 + 3] = random() * 2 - 1
            data[i*6 + 4] = random() * 2 - 1
            data[i*6 + 5] = random() * 2 - 1
            i += 1
        mem.unmap()

    ubo = :exnihilo()
        size = 2 * 4 * 4 * ffi.sizeof(ffi.float)
        buffer = vulkan.Buffer(device, {size = size, usage = "UNIFORM_BUFFER_BIT"})
        memreq = buffer.getMemoryRequirements()
        print(memreq.size, memreq.alignment, memreq.memoryTypeBits)
        mem = device.allocateMemory({
            allocationSize = memreq.size
            memoryTypeIndex = hostMemoryIndex
        })
        buffer.bindMemory(mem, 0)

        data = mem.map(ffi.float, 0, memreq.size)
        stuff = [
            2.0, 0.0, 0.0, 0.0,
            0.0, 2.0, 0.0, 0.0,
            0.0, 0.0, 1.0, 0.0,
           -1.0,-1.0, 0.0, 1.0,

            1.0, 0.0, 0.0, 0.0,
            0.0, 1.0, 0.0, 0.0,
            0.0, 0.0, 1.0, 0.0,
            0.0, 0.0, 0.0, 1.0]
        i = 0
        while i < stuff.length
            data[i] = stuff[i]
            i += 1
        mem.unmap()

    descriptor_pool = vulkan.DescriptorPool(device, {
        maxSets = 2
        poolSizes = [
            {type = "UNIFORM_BUFFER", descriptorCount = 1},
            {type = "STORAGE_BUFFER", descriptorCount = 1}
        ]
    })

    descset = device.allocateDescriptorSets({
        descriptorPool = descriptor_pool
        setLayouts = [descset_layout]
    })[0]

    device.updateDescriptorSets([{
        dstSet = descset
        dstBinding = 0
        dstArrayElement = 0
        descriptorType = "UNIFORM_BUFFER"
        descriptorCount = 1
        pBufferInfo = {
            buffer = ubo.buffer
            offset = 0
            range  = ubo.memreq.size
        }
    }], [])

    swapchain.views = []
    swapchain.fences = []
    swapchain.framebuffers = []
    for image in swapchain.images
        view = vulkan.ImageView(device, {
            image = image
            viewType = "2D"
            format = swapchain.format
            components = {r = "R", g = "G", b = "B", a = "A"}
            subresourceRange = swapchain.subresource_range
        })
        swapchain.views.append(view)

        fence = vulkan.Fence(device, {flags = "SIGNALED_BIT"})
        swapchain.fences.append(fence)

        framebuffer = vulkan.Framebuffer(device, {
            renderPass = render_pass
            attachments = [view]
            width = screen.width
            height = screen.height
            layers = 1
        })
        swapchain.framebuffers.append(framebuffer)

    vertex_shader = load_shader(device, dir ++ "sample3.vertex.spv")
    fragment_shader = load_shader(device, dir ++ "sample3.fragment.spv")

    pipeline_cache = vulkan.PipelineCache(device, {})

    pipeline = device.createGraphicsPipeline(pipeline_cache, {
        flags = 0
        stages = [
            {
                stage = "VERTEX_BIT"
                module = vertex_shader
                name = "main"
            },
            {
                stage = "FRAGMENT_BIT"
                module = fragment_shader
                name = "main"
            }
        ]
        vertexInputState = {
            flags = 0
            vertexBindingDescriptions = [{
                binding = 0
                stride = 6 * ffi.sizeof(ffi.float)
                inputRate = "VERTEX"
            }]
            vertexAttributeDescriptions = [
                {
                    binding = 0
                    location = 0
                    format = "R32G32B32_SFLOAT"
                    offset = 0
                },
                {
                    binding = 0
                    location = 1
                    format = "R32G32B32_SFLOAT"
                    offset = 3 * ffi.sizeof(ffi.float)
                }
            ]
        }
        inputAssemblyState = {topology = "POINT_LIST"}
        viewportState = {
            viewports = [screen.viewport]
            scissors = [screen.area]
        }
        rasterizationState = {
            polygonMode = "FILL"
            cullMode = 0
            frontFace = "COUNTER_CLOCKWISE"
        }
        multisampleState = {rasterizationSamples = "1_BIT"}
        colorBlendState = {
            logicOpEnable = false
            logicOp = "CLEAR"
            attachments = [{
                blendEnable = false
                colorWriteMask = 0xf
                srcColorBlendFactor = "ZERO"
                dstColorBlendFactor = "ZERO"
                colorBlendOp = "ADD"
                srcAlphaBlendFactor = "ZERO"
                dstAlphaBlendFactor = "ZERO"
                alphaBlendOp = "ADD"
            }]
            blendConstants = [0.0, 0.0, 0.0, 0.0]
        }
        dynamicState = null
        layout = pipeline_layout
        renderPass = render_pass
        subpass = 0
    })

    compute_descset = vulkan.DescriptorSetLayout(device, {
        bindings = [{
            binding = 0
            descriptorType = "STORAGE_BUFFER"
            descriptorCount = 1
            stageFlags = "COMPUTE_BIT"
        }]
    })
    compute_shader = load_shader(device, dir ++ "sample3.compute.spv")
    compute_layout = vulkan.PipelineLayout(device, {
        flags = 0
        setLayouts = [compute_descset]
        pushConstantRanges = []
    })
    compute_pipe = device.createComputePipeline(pipeline_cache, {
        flags = 0
        stage = {
            stage = "COMPUTE_BIT"
            module = compute_shader
            name = "main"
        }
        layout = compute_layout
    })

    compute_desc = device.allocateDescriptorSets({
        descriptorPool = descriptor_pool
        setLayouts = [compute_descset]
    })[0]

    device.updateDescriptorSets([{
        dstSet = compute_desc
        dstBinding = 0
        dstArrayElement = 0
        descriptorType = "STORAGE_BUFFER"
        descriptorCount = 1
        pBufferInfo = {
            buffer = vbo.buffer
            offset = 0
            range  = vbo.memreq.size
        }
    }], [])

    frame_statistics = []
    last_image = 0
    render = ():
        # This is lazy. It means we can't continue before the previous frame has been submitted.
        # Need to check with performance counter later, whether this is sufficient
        if swapchain.fences[last_image].getStatus().NOT_READY
            return null
        current_image = device.acquireNextImage(swapchain, 0xFFFFFFFFFFFFFFFF, image_acquired)
        frame_begin = time()
        device.resetFences([swapchain.fences[current_image]])

        buffer.begin({flags = "ONE_TIME_SUBMIT_BIT"})

        buffer.bindPipeline("COMPUTE", compute_pipe)
        buffer.bindDescriptorSets("COMPUTE", compute_layout, 0, [compute_desc], [])
        buffer.dispatch(particle_count, 1, 1)
        buffer.pipelineBarrier("ALL_GRAPHICS_BIT", "ALL_GRAPHICS_BIT", 0, [], [{
            srcAccessMask = "MEMORY_WRITE_BIT"
            dstAccessMask = "VERTEX_ATTRIBUTE_READ_BIT"
            buffer = vbo.buffer
            offset = 0
            size = vbo.size
        }], [])


        buffer.pipelineBarrier("ALL_GRAPHICS_BIT", "COLOR_ATTACHMENT_OUTPUT_BIT", 0, [], [], [{
            srcAccessMask = "MEMORY_READ_BIT"
            dstAccessMask = "COLOR_ATTACHMENT_WRITE_BIT"
            oldLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR
            newLayout = "COLOR_ATTACHMENT_OPTIMAL"
            srcQueueFamilyIndex = queueIndex
            dstQueueFamilyIndex = queueIndex
            image = swapchain.images[current_image]
            subresourceRange = swapchain.subresource_range
        }])
        buffer.beginRenderPass({
            renderPass = render_pass
            framebuffer = swapchain.framebuffers[current_image]
            renderArea = screen.area
            clearValues = [
                {color = {float32 = [0.5, 0.5, 0.5, 1.0]}}
            ]
        }, "INLINE")
        buffer.bindPipeline("GRAPHICS", pipeline)
        buffer.bindDescriptorSets("GRAPHICS", pipeline_layout, 0, [descset], [])
        buffer.bindVertexBuffers(0, [vbo.buffer], [0])
        buffer.draw(particle_count, 1, 0, 0)
        buffer.endRenderPass()
        buffer.pipelineBarrier("COLOR_ATTACHMENT_OUTPUT_BIT", "ALL_GRAPHICS_BIT", 0, [], [], [{
            srcAccessMask = "COLOR_ATTACHMENT_WRITE_BIT"
            dstAccessMask = "MEMORY_READ_BIT"
            oldLayout = "COLOR_ATTACHMENT_OPTIMAL"
            newLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR
            srcQueueFamilyIndex = queueIndex
            dstQueueFamilyIndex = queueIndex
            image = swapchain.images[current_image]
            subresourceRange = swapchain.subresource_range
        }])
        buffer.end()
        queue.submit([{
            waitSemaphores = [image_acquired]
            commandBuffers = [buffer]
            signalSemaphores = [rendering_done]
        }], swapchain.fences[current_image])
        frame_end = time()
        frame_statistics.append(frame_end - frame_begin)

        queue.present({
            waitSemaphores = [rendering_done]
            swapchains = [swapchain.id]
            imageIndices = [current_image]
        })
        last_image := current_image

        if frame_statistics.length >= 1000
            best  = 1.0
            worst = 0.0
            avg   = 0.0
            for stat in frame_statistics
                best = min(best, stat)
                worst = max(worst, stat)
                avg += stat
            avg /= frame_statistics.length
            print("best:", best, "worst:", worst, "avg:", avg)
            frame_statistics := []

    print("ready to draw")
    event = ffi.automem(sdl.Event)
    running = true
    while running
        render()
        sleep(0.001)
        while sdl.PollEvent(event) != 0
            if event.type == sdl.QUIT
                running = false

    queue.waitIdle()
    device.waitIdle()

    for obj in swapchain.fences ++ swapchain.framebuffers ++ swapchain.views
        obj.destroy()
    descriptor_pool.destroy()
    descset_layout.destroy()
    pipeline.destroy()
    pipeline_layout.destroy()
    pipeline_cache.destroy()
    vbo.buffer.destroy()
    vbo.mem.free()
    ubo.buffer.destroy()
    ubo.mem.free()
    vertex_shader.destroy()
    fragment_shader.destroy()
    render_pass.destroy()
    image_acquired.destroy()
    rendering_done.destroy()
    command_pool.destroy()
    swapchain.destroy()
    device.destroy()
    surface.destroy()
    instance.destroy()
    print("quit")

get_swapchain = (device, surface, screen):
    imageUsage = "COLOR_ATTACHMENT_BIT"
    gpu = device.physicalDevice

    cap = gpu.getSurfaceCapabilities(surface)
    # uint32_t                         minImageCount;
    # uint32_t                         maxImageCount;
    # VkExtent2D                       currentExtent;
    # VkExtent2D                       minImageExtent;
    # VkExtent2D                       maxImageExtent;
    # uint32_t                         maxImageArrayLayers;
    # VkSurfaceTransformFlagsKHR       supportedTransforms;
    # VkSurfaceTransformFlagBitsKHR    currentTransform;
    # VkCompositeAlphaFlagsKHR         supportedCompositeAlpha;
    if not cap.currentTransform.IDENTITY_BIT_KHR
        print("Surface transform not desired")
        exit(1)
    if not cap.supportedUsageFlags.COLOR_ATTACHMENT_BIT
        print("Surface does not support the desired usage")
        exit(1)

    imageFormat = null
    colorSpace = null
    for prop in gpu.listSurfaceFormats(surface)
        imageFormat = prop.format
        colorSpace = prop.colorSpace
        break

    presentMode = "FIFO_KHR"
    for mode in gpu.listSurfacePresentModes(surface)
        continue

    format = "B8G8R8A8_UNORM" # hack, should enumerate the damn surface caps already.
    # Fourth temporary measure, no idea where this works.
    swapchain = vulkan.Swapchain(device, {
        surface = surface
        minImageCount = 2
        imageFormat = imageFormat
        imageColorSpace = colorSpace
        imageExtent = screen.extent
        imageUsage = imageUsage
        preTransform = "IDENTITY_BIT_KHR" # ?
        compositeAlpha = "OPAQUE_BIT_KHR"
        imageArrayLayers = 1
        imageSharingMode = "EXCLUSIVE"
        #queueFamilyIndexCount = 0
        #pQueueFamilyIndices = null
        presentMode = presentMode
        #oldSwapchain = null
        clipped = true
    })

    return :swapchain
        screen = screen
        images = swapchain.getImages()
        format = format
        surface = surface
        subresource_range = {
            aspectMask = "COLOR_BIT"
            baseMipLevel = 0
            levelCount = 1
            baseArrayLayer = 0
            layerCount = 1
        }

assert = (condition, message="assert"):
    if not condition
        print(message)
        exit(1)

load_shader = (device, path):
    blob = fs.read_file(path, "b")
    return vulkan.ShaderModule(device, {
        codeSize = blob.length
        pCode = blob
    })
