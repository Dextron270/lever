import ffi, api, fs, platform

white = vec3(1, 1, 1)
red = vec3(1, 0, 0)
green = vec3(0, 1, 0)
blue = vec3(0, 0, 1)

plotter = (clean, plot):
    fovy = 60 / 180 * pi # convert 60 degrees to radians.

    while true
        clean()
        plot(vec3(0,0), red)
        plot(vec3(1,0), red)
        plot(vec3(0,0), green)
        plot(vec3(0,1), green)

        now = time()
        pt = vec3(cos(now), -0.5, sin(now) +2)
        plot(project(vec3(0,-0.5, +2)), white)
        plot(project(pt), white)

        sleep(0.01)

project = (point):
    return vec3(point.x / point.z, point.y / point.z)

win32 = (platform.name == "win32")
with_hmd = win32 # or = false if you don't have oculus rift.

if win32
    sdl = ffi.library("SDL2.dll", api.open_nobind("libSDL2", {}))
else
    sdl = ffi.library("libSDL2.so", api.open_nobind("libSDL2", {}))
gl = api.library("libGL", sdl.GL_GetProcAddress)
sdl_img = api.library("libSDL2_image", null, {"libSDL2": sdl})

main = ():
    # todo: add assert
    if 0 != sdl.Init(sdl.INIT_EVERYTHING)
        print("cannot sdl2 init")
        exit(1)
    sdl_img.Init(sdl_img.INIT_JPG | sdl_img.INIT_PNG)

    sdl.GL_SetAttribute(sdl.GL_CONTEXT_MAJOR_VERSION, 4)
    sdl.GL_SetAttribute(sdl.GL_CONTEXT_MINOR_VERSION, 4)

    sdl.GL_SetAttribute(sdl.GL_DOUBLEBUFFER, 1)
    sdl.GL_SetAttribute(sdl.GL_DEPTH_SIZE, 24)

    width = 512
    height = 512
    win = sdl.CreateWindow("Tutorial", 100, 100, width, height,
      sdl.WINDOW_OPENGL | sdl.WINDOW_SHOWN)
    if not win
        print ("cannot open window")
        exit(1)

    ctx = sdl.GL_CreateContext(win)
    if not ctx
        print ("cannot create opengl 4 context")
        exit(1)

    # shader program
    po = gl.createProgram()
    vso = gl.createShader(gl.VERTEX_SHADER)
    fso = gl.createShader(gl.FRAGMENT_SHADER)

    vsrc = fs.read_file(dir ++ "passthrough.vert")
    fsrc = fs.read_file(dir ++ "vertexcolor.frag")

    build_shader(vso, vsrc)
    build_shader(fso, fsrc)

    gl.attachShader(po, vso)
    gl.attachShader(po, fso)
    gl.linkProgram(po)

    linked = ffi.automem(ffi.int)
    gl.getProgramiv(po, gl.LINK_STATUS, linked)
    if linked.to != gl.TRUE
        print("shader link failed")
        print(get_info_log(po))
        exit(1)

    max_vertices = 2048
    vertex_count = 0
    data = ffi.automem(ffi.float, max_vertices*6)

    stride = ffi.sizeof(ffi.float)*6
    v_offset0 = ffi.sizeof(ffi.float)*0
    v_offset1 = ffi.sizeof(ffi.float)*3
    data_size = max_vertices*stride

    plot_clean = ():
        vertex_count := 0

    plot_vertex = (pos, color):
        i = vertex_count * 6
        data[i+0] = pos.x
        data[i+1] = pos.y
        data[i+2] = pos.z
        data[i+3] = color.x
        data[i+4] = color.y
        data[i+5] = color.z
        vertex_count := vertex_count + 1

    schedule(plotter, plot_clean, plot_vertex)

    vbo_p = ffi.automem(ffi.int)
    gl.genBuffers(1, vbo_p)
    vbo = vbo_p[0]

    # vertex array object (binds to the vbo above)
    v_position = gl.getAttribLocation(po, "position")
    v_color    = gl.getAttribLocation(po, "color")
    print(v_position, v_color)
    vao_p = ffi.automem(ffi.int)
    gl.genVertexArrays(1, vao_p)
    vao = vao_p[0]

    gl.bindBuffer(gl.ARRAY_BUFFER, vbo)
    gl.bindVertexArray(vao)
    gl.enableVertexAttribArray(v_position)
    gl.vertexAttribPointer(v_position, 3, gl.FLOAT, gl.FALSE, stride, ffi.cast(v_offset0, ffi.voidp))
    if v_color >= 0
        gl.enableVertexAttribArray(v_color)
        gl.vertexAttribPointer(v_color, 3, gl.FLOAT, gl.FALSE, stride, ffi.cast(v_offset1, ffi.voidp))
    gl.bindBuffer(gl.ARRAY_BUFFER, 0)

    event = ffi.automem(sdl.Event)
    running = true
    while running
        while sdl.PollEvent(event) != 0
            if event.type == sdl.QUIT
                return exit(0)
        sleep(0.0)
        gl.clearColor(0.5, 0.5, 0.5, 1)
        gl.clear(gl.COLOR_BUFFER_BIT)
        gl.useProgram(po)
        gl.bindBuffer(gl.ARRAY_BUFFER, vbo)
        gl.bufferData(gl.ARRAY_BUFFER, data_size, data, gl.STREAM_DRAW)
        gl.drawArrays(gl.LINES, 0, vertex_count)
        sdl.GL_SwapWindow(win)
    sdl.GL_DeleteContext(ctx)
    sdl.DestroyWindow(win)
    sdl_img.Quit()
    sdl.Quit()

build_shader = (so, source):
    source = encode_utf8(source)
    source_length = ffi.automem(ffi.uint)
    source_length.to = source.length
    gl.shaderSource(so, 1, ffi.ref(source), source_length)

    compiled = ffi.automem(ffi.int)

    gl.compileShader(so)
    gl.getShaderiv(so, gl.COMPILE_STATUS, compiled)
    if compiled.to != gl.TRUE
        print("shader compile failed")
        print(get_info_log(so))
        exit(1)

get_info_log = (obj):
    blen = ffi.automem(ffi.uint)
    gl.getObjectParameterivARB(obj, gl.OBJECT_INFO_LOG_LENGTH_ARB, blen)
    gl.getShaderiv(obj, gl.INFO_LOG_LENGTH, blen)
    log = ffi.automem(ffi.ubyte, blen.to)
    gl.getInfoLogARB(obj, blen.to, null, log)
    return log.str

autoarray = (ctype, sequence):
    mem = ffi.automem(ctype, sequence.length)
    i = 0
    for x in sequence
        mem[i] = x 
        i = i + 1
    return mem

arraycopy = (dst, src):
    i = 0
    for x in src
        dst[i] = x
        i = i + 1

tmp_matrix = ffi.automem(ffi.float, 16)
uniform_mat4 = (loc, matrix):
    arraycopy(tmp_matrix, matrix)
    gl.uniformMatrix4fv(loc, 1, 0, tmp_matrix)
