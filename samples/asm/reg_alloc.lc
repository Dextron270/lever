import asm, fs, ffi, mman, platform
from asm import Address, Register, Relative, Immediate
from asm import i8, i16, i32, i64
from backend import Block, Entry, Variable, Operation, Jump, build_program

jmp = {i32: 886, i8: 887}
jge = {i32: 875, i8: 876} # (SF=0F)
jle = {i32: 879, i8: 880} # (ZF=1 or SFâ‰ OF).

main = ():
    assert platform.arch == "x86_64"
        "It just might not work on x86"
    assert platform.name.startswith("linux")
        "Also this still depends on the SystemV calling conventions for a short while."

    # System V AMD64 ABI
    abi_regs = {
        # We may also want to reserve the base pointer (5)
        # So it is not in the list below
        asm.GPR: object();
            free_regs = [0,1,2,6,7,8,9,10,11]
            save_regs = [3,12,13,14,15]
        asm.MM: object();
            free_regs = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
            save_regs = []
    }
    # Under the RSP we have so called 128-bytes of 'red zone' that can be
    # used for variables that can spill across function calls.

    # TODO: We may want to give this system subtyping
    #       awareness. So that the allocator always gets
    #       to work with full registers rather than
    #       sub-registers.

    arg_0 = Register(i64, 7) # RDI
    arg_1 = Register(i64, 6) # RSI
    arg_2 = Register(i64, 2) # RDX
    arg_3 = Register(i64, 1) # RCX
    arg_4 = Register(i64, 8)
    arg_5 = Register(i64, 9)

    r_points = arg_0
    r_count  = arg_1
    r_x = arg_2
    r_y = arg_3
    r_r = arg_4

    off_x = 0
    off_y = off_x + ffi.sizeof(ffi.long)
    off_r = off_y + ffi.sizeof(ffi.long)
    point_sz = ffi.sizeof(Point)



    entry = Block()
    loop  = Block()
    no_collision = Block()
    collision    = Block()

    v_i = Variable(i64, "i")
    v_off = Variable(i64, "off")
    v_dx = Variable(i64, "dx")
    v_dy = Variable(i64, "dy")
    v_rr = Variable(i64, "rr")
    v_dx2 = Variable(i64, "dx2")
    v_dy2 = Variable(i64, "dy2")
    v_ll2 = Variable(i64, "ll2")
    v_rr2 = Variable(i64, "rr2")

    # entry(points, count, x, y, r):
    #    i = 0
    entry.code = [
        Entry([r_points, r_count, r_x, r_y, r_r]),
        Operation(5973, [v_i, v_i]); # It is important to point out we are doing a clear here.
            operand_usages = ["USAGE_WRITE", null],
        Jump(jmp, loop, [v_i, r_points, r_count, r_x, r_y, r_r])
    ]

    # loop(i, points, count, x, y, r):
    loop.code = [
        # if i >= count goto no_collision
        # CMP m64 r64
        Operation(475, [v_i, r_count]),
        Jump(jge, no_collision, []),
        # IMUL r64 m64 imm8
        Operation(811, [v_off, v_i, Immediate(i8, point_sz)]),
        # dx = points[i].x - x
        # dy = points[i].y - y
        # rr = points[i].r + r
        # MOV r64 m64
        Operation(1125, [v_dx, Address(i64, off_x, r_points, v_off)]),
        Operation(1125, [v_dy, Address(i64, off_y, r_points, v_off)]),
        Operation(1125, [v_rr, Address(i64, off_r, r_points, v_off)]),
        # SUB r64 m64
        Operation(2327, [v_dx, r_x]),
        Operation(2327, [v_dy, r_y]),
        # ADD r64 m64
        Operation(73, [v_rr, r_r]),
        # dx2 = dx*dx
        # MOV r64, m64
        Operation(1125, [v_dx2, v_dx], true),
        # IMUL r64 r64
        Operation(819, [v_dx2, v_dx2]),
        # dy2 = dy*dy
        # MOV r64, m64
        Operation(1125, [v_dy2, v_dy], true),
        # IMUL r64 r64
        Operation(819, [v_dy2, v_dy2]),
        # rr2 = rr*rr
        # MOV r64, m64
        Operation(1125, [v_rr2, v_rr], true),
        # IMUL r64 r64
        Operation(819, [v_rr2, v_rr2]),
        # ll2 = dx2 + dy2
        # ADD r64 m64
        Operation(1125, [v_ll2, v_dx2], true),
        Operation(73, [v_ll2, v_dy2]),
        # if ll2 <= rr2 goto collision
        # CMP m64 r64
        Operation(475, [v_ll2, v_rr2]),
        Jump(jle, collision, []),
        # i += 1
        # ADD m64, imm8 (sign extend)
        Operation(55, [v_i, Immediate(i8, 1)]),
        Jump(jmp, loop, [v_i, r_points, r_count, r_x, r_y, r_r])
    ]

    # no_collision(): return false
    no_collision.code = [
        # XOR m64 r64
        Operation(5973, [Register(i64, 0), Register(i64, 0)]);
            operand_usages = ["USAGE_WRITE", null],
        Operation(1901, []) # RET NEAR
    ]

    # collision():    return true
    collision.code = [
        # XOR m64 r64
        Operation(5973, [Register(i64, 0), Register(i64, 0)]);
            operand_usages = ["USAGE_WRITE", null],
        # MOV m8, imm8
        Operation(1128, [Register(i8, 0), Immediate(i8, 1)]),
        Operation(1901, []) # RET NEAR
    ]

    program = [
        entry,
        loop,
        no_collision,
        collision
    ]

    output = build_program(program, abi_regs)

    # So that one can ndisasm this.
    # fd = fs.open(dir ++ "dump", fs.WRONLY | fs.CREAT | fs.TRUNC)
    # fd.pwrite(Uint8Array(output), 0)
    # fd.close()

    buf = mman.Asmbuf(4096)
    buf.memcpy(Uint8Array(output))
    buf.finalize()

    c_type = ffi.cfunc(ffi.int, [
        ffi.pointer(Point), ffi.size_t, ffi.long, ffi.long, ffi.long
    ])
    c_func = ffi.cast(buf, c_type)

    benchmark(collision_ref_impl)
    benchmark(c_func)

    # Should be careful with this one.
    buf.free() 

# The collision benchmark and a reference implementation
Point = ffi.struct([
    ["x", ffi.long],
    ["y", ffi.long],
    ["r", ffi.long],
])

benchmark = (check_collision):
    length = 1024 * 1024
    points = ffi.automem(Point, length)
    count = 0
    skip = 0
    was = time()
    while count < 20000 #time() - was < 1.0
        x = int(random() * 10000)
        y = int(random() * 10000)
        r = int(random() * 10 + 1)
        if check_collision(points, count, x, y, r) != 0
            skip += 1
        else
            assert count < length
            points[count].x = x
            points[count].y = y
            points[count].r = r
            count += 1
    now = time()
    print("time", now - was)
    print("count", count, "skip", skip)

collision_ref_impl = (points, count, x, y, r):
    for i in range(count)
        dx = points[i].x - x
        dy = points[i].y - y
        rr = points[i].r + r
        if dx*dx + dy*dy <= rr*rr
            return 1
    return 0

