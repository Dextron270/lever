import asm, fs, ffi, mman, platform
from asm import Address, Register, Relative, Immediate
from asm import i8, i16, i32, i64, m128

# This attempt failed, but was otherwise very educational to me.
main = ():
    assert platform.arch == "x86_64"
        "It just might not work on x86"
    assert platform.name.startswith("linux")
        "Also this depends on the SystemV calling conventions."

    arg_0 = Register(i64, 7) # RDI
    arg_1 = Register(i64, 6) # RSI
    arg_2 = Register(i64, 2) # RDX
    arg_3 = Register(i64, 1) # RCX
    arg_4 = Register(i64, 8)
    arg_5 = Register(i64, 9)

    loop_label = 0
    exit_label = 0
    ja_label = 0
    jl1_label = 0
    jl2_label = 0

    assemble = ():
        # 1811 PUSH r64                    [64] Push r64.
        # we no longer clobber any registers we should save.
        # i = 0 .r0
        # 5973 XOR m64 r64                 [64] r/m64 XOR r64.
        emit(5973, Register(i64, 0), Register(i64, 0))
        # j = offset .arg_4(8)
        # 1289 NEG r64                     [64] Two's complement negate r/m64.
        #   74 ADD r64 r64                 [64] Add r64 to r/m64.
        # k = j - stride .r1
        emit(1289, Register(i64, 1))
        emit(  74, Register(i64, 1), Register(i64, 8))
        #  852 INT 3                       [64] [L] Interrupt 3-trap to debugger.
        emit( 852, null) # The argument here is not used.
        # loop:
        loop_label := output.length
        # 0475 CMP m64 r64                 [64] Compare r64 with r/m64.
        # if i >= length goto exit
        emit( 475, Register(i64, 0), arg_5)
        # 0862 JAE rel32                   [64] [L] Jump short if above or equal (CF=0).
        emit( 862, Immediate(i32, exit_label - ja_label))
        ja_label := output.length

        simd_paeth_assembly(emit,
            Address(m128, 0, 2, 0), # input  = [input    .r2 + i .r0]
            Address(m128, 0, 6, 1), # a      = [scanline .r6 + k .r1]
            Address(m128, 0, 7, 8), # b      = [prior    .r7 + j .r8]
            Address(m128, 0, 7, 1), # c      = [prior    .r7 + k .r1]
            Address(m128, 0, 6, 8)) # output = [scanline .r6 + j .r8]
        #     i, j, k += 4
        emit(  72, Register(i64, 0), Immediate(i8, 4))
        emit(  72, Register(i64, 8), Immediate(i8, 4))
        emit(  72, Register(i64, 1), Immediate(i8, 4))
        #     jump loop
        # 0886 JMP rel32                   [64] [L] Jump short, RIP = RIP + 8-bit displacement sign extended to 64-bits
        emit( 886, Immediate(i32, loop_label - exit_label))
        # exit:
        exit_label := output.length
        #     return
        emit(1901) # RET NEAR


    emit = (uid, args...):
        output.extend(asm.encode_ins(uid, args))

    output = []
    assemble()
    output = []
    assemble()

    # So that one can ndisasm this.
    fd = fs.open(dir ++ "dump", fs.WRONLY | fs.CREAT | fs.TRUNC)
    fd.pwrite(Uint8Array(output), 0)
    fd.close()

    buf = mman.Asmbuf(4096)
    buf.memcpy(Uint8Array(output))
    buf.finalize()

    prior    = Uint8Array(64)
    scanline = Uint8Array(64)
    input    = Uint8Array(32)
    for i in range(scanline.length)
        prior[i]    = 0
        scanline[i] = 0
    for i in range(input.length)
        input[i]    = i

    #print(asm.format_hex(prior)...)
    #print(asm.format_hex(scanline)...)
    #print(asm.format_hex(input)...)
    #print("preparing the function pointer")
    c_type = ffi.cfunc(ffi.int, [
        ffi.voidp, ffi.voidp, ffi.voidp,   # prior, scanline, data
        ffi.size_t,ffi.size_t,ffi.size_t]) # stride, offset, length
    c_func = ffi.cast(buf, c_type)
    #print("new c function", c_func)
    #res = c_func(prior, scanline, input, 4, 4, input.length)
    #print("call result:", res) # prints 'call result: 23'
    #print(asm.format_hex(prior)...)
    #print(asm.format_hex(scanline)...)
    #print(asm.format_hex(input)...)

    png.decode_filters[4] = make_new_filter(c_func, png.decode_filters[4])
    main_png()

    buf.free() 

make_new_filter = (optimized, ordinary):
    return (prior, scanline, input, stride, offset, length):
        if length < 32 # if it's so small chunk that our thing breaks
            return ordinary(prior, scanline, input, stride, offset, length)
        # max(0, offset - stride) + 16  must be filled.
        fill_offset = max(max(0, offset-stride) + 16, offset)
        fast_offset = max(offset, stride)
        fast_index = fast_offset - offset
        remain_length = length - fast_index
        last_length = remain_length & 15
        fast_length = remain_length - last_length
        last_index = length - last_length
        last_offset = offset + last_index
        #print(offset, fill_offset)
        #print(fast_offset, fast_offset+fast_length)
        #print(last_offset, last_offset+last_length)
        ordinary(prior, scanline, input,
            stride, offset, fill_offset - offset)
        optimized(prior, scanline, input[fast_index .:],
            stride, fast_offset, fast_length)
        ordinary(prior, scanline, input[last_index .:],
            stride, last_offset, last_length)

import png, fs, vmprof

main_png = ():
    vmprof_fd = fs.open(dir ++ "png.vmprof",
        fs.WRONLY | fs.TRUNC | fs.CREAT)
    vmprof.enable(vmprof_fd, 0.0001)

    for i in range(10)
        image = png.read_file(dir ++ "../png/frants_boe_villender_test.png")

    for i in range(0, image.width*image.height*4, image.width*4)
    #for i in range(0, image.width*2*4, image.width*4)
        print(hex_intro(image.data[i .: i+image.width*4])...)

    vmprof.disable()
    vmprof_fd.close()

main_heated = ():
    print("heating up")
    for i in range(10)
        image = png.read_file(dir ++ "../png/frants_boe_villender_test.png")
    print("...")

    start = time()
    for i in range(10)
        image = png.read_file(dir ++ "../png/frants_boe_villender_test.png")
    dur = time() - start
    print("test took", dur, "seconds")
    

hex_intro = (seq):
    #for n in seq
    #    yield n.to_string(16).rjust(2, '0')
    if seq.length <= 32
        for n in seq[0 .: 16]
            yield n.to_string(16).rjust(2, '0')
        if seq.length <= 16
            yield "..."
    else
        for n in seq[0 .: 16]
            yield n.to_string(16).rjust(2, '0')
        yield "..."
        for n in seq[seq.length - 16 .: ]
            yield n.to_string(16).rjust(2, '0')


simd_paeth_assembly = (emit, input_addr, a_addr, b_addr, c_addr, scanline_addr):
    xmm0 = Register(m128, 0)
    xmm1 = Register(m128, 1)
    xmm2 = Register(m128, 2)
    xmm3 = Register(m128, 3)
    xmm4 = Register(m128, 4)
    xmm5 = Register(m128, 5)
    xmm6 = Register(m128, 6)
    xmm7 = Register(m128, 7)
    xmm8 = Register(m128, 8)
    xmm9 = Register(m128, 9)
    xmm10 = Register(m128, 10)
    xmm11 = Register(m128, 11)
    xmm12 = Register(m128, 12)
    xmm13 = Register(m128, 13)
    xmm14 = Register(m128, 14)
    xmm15 = Register(m128, 15)
    # register allocation
    result = xmm0
    al     = xmm1
    bl     = xmm2
    cl     = xmm3
    ah     = xmm4
    bh     = xmm5
    ch     = xmm6
    pal    = xmm7
    pbl    = xmm8
    pcl    = xmm9
    pah    = xmm10
    pbh    = xmm11
    pch    = xmm12
    # result = 1164 MOVDQU [input + i - offset]
    emit(1168, result, input_addr)
    # a = 1164 MOVDQU   [scanline + i - stride]
    emit(1168, pal, a_addr)       # reuse pal, pbl, pcl
    # b = 1168 MOVDQU [prior + i]
    emit(1168, pbl, b_addr)
    # c = 1164 MOVDQU   [prior + i - stride]
    emit(1168, pcl, c_addr)
    # ah = 1817 PXOR ah
    # bh = 1817 PXOR bh
    # ch = 1817 PXOR ch
    # al = 1817 PXOR al
    # bl = 1817 PXOR bl
    # cl = 1817 PXOR cl
    emit(1817, al, al)
    emit(1817, bl, bl)
    emit(1817, cl, cl)
    emit(1817, ah, ah)
    emit(1817, bh, bh)
    emit(1817, ch, ch)
    # ah = 1772 PUNPCKHBW a
    # bh = 1772 PUNPCKHBW b
    # ch = 1772 PUNPCKHBW c
    emit(1772, ah, pal)
    emit(1772, bh, pbl)
    emit(1772, ch, pcl)
    # al = 1786 PUNPCKLBW a
    # bl = 1786 PUNPCKLBW b
    # cl = 1786 PUNPCKLBW c
    emit(1786, al, pal)
    emit(1786, bl, pbl)
    emit(1786, cl, pcl)
    # {a,b,c}{l,h} = 1730 PSRLW {a,b,c}{l, h}
    emit(1733, al, Immediate(i8, 8))
    emit(1733, bl, Immediate(i8, 8))
    emit(1733, cl, Immediate(i8, 8))
    emit(1733, ah, Immediate(i8, 8))
    emit(1733, bh, Immediate(i8, 8))
    emit(1733, ch, Immediate(i8, 8))
    # pal  = 1165 MOVDQA al
    # pah  = 1165 MOVDQA ah
    emit(1165, pal, al)
    emit(1165, pah, ah)
    # pal += 1419 PADDW bl
    # pah += 1419 PADDW bh
    emit(1419, pal, bl)
    emit(1419, pah, bh)
    # pal -= 1766 PSUBW cl
    # pah -= 1766 PSUBW ch
    emit(1766, pal, cl)
    emit(1766, pah, ch)
    # pbl  = 1165 MOVDQA pal
    # pbh  = 1165 MOVDQA pah
    # pcl  = 1165 MOVDQA pal
    # pch  = 1165 MOVDQA pah
    emit(1165, pbl, pal)
    emit(1165, pbh, pah)
    emit(1165, pcl, pcl)
    emit(1165, pch, pch)
    # pal -= 1766 PSUBW al
    # pbl -= 1766 PSUBW bl
    # pcl -= 1766 PSUBW cl
    # pah -= 1766 PSUBW ah
    # pbh -= 1766 PSUBW bh
    # pch -= 1766 PSUBW ch
    emit(1766, pal, al)
    emit(1766, pbl, bl)
    emit(1766, pcl, cl)
    emit(1766, pah, ah)
    emit(1766, pbh, bh)
    emit(1766, pch, ch)
    # pal = 1373 PABSW pal
    # pbl = 1373 PABSW pbl
    # pcl = 1373 PABSW pcl
    # pah = 1373 PABSW pah
    # pbh = 1373 PABSW pbh
    # pch = 1373 PABSW pch
    emit(1373, pal, pal)
    emit(1373, pbl, pbl)
    emit(1373, pcl, pcl)
    emit(1373, pah, pah)
    emit(1373, pbh, pbh)
    emit(1373, pch, pch)
    # We would need at least 4 registers more, so
    # we need to figure out which ones we can reuse.
    c1l    = xmm13
    c1h    = xmm14
    c2l    = xmm15
    # If we do some reordering here, we can
    # reuse pal
    # c1l = 1478 PCMPGTW pal pbl
    # c1h = 1478 PCMPGTW pah pbh
    # c2l = 1478 PCMPGTW pal pcl
    # c2h = 1478 PCMPGTW pah pch
    emit(1164, c1l, pal)
    emit(1478, c1l, pbl)
    emit(1164, c2l, pal)
    emit(1478, c2l, pcl)
    c2h = pal
    emit(1164, c2h, pah)
    emit(1478, c2h, pbh)
    emit(1164, c1h, pah)
    emit(1478, c1h, pch)
    # c4l = 1478 PCMPGTW pbl pcl
    # c4h = 1478 PCMPGTW pbh pch
    # We can reuse pcl/pch for c4l, c4h
    c4l = pcl # emit(1164, c4l, pcl)
    c4h = pch # emit(1164, c4h, pch)
    emit(1478, c4l, pbl)
    emit(1478, c4h, pbh)
    # c3l = 1650 POR c1l c2l
    # c3h = 1650 POR c1h c2h
    # We can reuse c1* for c3*
    c3l = c1l
    c3h = c1h
    emit(1650, c3l, c2l)
    emit(1650, c3h, c2h)
    # cl = 1427 PAND cl c4l
    # ch = 1427 PAND ch c4h
    emit(1427, cl, c4l)
    emit(1427, ch, c4h)
    # c4l = 1431 PANDN bl, c4l
    # c4h = 1431 PANDN bh, c4h
    emit(1431, c4l, bl)
    emit(1431, c4h, bh)
    # cl = 1650 POR cl, bl
    # ch = 1650 POR ch, bh
    emit(1650, c4l, cl)
    emit(1650, c4h, ch)
    # cl = 1427 PAND cl, c3l
    # ch = 1427 PAND ch, c3h
    emit(1427, c4l, c3l)
    emit(1427, c4h, c3h)
    # c3l = 1431 PANDN bl, c3l
    # c3h = 1431 PANDN bh, c3h
    emit(1431, c3l, al)
    emit(1431, c3h, ah)
    # al = 1650 POR al, bl
    # ah = 1650 POR ah, bh
    emit(1650, c4l, c3l)
    emit(1650, c4h, c3h)
    # delta = 1387 PACKUSWB c4l, c4h
    delta = c4l
    emit(1387, delta, c4h)
    # result += 1391 PADDB delta
    emit(1391, result, delta)
    # 1168 MOVDQU [scanline + i], result
    emit(1167, scanline_addr, result)
    return result
