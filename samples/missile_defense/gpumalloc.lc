import ffi
from warpgpu import *

upload_flags = ["HOST_VISIBLE_BIT"]
readback_flags = ["HOST_VISIBLE_BIT", "HOST_COHERENT_BIT", "HOST_CACHED_BIT"]
device_flags = ["DEVICE_LOCAL_BIT"]


class GPUMemory
    +init = (self, gpu, flags, min_chunk=32*1024*1024):
        self.gpu = gpu
        self.flags = flags
        self.min_chunk = min_chunk
        self.allocators = []

    new_chunk = (self, req_size, typeBits):
        chunk_size = self.min_chunk
        while chunk_size < req_size
            chunk_size <<= 1
            assert chunk_size >= 0, "overflow"

        # TODO: Make this into a loop of sort, trying out memory entries
        #       in order.
        memoryIndex = null
        for memtype in memory_report(self.gpu.physicalDevice).types
            if 1 & (typeBits >> memtype.index) == 0
                continue
            if self.flags <= memtype.flags
                memoryIndex = memtype.index
                break
        assert memoryIndex, "No gpu-visible memory available for this resource"

        chunk = self.gpu.allocateMemory({
            allocationSize = chunk_size
            memoryTypeIndex = memoryIndex
        })
        chunk.index = memoryIndex
        chunk.size = chunk_size # needed for doing the map.
        chunk.addr = null       # reference counting for memory map
        chunk.map_ref = 0
        allocator = Allocator(chunk, chunk_size)
        self.allocators.append(allocator)
        return allocator

    alloc = (self, obj):
        req = obj.getMemoryRequirements()
        block = null
        for heap in self.allocators
            if 1 & (req.memoryTypeBits >> heap.chunk.index) == 0
                continue
            block = heap.alloc(req.alignment, req.size)
            if block
                break
        heap = self.new_chunk(req.size, req.memoryTypeBits)
        block = heap.alloc(req.alignment, req.size)
        obj.bindMemory(heap.chunk, block.offset)
        return MemoryBlock(heap.chunk, block)

    createBuffer = (self, size, usage):
        buffer = vulkan.Buffer(self.gpu, {size = size, usage = usage})
        buffer.mem = self.alloc(buffer)
        return buffer

    destroy = (self):
        for heap in self.allocators
            heap.chunk.free()
        self.allocators = []

class MemoryBlock
    +init = (self, chunk, block):
        self.chunk = chunk
        self.block = block
        self.mapped = false

    free = (self):
        assert self.block and not self.mapped, [self.block, self.mapped]
        self.block.parent.free(self.block)
        self.block = null

    map = (self, ctype):
        assert not self.mapped
        chunk = self.chunk
        if not chunk.addr
            chunk.addr = chunk.map(ffi.byte, 0, chunk.size)
            assert chunk.map_ref == 0
        chunk.map_ref += 1
        self.mapped = true
        return ffi.cast(chunk.addr[self.block.offset .:], ffi.pointer(ctype))

    unmap = (self):
        assert self.mapped
        self.mapped = false
        self.chunk.map_ref -= 1
        if self.chunk.map_ref == 0
            self.chunk.unmap()
            self.chunk.addr = null

class Allocator
    +init = (self, chunk, size):
        self.chunk = chunk
        self.size = size
        self.free_blocks = [Block(self, 0, size)]

    alloc = (self, alignment, size):
        block = self.pop_fit(alignment, size)
        if not block
            return null
        offset = align_offset(block.offset, alignment)
        if offset != 0
            split = block.split(offset)
            self.free_blocks.append(split.left)
            block = split.right
        if block.size > size
            split = block.split(size)
            block = split.left
            self.free_blocks.append(split.right)
        block.used = true
        return block

    pop_fit = (self, alignment, size):
        for block in self.free_blocks
            if block.fit(alignment, size)
                self.free_blocks.remove(block)
                return block
        return null

    free = (self, block):
        assert block.used, "double free"
        block.used = false
        if block.prev and not block.prev.used
            self.free_blocks.remove(block.prev)
            block = block.prev.merge()
        if block.next and not block.next.used
            self.free_blocks.remove(block.next)
            block = block.merge()
        self.free_blocks.append(block)

class Block
    +init = (self, parent, offset, size, prev=null, next=null):
        self.parent = parent
        self.offset = offset
        self.size = size
        self.prev = prev
        self.next = next
        self.used = false

    fit = (self, alignment, size):
        size += align_offset(self.offset, alignment)
        return size <= self.size

    split = (self, offset):
        left = self
        right = Block(left.parent, left.offset+offset, left.size-offset)
        right.next = left.next
        right.prev = left
        left.next = right
        left.size = offset
        return object({left=left, right=right})

    merge = (self):
        assert self.next
        left = self
        right = self.next
        left.next = right.next
        if right.next
            right.next.prev = left
        right.prev = null
        right.next = null

align_offset = (x, a):
    return (a - x % a) % a
