import api, ffi, fs, json, png, sdl, vulkan
from warpgpu import *
import gpumalloc
from dsp import saw, sqr, tri

run_profiler = false
if run_profiler
    import vmprof
    profile = fs.open("missile_defense.vmprof", fs.WRONLY | fs.TRUNC | fs.CREAT)
    vmprof.enable(profile, 0.0001)

main = ():
    window = sdl.Window(name, {
        width = 2048
        height = 2048
    })

    gpu = GPU(window.wsi)
    screen = Rect(0, 0, window.width, window.height)
    swapchain = get_swapchain(
        gpu.device, window.wsi.surface, screen)

    device_only = gpumalloc.GPUMemory(gpu.device, gpumalloc.device_flags)
    readback = gpumalloc.GPUMemory(gpu.device, gpumalloc.readback_flags)
    upload = gpumalloc.GPUMemory(gpu.device, gpumalloc.upload_flags)

    sprites = object();
        spritesheet = png.read_file(
            dir ++ "spritesheet.png")
        image = vulkan.Image(gpu, {
            imageType = "2D"
            format = spritesheet.format
            extent = { width = spritesheet.width, height = spritesheet.height, depth = 1 }
            mipLevels = 1
            arrayLayers = 1
            samples = "1_BIT"
            tiling = "LINEAR"
            usage = ["SAMPLED_BIT", "TRANSFER_SRC_BIT"]
            initialLayout = "PREINITIALIZED"
        })
        image.mem = upload.alloc(image)
        #image.mem = gpu.mem.associate(image, [
        #    "HOST_VISIBLE_BIT", "HOST_COHERENT_BIT"])
        data = image.mem.map(ffi.byte)
        ffi.memcpy(data, spritesheet.data, spritesheet.data.length)
        image.mem.unmap()
        view = vulkan.ImageView(gpu.device, {
            image = image
            viewType = "2D"
            format = spritesheet.format
            subresourceRange = {
                aspectMask = "COLOR_BIT"
                baseMipLevel = 0
                levelCount = 1
                baseArrayLayer = 0
                layerCount = 1
            }})
        sampler = vulkan.Sampler(gpu, {
            magFilter = "LINEAR"
            minFilter = "LINEAR"
            addressModeU = "REPEAT"
            addressModeV = "REPEAT"
            addressModeW = "REPEAT"
            anisotropyEnable = true
            maxAnisotropy = 1
            borderColor = "INT_OPAQUE_BLACK"
            unnormalizedCoordinates = false
            compareEnable = false
            compareOp = "ALWAYS"
            mipmapMode = "LINEAR"
            mipLodBias = 0.0
            minLod = 0.0
            maxLod = 0.0
        })

    vertex_layout = object();
        vertexInputState = {
            vertexBindingDescriptions = [{
                binding = 0
                stride = 6 * ffi.sizeof(ffi.float)
                inputRate = "VERTEX"
            }]
            vertexAttributeDescriptions = [
                {
                    binding = 0
                    location = 0
                    format = "R32G32B32_SFLOAT"
                    offset = 0
                },
                {
                    binding = 0
                    location = 1
                    format = "R32G32B32_SFLOAT"
                    offset = 3 * ffi.sizeof(ffi.float)
                }
            ]
        }
        inputAssemblyState = {topology = "TRIANGLE_LIST"}

    vbo = object();
        max_sprites = 1024*100
        size = 1024 * 6 * 6
        buffer = upload.createBuffer(size, "VERTEX_BUFFER_BIT")
        data = buffer.mem.map(ffi.float)

    sprite_layer = SpriteLayer(vbo.data, vbo.max_sprites, 
        json.read_file(dir ++ "spritesheet.json"), 512, 512)

    ubo = object();
        size = 2 * 4 * 4 * ffi.sizeof(ffi.float)
        buffer = upload.createBuffer(size, "UNIFORM_BUFFER_BIT")
        data = buffer.mem.map(ffi.float)
        stuff = [
            1.0, 0.0, 0.0, 0.0,
            0.0, 1.0, 0.0, 0.0,
            0.0, 0.0, 1.0, 0.0,
            0.0, 0.0, 0.0, 1.0,

            1.0, 0.0, 0.0, 0.0,
            0.0, 1.0, 0.0, 0.0,
            0.0, 0.0, 1.0, 0.0,
           -1.0,-1.0, 0.0, 1.0 ]
        for i in range(stuff.length)
            data[i] = stuff[i]
        buffer.mem.unmap()

    cbuf = gpu.queue.pool.allocate({
        level = "PRIMARY",
        commandBufferCount = 1})[0]

    DSC0 = DescriptorSetLayout(gpu.device, {
        "screen": {
            binding=0,
            descriptorType = "UNIFORM_BUFFER",
            stageFlags="VERTEX_BIT"
        },
        "texSampler": {
            binding = 1,
            descriptorType = "COMBINED_IMAGE_SAMPLER",
            stageFlags = "FRAGMENT_BIT"
        },
    })

    dsc0 = DSC0()
    dsc0.screen = {
        buffer = ubo.buffer
        offset = 0
        range = -1 # ubo.buffer.size
    }
    dsc0.texSampler = {
        imageLayout = "SHADER_READ_ONLY_OPTIMAL"
        imageView = sprites.view
        sampler = sprites.sampler
    }
    gpu.update(dsc0)

    pipeline_layout = vulkan.PipelineLayout(gpu.device, {
        flags = 0
        setLayouts = [DSC0]
        pushConstantRanges = []})

    pb = RenderPassBuilder()
    pb.color0.attachment(swapchain.config, {
        loadOp = "CLEAR"
        storeOp = "STORE"
        initialLayout = 0 # UNDEFINED
        finalLayout = "PRESENT_SRC_KHR"
    })
    pb.p0.subpass("GRAPHICS", {
        colorAttachments = [
            pb.color0("COLOR_ATTACHMENT_OPTIMAL")
        ] })

    pass = pb.build(gpu.device, screen)

    swapchain.views = []
    swapchain.framebuffers = []
    for image in swapchain.images
        view = vulkan.ImageView(gpu.device, {
            image = image
            viewType = "2D"
            format = swapchain.format
            components = {r = "R", g = "G", b = "B", a = "A"}
            subresourceRange = swapchain.subresource_range
        })
        swapchain.views.append(view)
        framebuffer = pass.Framebuffer({
            color0 = view})
        swapchain.framebuffers.append(framebuffer)

    shaders = ShaderLoader(gpu.device, dir ++ "glsl")

    pipeline = pass.p0(
        shaders.fetch({
            vertex = "main.vert.spv:main"
            fragment = "main.frag.spv:main"
        }),
        pipeline_layout,
        vertex_layout,
        {
            colorBlendState = {
                logicOpEnable = false
                logicOp = "COPY"
                attachmentCount = 1
                attachments = [{
                    blendEnable = true
                    srcColorBlendFactor = "SRC_ALPHA" 
                    dstColorBlendFactor = "ONE_MINUS_SRC_ALPHA"
                    colorBlendOp = "ADD"
                    srcAlphaBlendFactor = "SRC_ALPHA"
                    dstAlphaBlendFactor = "ONE_MINUS_SRC_ALPHA"
                    alphaBlendOp = "ADD"
                    colorWriteMask = ["R_BIT", "G_BIT", "B_BIT", "A_BIT"]
                }]
                blendConstants = [0.0, 0.0, 0.0, 0.0]
            }
        })
    gpu.createPipeline(pipeline)

    ground_blasts = []

    audio = sdl.StereoAudio((t, dt):
        volume = pow(10, -1.2)
        out = object();
            left = 0.0
            right = 0.0
        noise = (random() * 2 - 1) * volume
        for blast in ground_blasts
            u = clamp(blast.x / 2.0, 0.0, 1.0)
            out.left  += (1-u) * exp(-blast.t * 10.0) * noise * sqr(t*tau*20)
            out.right += (  u) * exp(-blast.t * 10.0) * noise * sqr(t*tau*20)
            blast.t += dt
            if blast.t >= 0.5
                ground_blasts.remove(blast)

        return out)

    missiles = []
    clicks = []

    update = (game_step):
    #schedule(():
    #    while running
        for m in missiles
            vx = cos(m.angle) * m.speed
            vy = sin(m.angle) * m.speed
            m.x += vx * game_step
            m.y += vy * game_step
            dead = false
            if m.y < 0.2
                dead = true
                clicks.append(object();
                    x = m.x
                    y = m.y
                    t = 1.0)
                ground_blasts.append(object();
                    x = m.x
                    t = 0.0)
                if ground_blasts.length > 10
                    o = null
                    drop = null
                    for b in ground_blasts
                        o = max(b.t, o)
                        if b.t == o
                            drop = b
                    ground_blasts.remove(drop)

            for c in clicks
                dx = m.x - c.x
                dy = m.y - c.y
                if dx*dx + dy*dy <= pow(16/512, 2)
                    dead = true
                    clicks.append(object();
                        x = m.x
                        y = m.y
                        t = 1.0)
                    break

            if dead
                missiles.remove(m)
    #        sleep(1 / 60.0))

        for c in clicks
            c.t -= game_step
            if c.t < 0
                clicks.remove(c)

    schedule(():
        while running
            for i in range(10)
                m = object();
                    x = random() * 2
                    y = 2
                    speed = random() * 0.5 + 0.1
                    angle = -pi / 2 + ((random() - 0.5) * pi * 0.9)
                missiles.append(m)
            sleep(0.2))

    portal = Portal(gpu, swapchain)
    
    m1 = random()*tau
    m2 = random()*tau
    render = ():
        if not portal.acquire().SUCCESS
            return

        sprite_layer.clear()
        sprite_layer.add("scenery", 0, 0, 2.0 / 512)
        for m in missiles
            sprite_layer.add("missile", m.x, m.y, 1.0 / 512, m.angle)

        for c in clicks
            sprite_layer.add("circle", c.x, c.y, 1.0 / 512)

        #sprite_layer.add("circle", 1, 1, 2.0 / 512, time()/2)
        #sprite_layer.add("sheet", 0, 0, 1.0 / 512, time()/3)


        cbuf.begin({flags = "ONE_TIME_SUBMIT_BIT"})
        cbuf.beginRenderPass({
            renderPass = pass
            framebuffer = portal.framebuffer
            renderArea = screen.area
            clearValues = [
                {color = {float32 = [0.0, 0.0, 0.0, 1.0]}}
            ]},
            "INLINE")
        cbuf.bindPipeline("GRAPHICS", pipeline)
        cbuf.bindDescriptorSets("GRAPHICS", pipeline_layout, 0,
            [dsc0], [])
        cbuf.bindVertexBuffers(0, [vbo.buffer], [0])
        cbuf.draw(sprite_layer.sprite_count*6, 1, 0, 0)
        cbuf.endRenderPass()
        cbuf.end()
        portal.present([cbuf])

    now = was = time()
    game_step = 1 / 60.0

    audio.play()
    event = ffi.automem(sdl.sdl.Event)
    running = true
    while running
        now = time()
        if now - was > game_step
            update(game_step)
            was += ((now - was) // game_step) * game_step
            render()
        while sdl.sdl.PollEvent(event) != 0
            if event.type == sdl.sdl.QUIT
                running = false
            if event.type == sdl.sdl.MOUSEBUTTONDOWN
                ndx = event.button.x / window.width
                ndy = 1.0 - event.button.y / window.height
                clicks.append(object();
                    t = 1.5
                    x = ndx * 2
                    y = ndy * 2)

        sleep(0.001)
    
    audio.close()
    gpu.destroy()

    if run_profiler
        vmprof.disable()
        profile.close()

    exit(0)

    

class SpriteLayer
    +init = (self, f32data, max_sprites, frames, width, height):
        self.sprite_count = 0
        self.max_sprites = max_sprites
        self.f32data = f32data
        self.frames = frames
        self.width = width
        self.height = height

    clear = (self):
        self.sprite_count = 0

    add = (self, name, x, y, scale=1.0, angle=0.0):
        idx = self.sprite_count
        self.sprite_count += 1
        if idx >= self.max_sprites
            return
        frame = self.frames[name]
        left   = frame["left"]
        right  = frame["right"]
        top    = frame["top"]
        bottom = frame["bottom"]
        x_anchor = frame["x"]
        y_anchor = frame["y"]
        a_l = (left  - x_anchor)
        a_r = (right - x_anchor)
        a_t = 1-(bottom - y_anchor)
        a_b = 1-(top - y_anchor)
        s_l = left / self.width
        s_r = right / self.width
        s_t = top / self.height
        s_b = bottom / self.height
        c = cos(angle) * scale
        s = sin(angle) * scale
        lt_x = c*a_l - s*a_t
        lt_y = s*a_l + c*a_t
        lb_x = c*a_l - s*a_b
        lb_y = s*a_l + c*a_b
        rt_x = c*a_r - s*a_t
        rt_y = s*a_r + c*a_t
        rb_x = c*a_r - s*a_b
        rb_y = s*a_r + c*a_b
        stride = 6*6
        out = [
            x+lt_x, y+lt_y, 0.0, s_l, s_b, 0.0,
            x+lb_x, y+lb_y, 0.0, s_l, s_t, 0.0,
            x+rt_x, y+rt_y, 0.0, s_r, s_b, 0.0,
            x+lb_x, y+lb_y, 0.0, s_l, s_t, 0.0,
            x+rb_x, y+rb_y, 0.0, s_r, s_t, 0.0,
            x+rt_x, y+rt_y, 0.0, s_r, s_b, 0.0,
        ]
        for i in range(out.length)
            self.f32data[stride*idx + i] = out[i]
