import ttf, polygon

assets = dir ++ "../assets"

font_file = assets ++ "sourcesanspro-regular.ttf"

#TODO: considerably improve this when retrieving & using metrics
init = ():
    font = ttf.read_file(font_file)

    app.background_color = [0.1, 0.1, 0.1, 1.0]
    app.vbo.vertex_count = 0
    app.tri_vbo.vertex_count = 0

    #print(app.metric.xdpi, app.metric.ydpi)
    #print(app.metric.xdpcm == app.metric.ydpcm)

    vertices = app.vbo.data
    head = font.tables.head
    hhea = font.tables.hhea

    x_height_cm = 0.1
    x_height = font.getGlyph('x').height
    
    #line_height_cm = 0.25
    #line_height = (hhea.ascent - hhea.descent + hhea.lineGap) / head.unitsPerEm

    scale = (2 / app.height) * app.metric.ydpcm * (x_height_cm / x_height)

    x = -1.0
    y =  0.9 - hhea.ascent * scale / head.unitsPerEm

    i = app.vbo.vertex_count
    a = y + hhea.ascent * scale / head.unitsPerEm
    vertices[i+0] = dict(pos=[ -1, a, 0 ], coord=[0, 0.5, 0], color=[0.8,0.8,0.8])
    vertices[i+1] = dict(pos=[ +1, a, 0 ], coord=[0, 0.5, 0], color=[0.8,0.8,0.8])
    app.vbo.vertex_count += 2

    for ch in "Hello, virtual worlds.\nOur short demo is very short\nSo short\nToo short."
        if ch == "\n"
            x = -1.0
            y -= (hhea.ascent - hhea.descent + hhea.lineGap) / head.unitsPerEm * scale
            continue
        glyph = font.getGlyph(ch)
        metric = font.tables.hmtx.metrics[glyph.index]
        if ch != " "
            render_glyph(font, glyph, x, y, scale, [1, 1, 1])
        x += metric.advance / head.unitsPerEm * scale 

    i = app.vbo.vertex_count
    a = y + hhea.descent * scale / head.unitsPerEm
    vertices[i+0] = dict(pos=[ -1, a, 0 ], coord=[0, 0.5, 0], color=[0.8,0.8,0.8])
    vertices[i+1] = dict(pos=[ +1, a, 0 ], coord=[0, 0.5, 0], color=[0.8,0.8,0.8])
    app.vbo.vertex_count += 2

    #glyph0 = font.getGlyph("@") # or z
    #glyph1 = font.getGlyph("h")
    #glyph2 = font.getGlyph("=")


    ##draw_contours(glyph0.contours, -1.0, -0.1, 1.5, [1,1,1])
    #render_glyph(font, glyph0, -0.7, -0.1, 1.5, [0.7, 0.3, 0.3])
    #render_glyph(font, glyph2, -0.1, -0.9, 1.5, [0.3, 0.3, 0.7])
    #render_glyph(font, glyph1, -0.8, -0.8, 1.5, [0.3, 0.7, 0.3])

    #for n in range(32, 127)
    #    glyph = font.getGlyph(chr(n))
    #    n -= 32
    #    render_glyph(font, glyph, -1 + 2 * (n % 12 / 12), +0.8 - 0.25 * (n // 12), 0.25)

    #print("tri vertex count", app.tri_vbo.vertex_count)

render_glyph = (font, glyph, x, y, scale, color=[1,1,1]):
    if glyph.type == "compound"
        for compound in glyph.compounds
            subglyph = font.tables.glyf.glyphs[compound.glyphIndex]
            render_glyph(font, subglyph,
                x + compound.x * scale, y + compound.y * scale, scale, color)
    else
        graph = polygon.contours_to_graph(glyph.contours)
        triangles = polygon.triangulate(graph, x, y, scale) # coords for debug.
        draw_triangulated(triangles, x, y, scale, [0,0,0], color)

draw_triangulated = (triangles, off_x, off_y, scale, color=[1,1,1], gray_color=[0.3, 0.3, 0.3]):
    #vertices = app.vbo.data
    #i = app.vbo.vertex_count
    # for edge in edges[0]
    #     vertices[i+0] = dict(pos=[ edge.v0.x*scale + off_x, edge.v0.y*scale + off_y, 0 ], coord=[0, 0.5, 0], color=[0.8,0.8,0.8])
    #     vertices[i+1] = dict(pos=[ edge.v1.x*scale + off_x, edge.v1.y*scale + off_y, 0 ], coord=[0, 0.5, 0], color=[0.8,0.8,0.8])
    #     i += 2
    #     app.vbo.vertex_count = i

    #for edge in edges[1]
    #    vertices[i+0] = dict(pos=[ edge.v0.x*scale + off_x, edge.v0.y*scale + off_y, 0 ], coord=[0, 0.5, 0], color=color)
    #    vertices[i+1] = dict(pos=[ edge.v1.x*scale + off_x, edge.v1.y*scale + off_y, 0 ], coord=[0, 0.5, 0], color=color)
    #    i += 2
    #    app.vbo.vertex_count = i

    vertices = app.tri_vbo.data
    i = app.tri_vbo.vertex_count
    for v0 in triangles
        vertices[i] = dict(pos=[ v0.x*scale + off_x, v0.y*scale + off_y, 0 ], coord=[0, 0.5, 0], color=gray_color)
        i += 1
    app.tri_vbo.vertex_count = i

draw_contours = (contours, off_x, off_y, scale, color=[1,1,1]):
    vertices = app.vbo.data
    i = app.vbo.vertex_count
    for contour in contours
        for edge in contour
            if edge.name == "bezier"
                vertices[i+0] = dict(pos=[ edge.v0.x*scale + off_x, edge.v0.y*scale + off_y, 0 ], coord=[0, 0.5, 0], color=color)
                vertices[i+1] = dict(pos=[ edge.c0.x*scale + off_x, edge.c0.y*scale + off_y, 0 ], coord=[0, 0.5, 0], color=color)
                vertices[i+2] = dict(pos=[ edge.c0.x*scale + off_x, edge.c0.y*scale + off_y, 0 ], coord=[0, 0.5, 0], color=color)
                vertices[i+3] = dict(pos=[ edge.v1.x*scale + off_x, edge.v1.y*scale + off_y, 0 ], coord=[0, 0.5, 0], color=color)
                i += 4
            else
                vertices[i+0] = dict(pos=[ edge.v0.x*scale + off_x, edge.v0.y*scale + off_y, 0 ], coord=[0, 0.5, 0], color=color)
                vertices[i+1] = dict(pos=[ edge.v1.x*scale + off_x, edge.v1.y*scale + off_y, 0 ], coord=[0, 0.5, 0], color=color)
                i += 2
    app.vbo.vertex_count = i

draw_glyph = (glyph, off_x, off_y, scale, color=[1,1,1]):
    #app.vbo.vertex_count = 0
    #app.tri_vbo.vertex_count = 0

    graph = polygon.contours_to_graph(glyph.contours)
    edges = polygon.triangulate(graph, off_x, off_y, scale)
    draw_triangulated(edges, off_x, off_y, scale, color, color)

    #vertices = app.vbo.data
    #i = app.vbo.vertex_count
    #for contour in glyph.contours
    #    for edge in contour
    #        if edge.name == "bezier"
    #            vertices[i+0] = dict(pos=[ edge.v0.x*scale + off_x, edge.v0.y*scale + off_y, 0 ], coord=[0, 0, 0], color=color)
    #            vertices[i+1] = dict(pos=[ edge.c0.x*scale + off_x, edge.c0.y*scale + off_y, 0 ], coord=[1, 0, 0], color=color)
    #            vertices[i+2] = dict(pos=[ edge.v1.x*scale + off_x, edge.v1.y*scale + off_y, 0 ], coord=[0, 1, 0], color=color)
    #            vertices[i+3] = dict(pos=[ edge.v0.x*scale + off_x, edge.v0.y*scale + off_y, 0 ], coord=[0, 0.5, 0], color=color)
    #            vertices[i+4] = dict(pos=[ edge.v1.x*scale + off_x, edge.v1.y*scale + off_y, 0 ], coord=[0, 0.5, 0], color=color)
    #            vertices[i+5] = dict(pos=[ off_x, off_y, 0 ], coord=[0, 0.5, 0], color=color)
    #            i += 6
    #        elif edge.name == "line"
    #            vertices[i+0] = dict(pos=[ edge.v0.x*scale + off_x, edge.v0.y*scale + off_y, 0 ], coord=[0, 0.5, 0], color=color)
    #            vertices[i+1] = dict(pos=[ edge.v1.x*scale + off_x, edge.v1.y*scale + off_y, 0 ], coord=[0, 0.5, 0], color=color)
    #            vertices[i+2] = dict(pos=[ off_x, off_y, 0 ], coord=[0, 0.5, 0], color=color)
    #            i += 3
    #        else
    #            assert false, edge.name
    #app.vbo.vertex_count = i

app.update = ():
    null

