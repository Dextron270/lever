#XY = exnihilo()
#setattr(XY, "+init", (self, x, y):
#    self.x = x
#    self.y = y
#)
#
#XY = class(XY)
#
#xy = XY(0.5, 0.4)
#print(xy.x)
#print(xy.y)
#
#if false
#    print("hello world")
#elif null
#    print("hello hello")
#else
#    print("hello else")
#
#if false
#    print("hello hulla")
#elif true
#    print("hello elif")
#
#print("hello world")
#print(null, true, false)
#print(1, 2, 1 + 2, -(4*1))
#
#i = 0
#while i < 10
#    print("rolling...", i)
#    i = i + 1
#
#baaz = (k):
#    print("foo bar", k)
#    print("hello", test)
#    test := [5,2,6]
#
#test = [1, 2, 3, 4]
#
#print(test[2])
#
#print(test.length)
#
#print([5, 3], [1,2,3][2], [5,2,6].length)
#
#for i in [1, 2, 3, 4]
#    print("each hello", i)
#
#baaz("kaka")
#baaz("kuka")
#
#print({<<})
#
#return test


vec2 = exnihilo()
setattr(vec2, "+init", (self, x, y):
    self.x = x
    self.y = y
)
setattr(vec2, "+iter", (self):
    return iter([self.x, self.y])
)
setattr(vec2, "+repr", (self):
    return "vec2(" ++ repr(self.x) ++ ", " ++ repr(self.y) ++ ")"
)
vec2 = class(vec2, object, "vec2")

a = vec2(0.5, 0.2)
b = vec2(0.8, 0.4)
c = vec2(0.3, 0.6)

%"+expr"[[vec2]] = (a):
    return a
%"-expr"[[vec2]] = (a):
    return vec2(-a.x, -a.y)
%"+"[[vec2, vec2]] = (a, b):
    return vec2(a.x+b.x, a.y+b.y)
%"-"[[vec2, vec2]] = (a, b):
    return vec2(a.x-b.x, a.y-b.y)
%"*"[[vec2, float]] = (a, b):
    return vec2(a.x*b, a.y*b)
%"*"[[float, vec2]] = (a, b):
    return vec2(a*b.x, a*b.y)
%"/"[[vec2, float]] = (a, b):
    return vec2(a.x/b, a.y/b)
%"/"[[float, vec2]] = (a, b):
    return vec2(a/b.x, a/b.y)

print(a)
print(b)
print(a + b)
print(1.1 + 1.2)

print("iterating vector")
for i in b
    print(i)



# primitives available (int,float,string,list)
# locals/globals available
# some of the operators available
# list literal available
# if/elif/else available
# function call available
# function return available
# while available
# local assign available
# simple indexing available
# getattr available
# for loop available
# function available
# upscope lookup available
# upscope assign available
# setitem/setattr available
# dict literals available
# classes available

# scope block capture missing.
# generators missing, yield missing
# while break/continue missing
# function varargs missing
# assert missing
# raise missing
